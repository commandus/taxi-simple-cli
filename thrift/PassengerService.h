/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PassengerService_H
#define PassengerService_H

#include <thrift/TDispatchProcessor.h>
#include "taxi_types.h"

namespace taxi {

class PassengerServiceIf {
 public:
  virtual ~PassengerServiceIf() {}
  virtual void getDocument(Document& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void getOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void loginDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice) = 0;
  virtual void loginPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice) = 0;
  virtual void findDictEntry(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange) = 0;
  virtual void findDictTag(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange) = 0;
  virtual void findBank(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange) = 0;
  virtual void findBankByName(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findOrgService(OrgServices& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange) = 0;
  virtual void findVehicle(Vehicles& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) = 0;
  virtual void findVehicleid(Vehicleids& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) = 0;
  virtual void addCity(City& _return, const Credentials& credentials, const UserDevice& userdevice, const City& value) = 0;
  virtual void addDictEntry(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value) = 0;
  virtual void addBank(Bank& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& value) = 0;
  virtual void addOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& value) = 0;
  virtual void addOrgService(OrgService& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& value) = 0;
  virtual void addCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& value) = 0;
  virtual void addPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& value) = 0;
  virtual void addDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& value) = 0;
  virtual void addVehicleColor(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value) = 0;
  virtual void addVehicleBrand(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name) = 0;
  virtual void addVehicleModel(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year) = 0;
  virtual void addVehicleModelByBrandName(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year) = 0;
  virtual void addRate(Rate& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& value) = 0;
  virtual void addServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value) = 0;
  virtual void addServiceOrderDecline(ServiceOrderDecline& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value) = 0;
  virtual void addClaim(Claim& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& value) = 0;
  virtual ID addTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& value) = 0;
  virtual void rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void findOrg(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange) = 0;
  virtual void findOrgByName(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findColor(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findBrand(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findModel(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange) = 0;
  virtual void findModelByBrandName(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange) = 0;
  virtual void findCity(Cities& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findDriver(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange) = 0;
  virtual void findCustomer(Customers& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange) = 0;
  virtual void findPassenger(Passengers& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange) = 0;
  virtual void findRate(Rates& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange) = 0;
  virtual void findServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void findServiceOrderDecline(ServiceOrderDeclines& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void findClaim(Claims& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void findTrack(Tracks& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
};

class PassengerServiceIfFactory {
 public:
  typedef PassengerServiceIf Handler;

  virtual ~PassengerServiceIfFactory() {}

  virtual PassengerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PassengerServiceIf* /* handler */) = 0;
};

class PassengerServiceIfSingletonFactory : virtual public PassengerServiceIfFactory {
 public:
  PassengerServiceIfSingletonFactory(const boost::shared_ptr<PassengerServiceIf>& iface) : iface_(iface) {}
  virtual ~PassengerServiceIfSingletonFactory() {}

  virtual PassengerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PassengerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PassengerServiceIf> iface_;
};

class PassengerServiceNull : virtual public PassengerServiceIf {
 public:
  virtual ~PassengerServiceNull() {}
  void getDocument(Document& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void getOrg(Org& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void loginDriver(Driver& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */) {
    return;
  }
  void loginPassenger(Passenger& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */) {
    return;
  }
  void findDictEntry(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DictEntry& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findDictTag(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DictTag::type /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findBank(Banks& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Bank& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findBankByName(Banks& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findOrgService(OrgServices& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const OrgService& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findVehicle(Vehicles& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Vehicle& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findVehicleid(Vehicleids& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Vehicle& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void addCity(City& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const City& /* value */) {
    return;
  }
  void addDictEntry(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DictEntry& /* value */) {
    return;
  }
  void addBank(Bank& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Bank& /* value */) {
    return;
  }
  void addOrg(Org& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Org& /* value */) {
    return;
  }
  void addOrgService(OrgService& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const OrgService& /* value */) {
    return;
  }
  void addCustomer(Customer& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Customer& /* value */) {
    return;
  }
  void addPassenger(Passenger& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Passenger& /* value */) {
    return;
  }
  void addDriver(Driver& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Driver& /* value */) {
    return;
  }
  void addVehicleColor(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const NUMBER32 /* value */) {
    return;
  }
  void addVehicleBrand(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const VehicleCategory::type /* category */, const STR& /* name */) {
    return;
  }
  void addVehicleModel(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* brandid */, const STR& /* name */, const NUMBER32 /* year */) {
    return;
  }
  void addVehicleModelByBrandName(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* brandname */, const STR& /* name */, const NUMBER32 /* year */) {
    return;
  }
  void addRate(Rate& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Rate& /* value */) {
    return;
  }
  void addServiceOrder(ServiceOrder& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrder& /* value */) {
    return;
  }
  void addServiceOrderDecline(ServiceOrderDecline& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrderDecline& /* value */) {
    return;
  }
  void addClaim(Claim& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Claim& /* value */) {
    return;
  }
  ID addTrack(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Track& /* value */) {
    ID _return = 0;
    return _return;
  }
  void rmRate(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmServiceOrder(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmServiceOrderDecline(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmClaim(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmTrack(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void findOrg(Orgs& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Org& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findOrgByName(Orgs& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findColor(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findBrand(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findModel(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* brandid */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findModelByBrandName(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* brandname */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findCity(Cities& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findDriver(Drivers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Driver& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findCustomer(Customers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Customer& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findPassenger(Passengers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Passenger& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findRate(Rates& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Rate& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findServiceOrder(ServiceOrders& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrder& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void findServiceOrderDecline(ServiceOrderDeclines& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrderDecline& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void findClaim(Claims& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Claim& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void findTrack(Tracks& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Track& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
};

typedef struct _PassengerService_getDocument_args__isset {
  _PassengerService_getDocument_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getDocument_args__isset;

class PassengerService_getDocument_args {
 public:

  PassengerService_getDocument_args() : id(0) {
  }

  virtual ~PassengerService_getDocument_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getDocument_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getDocument_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDocument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDocument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDocument_pargs {
 public:


  virtual ~PassengerService_getDocument_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDocument_result__isset {
  _PassengerService_getDocument_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDocument_result__isset;

class PassengerService_getDocument_result {
 public:

  PassengerService_getDocument_result() {
  }

  virtual ~PassengerService_getDocument_result() throw() {}

  Document success;
  ServiceFailure servicefailure;

  _PassengerService_getDocument_result__isset __isset;

  void __set_success(const Document& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDocument_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDocument_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDocument_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDocument_presult__isset {
  _PassengerService_getDocument_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDocument_presult__isset;

class PassengerService_getDocument_presult {
 public:


  virtual ~PassengerService_getDocument_presult() throw() {}

  Document* success;
  ServiceFailure servicefailure;

  _PassengerService_getDocument_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getOrg_args__isset {
  _PassengerService_getOrg_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getOrg_args__isset;

class PassengerService_getOrg_args {
 public:

  PassengerService_getOrg_args() : id(0) {
  }

  virtual ~PassengerService_getOrg_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getOrg_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getOrg_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getOrg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getOrg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getOrg_pargs {
 public:


  virtual ~PassengerService_getOrg_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getOrg_result__isset {
  _PassengerService_getOrg_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getOrg_result__isset;

class PassengerService_getOrg_result {
 public:

  PassengerService_getOrg_result() {
  }

  virtual ~PassengerService_getOrg_result() throw() {}

  Org success;
  ServiceFailure servicefailure;

  _PassengerService_getOrg_result__isset __isset;

  void __set_success(const Org& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getOrg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getOrg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getOrg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getOrg_presult__isset {
  _PassengerService_getOrg_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getOrg_presult__isset;

class PassengerService_getOrg_presult {
 public:


  virtual ~PassengerService_getOrg_presult() throw() {}

  Org* success;
  ServiceFailure servicefailure;

  _PassengerService_getOrg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_loginDriver_args__isset {
  _PassengerService_loginDriver_args__isset() : credentials(false), userdevice(false) {}
  bool credentials;
  bool userdevice;
} _PassengerService_loginDriver_args__isset;

class PassengerService_loginDriver_args {
 public:

  PassengerService_loginDriver_args() {
  }

  virtual ~PassengerService_loginDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;

  _PassengerService_loginDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  bool operator == (const PassengerService_loginDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_loginDriver_pargs {
 public:


  virtual ~PassengerService_loginDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginDriver_result__isset {
  _PassengerService_loginDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginDriver_result__isset;

class PassengerService_loginDriver_result {
 public:

  PassengerService_loginDriver_result() {
  }

  virtual ~PassengerService_loginDriver_result() throw() {}

  Driver success;
  ServiceFailure servicefailure;

  _PassengerService_loginDriver_result__isset __isset;

  void __set_success(const Driver& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_loginDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginDriver_presult__isset {
  _PassengerService_loginDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginDriver_presult__isset;

class PassengerService_loginDriver_presult {
 public:


  virtual ~PassengerService_loginDriver_presult() throw() {}

  Driver* success;
  ServiceFailure servicefailure;

  _PassengerService_loginDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_loginPassenger_args__isset {
  _PassengerService_loginPassenger_args__isset() : credentials(false), userdevice(false) {}
  bool credentials;
  bool userdevice;
} _PassengerService_loginPassenger_args__isset;

class PassengerService_loginPassenger_args {
 public:

  PassengerService_loginPassenger_args() {
  }

  virtual ~PassengerService_loginPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;

  _PassengerService_loginPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  bool operator == (const PassengerService_loginPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_loginPassenger_pargs {
 public:


  virtual ~PassengerService_loginPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginPassenger_result__isset {
  _PassengerService_loginPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginPassenger_result__isset;

class PassengerService_loginPassenger_result {
 public:

  PassengerService_loginPassenger_result() {
  }

  virtual ~PassengerService_loginPassenger_result() throw() {}

  Passenger success;
  ServiceFailure servicefailure;

  _PassengerService_loginPassenger_result__isset __isset;

  void __set_success(const Passenger& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_loginPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginPassenger_presult__isset {
  _PassengerService_loginPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginPassenger_presult__isset;

class PassengerService_loginPassenger_presult {
 public:


  virtual ~PassengerService_loginPassenger_presult() throw() {}

  Passenger* success;
  ServiceFailure servicefailure;

  _PassengerService_loginPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDictEntry_args__isset {
  _PassengerService_findDictEntry_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDictEntry_args__isset;

class PassengerService_findDictEntry_args {
 public:

  PassengerService_findDictEntry_args() {
  }

  virtual ~PassengerService_findDictEntry_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DictEntry search;
  RowRange rowrange;

  _PassengerService_findDictEntry_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const DictEntry& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDictEntry_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictEntry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictEntry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDictEntry_pargs {
 public:


  virtual ~PassengerService_findDictEntry_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DictEntry* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictEntry_result__isset {
  _PassengerService_findDictEntry_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictEntry_result__isset;

class PassengerService_findDictEntry_result {
 public:

  PassengerService_findDictEntry_result() {
  }

  virtual ~PassengerService_findDictEntry_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findDictEntry_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDictEntry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictEntry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictEntry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictEntry_presult__isset {
  _PassengerService_findDictEntry_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictEntry_presult__isset;

class PassengerService_findDictEntry_presult {
 public:


  virtual ~PassengerService_findDictEntry_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findDictEntry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDictTag_args__isset {
  _PassengerService_findDictTag_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDictTag_args__isset;

class PassengerService_findDictTag_args {
 public:

  PassengerService_findDictTag_args() : search((DictTag::type)0) {
  }

  virtual ~PassengerService_findDictTag_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DictTag::type search;
  RowRange rowrange;

  _PassengerService_findDictTag_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const DictTag::type val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDictTag_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDictTag_pargs {
 public:


  virtual ~PassengerService_findDictTag_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DictTag::type* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictTag_result__isset {
  _PassengerService_findDictTag_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictTag_result__isset;

class PassengerService_findDictTag_result {
 public:

  PassengerService_findDictTag_result() {
  }

  virtual ~PassengerService_findDictTag_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findDictTag_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDictTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictTag_presult__isset {
  _PassengerService_findDictTag_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictTag_presult__isset;

class PassengerService_findDictTag_presult {
 public:


  virtual ~PassengerService_findDictTag_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findDictTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBank_args__isset {
  _PassengerService_findBank_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findBank_args__isset;

class PassengerService_findBank_args {
 public:

  PassengerService_findBank_args() {
  }

  virtual ~PassengerService_findBank_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Bank search;
  RowRange rowrange;

  _PassengerService_findBank_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Bank& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBank_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBank_pargs {
 public:


  virtual ~PassengerService_findBank_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Bank* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBank_result__isset {
  _PassengerService_findBank_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBank_result__isset;

class PassengerService_findBank_result {
 public:

  PassengerService_findBank_result() {
  }

  virtual ~PassengerService_findBank_result() throw() {}

  Banks success;
  ServiceFailure servicefailure;

  _PassengerService_findBank_result__isset __isset;

  void __set_success(const Banks& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBank_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBank_presult__isset {
  _PassengerService_findBank_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBank_presult__isset;

class PassengerService_findBank_presult {
 public:


  virtual ~PassengerService_findBank_presult() throw() {}

  Banks* success;
  ServiceFailure servicefailure;

  _PassengerService_findBank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBankByName_args__isset {
  _PassengerService_findBankByName_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findBankByName_args__isset;

class PassengerService_findBankByName_args {
 public:

  PassengerService_findBankByName_args() : name() {
  }

  virtual ~PassengerService_findBankByName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findBankByName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBankByName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBankByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBankByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBankByName_pargs {
 public:


  virtual ~PassengerService_findBankByName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBankByName_result__isset {
  _PassengerService_findBankByName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBankByName_result__isset;

class PassengerService_findBankByName_result {
 public:

  PassengerService_findBankByName_result() {
  }

  virtual ~PassengerService_findBankByName_result() throw() {}

  Banks success;
  ServiceFailure servicefailure;

  _PassengerService_findBankByName_result__isset __isset;

  void __set_success(const Banks& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBankByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBankByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBankByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBankByName_presult__isset {
  _PassengerService_findBankByName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBankByName_presult__isset;

class PassengerService_findBankByName_presult {
 public:


  virtual ~PassengerService_findBankByName_presult() throw() {}

  Banks* success;
  ServiceFailure servicefailure;

  _PassengerService_findBankByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findOrgService_args__isset {
  _PassengerService_findOrgService_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findOrgService_args__isset;

class PassengerService_findOrgService_args {
 public:

  PassengerService_findOrgService_args() {
  }

  virtual ~PassengerService_findOrgService_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  OrgService search;
  RowRange rowrange;

  _PassengerService_findOrgService_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const OrgService& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findOrgService_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findOrgService_pargs {
 public:


  virtual ~PassengerService_findOrgService_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const OrgService* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgService_result__isset {
  _PassengerService_findOrgService_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgService_result__isset;

class PassengerService_findOrgService_result {
 public:

  PassengerService_findOrgService_result() {
  }

  virtual ~PassengerService_findOrgService_result() throw() {}

  OrgServices success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgService_result__isset __isset;

  void __set_success(const OrgServices& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findOrgService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgService_presult__isset {
  _PassengerService_findOrgService_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgService_presult__isset;

class PassengerService_findOrgService_presult {
 public:


  virtual ~PassengerService_findOrgService_presult() throw() {}

  OrgServices* success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findVehicle_args__isset {
  _PassengerService_findVehicle_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findVehicle_args__isset;

class PassengerService_findVehicle_args {
 public:

  PassengerService_findVehicle_args() {
  }

  virtual ~PassengerService_findVehicle_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Vehicle search;
  RowRange rowrange;

  _PassengerService_findVehicle_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Vehicle& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findVehicle_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findVehicle_pargs {
 public:


  virtual ~PassengerService_findVehicle_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Vehicle* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicle_result__isset {
  _PassengerService_findVehicle_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicle_result__isset;

class PassengerService_findVehicle_result {
 public:

  PassengerService_findVehicle_result() {
  }

  virtual ~PassengerService_findVehicle_result() throw() {}

  Vehicles success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicle_result__isset __isset;

  void __set_success(const Vehicles& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findVehicle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicle_presult__isset {
  _PassengerService_findVehicle_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicle_presult__isset;

class PassengerService_findVehicle_presult {
 public:


  virtual ~PassengerService_findVehicle_presult() throw() {}

  Vehicles* success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findVehicleid_args__isset {
  _PassengerService_findVehicleid_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findVehicleid_args__isset;

class PassengerService_findVehicleid_args {
 public:

  PassengerService_findVehicleid_args() {
  }

  virtual ~PassengerService_findVehicleid_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Vehicle search;
  RowRange rowrange;

  _PassengerService_findVehicleid_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Vehicle& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findVehicleid_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicleid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicleid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findVehicleid_pargs {
 public:


  virtual ~PassengerService_findVehicleid_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Vehicle* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicleid_result__isset {
  _PassengerService_findVehicleid_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicleid_result__isset;

class PassengerService_findVehicleid_result {
 public:

  PassengerService_findVehicleid_result() {
  }

  virtual ~PassengerService_findVehicleid_result() throw() {}

  Vehicleids success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicleid_result__isset __isset;

  void __set_success(const Vehicleids& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findVehicleid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicleid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicleid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicleid_presult__isset {
  _PassengerService_findVehicleid_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicleid_presult__isset;

class PassengerService_findVehicleid_presult {
 public:


  virtual ~PassengerService_findVehicleid_presult() throw() {}

  Vehicleids* success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicleid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addCity_args__isset {
  _PassengerService_addCity_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addCity_args__isset;

class PassengerService_addCity_args {
 public:

  PassengerService_addCity_args() {
  }

  virtual ~PassengerService_addCity_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  City value;

  _PassengerService_addCity_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const City& val) {
    value = val;
  }

  bool operator == (const PassengerService_addCity_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addCity_pargs {
 public:


  virtual ~PassengerService_addCity_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const City* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCity_result__isset {
  _PassengerService_addCity_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCity_result__isset;

class PassengerService_addCity_result {
 public:

  PassengerService_addCity_result() {
  }

  virtual ~PassengerService_addCity_result() throw() {}

  City success;
  ServiceFailure servicefailure;

  _PassengerService_addCity_result__isset __isset;

  void __set_success(const City& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addCity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCity_presult__isset {
  _PassengerService_addCity_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCity_presult__isset;

class PassengerService_addCity_presult {
 public:


  virtual ~PassengerService_addCity_presult() throw() {}

  City* success;
  ServiceFailure servicefailure;

  _PassengerService_addCity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addDictEntry_args__isset {
  _PassengerService_addDictEntry_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addDictEntry_args__isset;

class PassengerService_addDictEntry_args {
 public:

  PassengerService_addDictEntry_args() {
  }

  virtual ~PassengerService_addDictEntry_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DictEntry value;

  _PassengerService_addDictEntry_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const DictEntry& val) {
    value = val;
  }

  bool operator == (const PassengerService_addDictEntry_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDictEntry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDictEntry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addDictEntry_pargs {
 public:


  virtual ~PassengerService_addDictEntry_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DictEntry* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDictEntry_result__isset {
  _PassengerService_addDictEntry_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDictEntry_result__isset;

class PassengerService_addDictEntry_result {
 public:

  PassengerService_addDictEntry_result() {
  }

  virtual ~PassengerService_addDictEntry_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addDictEntry_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addDictEntry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDictEntry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDictEntry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDictEntry_presult__isset {
  _PassengerService_addDictEntry_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDictEntry_presult__isset;

class PassengerService_addDictEntry_presult {
 public:


  virtual ~PassengerService_addDictEntry_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addDictEntry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addBank_args__isset {
  _PassengerService_addBank_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addBank_args__isset;

class PassengerService_addBank_args {
 public:

  PassengerService_addBank_args() {
  }

  virtual ~PassengerService_addBank_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Bank value;

  _PassengerService_addBank_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Bank& val) {
    value = val;
  }

  bool operator == (const PassengerService_addBank_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addBank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addBank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addBank_pargs {
 public:


  virtual ~PassengerService_addBank_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Bank* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addBank_result__isset {
  _PassengerService_addBank_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addBank_result__isset;

class PassengerService_addBank_result {
 public:

  PassengerService_addBank_result() {
  }

  virtual ~PassengerService_addBank_result() throw() {}

  Bank success;
  ServiceFailure servicefailure;

  _PassengerService_addBank_result__isset __isset;

  void __set_success(const Bank& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addBank_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addBank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addBank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addBank_presult__isset {
  _PassengerService_addBank_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addBank_presult__isset;

class PassengerService_addBank_presult {
 public:


  virtual ~PassengerService_addBank_presult() throw() {}

  Bank* success;
  ServiceFailure servicefailure;

  _PassengerService_addBank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addOrg_args__isset {
  _PassengerService_addOrg_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addOrg_args__isset;

class PassengerService_addOrg_args {
 public:

  PassengerService_addOrg_args() {
  }

  virtual ~PassengerService_addOrg_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Org value;

  _PassengerService_addOrg_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Org& val) {
    value = val;
  }

  bool operator == (const PassengerService_addOrg_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addOrg_pargs {
 public:


  virtual ~PassengerService_addOrg_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Org* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrg_result__isset {
  _PassengerService_addOrg_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrg_result__isset;

class PassengerService_addOrg_result {
 public:

  PassengerService_addOrg_result() {
  }

  virtual ~PassengerService_addOrg_result() throw() {}

  Org success;
  ServiceFailure servicefailure;

  _PassengerService_addOrg_result__isset __isset;

  void __set_success(const Org& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addOrg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrg_presult__isset {
  _PassengerService_addOrg_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrg_presult__isset;

class PassengerService_addOrg_presult {
 public:


  virtual ~PassengerService_addOrg_presult() throw() {}

  Org* success;
  ServiceFailure servicefailure;

  _PassengerService_addOrg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addOrgService_args__isset {
  _PassengerService_addOrgService_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addOrgService_args__isset;

class PassengerService_addOrgService_args {
 public:

  PassengerService_addOrgService_args() {
  }

  virtual ~PassengerService_addOrgService_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  OrgService value;

  _PassengerService_addOrgService_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const OrgService& val) {
    value = val;
  }

  bool operator == (const PassengerService_addOrgService_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrgService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrgService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addOrgService_pargs {
 public:


  virtual ~PassengerService_addOrgService_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const OrgService* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrgService_result__isset {
  _PassengerService_addOrgService_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrgService_result__isset;

class PassengerService_addOrgService_result {
 public:

  PassengerService_addOrgService_result() {
  }

  virtual ~PassengerService_addOrgService_result() throw() {}

  OrgService success;
  ServiceFailure servicefailure;

  _PassengerService_addOrgService_result__isset __isset;

  void __set_success(const OrgService& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addOrgService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrgService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrgService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrgService_presult__isset {
  _PassengerService_addOrgService_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrgService_presult__isset;

class PassengerService_addOrgService_presult {
 public:


  virtual ~PassengerService_addOrgService_presult() throw() {}

  OrgService* success;
  ServiceFailure servicefailure;

  _PassengerService_addOrgService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addCustomer_args__isset {
  _PassengerService_addCustomer_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addCustomer_args__isset;

class PassengerService_addCustomer_args {
 public:

  PassengerService_addCustomer_args() {
  }

  virtual ~PassengerService_addCustomer_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Customer value;

  _PassengerService_addCustomer_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Customer& val) {
    value = val;
  }

  bool operator == (const PassengerService_addCustomer_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCustomer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCustomer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addCustomer_pargs {
 public:


  virtual ~PassengerService_addCustomer_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Customer* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCustomer_result__isset {
  _PassengerService_addCustomer_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCustomer_result__isset;

class PassengerService_addCustomer_result {
 public:

  PassengerService_addCustomer_result() {
  }

  virtual ~PassengerService_addCustomer_result() throw() {}

  Customer success;
  ServiceFailure servicefailure;

  _PassengerService_addCustomer_result__isset __isset;

  void __set_success(const Customer& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addCustomer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCustomer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCustomer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCustomer_presult__isset {
  _PassengerService_addCustomer_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCustomer_presult__isset;

class PassengerService_addCustomer_presult {
 public:


  virtual ~PassengerService_addCustomer_presult() throw() {}

  Customer* success;
  ServiceFailure servicefailure;

  _PassengerService_addCustomer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addPassenger_args__isset {
  _PassengerService_addPassenger_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addPassenger_args__isset;

class PassengerService_addPassenger_args {
 public:

  PassengerService_addPassenger_args() {
  }

  virtual ~PassengerService_addPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Passenger value;

  _PassengerService_addPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Passenger& val) {
    value = val;
  }

  bool operator == (const PassengerService_addPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addPassenger_pargs {
 public:


  virtual ~PassengerService_addPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Passenger* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addPassenger_result__isset {
  _PassengerService_addPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addPassenger_result__isset;

class PassengerService_addPassenger_result {
 public:

  PassengerService_addPassenger_result() {
  }

  virtual ~PassengerService_addPassenger_result() throw() {}

  Passenger success;
  ServiceFailure servicefailure;

  _PassengerService_addPassenger_result__isset __isset;

  void __set_success(const Passenger& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addPassenger_presult__isset {
  _PassengerService_addPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addPassenger_presult__isset;

class PassengerService_addPassenger_presult {
 public:


  virtual ~PassengerService_addPassenger_presult() throw() {}

  Passenger* success;
  ServiceFailure servicefailure;

  _PassengerService_addPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addDriver_args__isset {
  _PassengerService_addDriver_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addDriver_args__isset;

class PassengerService_addDriver_args {
 public:

  PassengerService_addDriver_args() {
  }

  virtual ~PassengerService_addDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Driver value;

  _PassengerService_addDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Driver& val) {
    value = val;
  }

  bool operator == (const PassengerService_addDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addDriver_pargs {
 public:


  virtual ~PassengerService_addDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Driver* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDriver_result__isset {
  _PassengerService_addDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDriver_result__isset;

class PassengerService_addDriver_result {
 public:

  PassengerService_addDriver_result() {
  }

  virtual ~PassengerService_addDriver_result() throw() {}

  Driver success;
  ServiceFailure servicefailure;

  _PassengerService_addDriver_result__isset __isset;

  void __set_success(const Driver& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDriver_presult__isset {
  _PassengerService_addDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDriver_presult__isset;

class PassengerService_addDriver_presult {
 public:


  virtual ~PassengerService_addDriver_presult() throw() {}

  Driver* success;
  ServiceFailure servicefailure;

  _PassengerService_addDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleColor_args__isset {
  _PassengerService_addVehicleColor_args__isset() : credentials(false), userdevice(false), name(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool value;
} _PassengerService_addVehicleColor_args__isset;

class PassengerService_addVehicleColor_args {
 public:

  PassengerService_addVehicleColor_args() : name(), value(0) {
  }

  virtual ~PassengerService_addVehicleColor_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  NUMBER32 value;

  _PassengerService_addVehicleColor_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_value(const NUMBER32 val) {
    value = val;
  }

  bool operator == (const PassengerService_addVehicleColor_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleColor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleColor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleColor_pargs {
 public:


  virtual ~PassengerService_addVehicleColor_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const NUMBER32* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleColor_result__isset {
  _PassengerService_addVehicleColor_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleColor_result__isset;

class PassengerService_addVehicleColor_result {
 public:

  PassengerService_addVehicleColor_result() {
  }

  virtual ~PassengerService_addVehicleColor_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleColor_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleColor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleColor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleColor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleColor_presult__isset {
  _PassengerService_addVehicleColor_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleColor_presult__isset;

class PassengerService_addVehicleColor_presult {
 public:


  virtual ~PassengerService_addVehicleColor_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleColor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleBrand_args__isset {
  _PassengerService_addVehicleBrand_args__isset() : credentials(false), userdevice(false), category(false), name(false) {}
  bool credentials;
  bool userdevice;
  bool category;
  bool name;
} _PassengerService_addVehicleBrand_args__isset;

class PassengerService_addVehicleBrand_args {
 public:

  PassengerService_addVehicleBrand_args() : category((VehicleCategory::type)0), name() {
  }

  virtual ~PassengerService_addVehicleBrand_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  VehicleCategory::type category;
  STR name;

  _PassengerService_addVehicleBrand_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_category(const VehicleCategory::type val) {
    category = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  bool operator == (const PassengerService_addVehicleBrand_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleBrand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleBrand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleBrand_pargs {
 public:


  virtual ~PassengerService_addVehicleBrand_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const VehicleCategory::type* category;
  const STR* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleBrand_result__isset {
  _PassengerService_addVehicleBrand_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleBrand_result__isset;

class PassengerService_addVehicleBrand_result {
 public:

  PassengerService_addVehicleBrand_result() {
  }

  virtual ~PassengerService_addVehicleBrand_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleBrand_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleBrand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleBrand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleBrand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleBrand_presult__isset {
  _PassengerService_addVehicleBrand_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleBrand_presult__isset;

class PassengerService_addVehicleBrand_presult {
 public:


  virtual ~PassengerService_addVehicleBrand_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleBrand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleModel_args__isset {
  _PassengerService_addVehicleModel_args__isset() : credentials(false), userdevice(false), brandid(false), name(false), year(false) {}
  bool credentials;
  bool userdevice;
  bool brandid;
  bool name;
  bool year;
} _PassengerService_addVehicleModel_args__isset;

class PassengerService_addVehicleModel_args {
 public:

  PassengerService_addVehicleModel_args() : brandid(0), name(), year(0) {
  }

  virtual ~PassengerService_addVehicleModel_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID brandid;
  STR name;
  NUMBER32 year;

  _PassengerService_addVehicleModel_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandid(const ID val) {
    brandid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_year(const NUMBER32 val) {
    year = val;
  }

  bool operator == (const PassengerService_addVehicleModel_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandid == rhs.brandid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(year == rhs.year))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleModel_pargs {
 public:


  virtual ~PassengerService_addVehicleModel_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* brandid;
  const STR* name;
  const NUMBER32* year;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModel_result__isset {
  _PassengerService_addVehicleModel_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModel_result__isset;

class PassengerService_addVehicleModel_result {
 public:

  PassengerService_addVehicleModel_result() {
  }

  virtual ~PassengerService_addVehicleModel_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModel_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModel_presult__isset {
  _PassengerService_addVehicleModel_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModel_presult__isset;

class PassengerService_addVehicleModel_presult {
 public:


  virtual ~PassengerService_addVehicleModel_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleModelByBrandName_args__isset {
  _PassengerService_addVehicleModelByBrandName_args__isset() : credentials(false), userdevice(false), brandname(false), name(false), year(false) {}
  bool credentials;
  bool userdevice;
  bool brandname;
  bool name;
  bool year;
} _PassengerService_addVehicleModelByBrandName_args__isset;

class PassengerService_addVehicleModelByBrandName_args {
 public:

  PassengerService_addVehicleModelByBrandName_args() : brandname(), name(), year(0) {
  }

  virtual ~PassengerService_addVehicleModelByBrandName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR brandname;
  STR name;
  NUMBER32 year;

  _PassengerService_addVehicleModelByBrandName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandname(const STR& val) {
    brandname = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_year(const NUMBER32 val) {
    year = val;
  }

  bool operator == (const PassengerService_addVehicleModelByBrandName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandname == rhs.brandname))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(year == rhs.year))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModelByBrandName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModelByBrandName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleModelByBrandName_pargs {
 public:


  virtual ~PassengerService_addVehicleModelByBrandName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* brandname;
  const STR* name;
  const NUMBER32* year;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModelByBrandName_result__isset {
  _PassengerService_addVehicleModelByBrandName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModelByBrandName_result__isset;

class PassengerService_addVehicleModelByBrandName_result {
 public:

  PassengerService_addVehicleModelByBrandName_result() {
  }

  virtual ~PassengerService_addVehicleModelByBrandName_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModelByBrandName_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleModelByBrandName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModelByBrandName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModelByBrandName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModelByBrandName_presult__isset {
  _PassengerService_addVehicleModelByBrandName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModelByBrandName_presult__isset;

class PassengerService_addVehicleModelByBrandName_presult {
 public:


  virtual ~PassengerService_addVehicleModelByBrandName_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModelByBrandName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addRate_args__isset {
  _PassengerService_addRate_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addRate_args__isset;

class PassengerService_addRate_args {
 public:

  PassengerService_addRate_args() {
  }

  virtual ~PassengerService_addRate_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Rate value;

  _PassengerService_addRate_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Rate& val) {
    value = val;
  }

  bool operator == (const PassengerService_addRate_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addRate_pargs {
 public:


  virtual ~PassengerService_addRate_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Rate* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addRate_result__isset {
  _PassengerService_addRate_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addRate_result__isset;

class PassengerService_addRate_result {
 public:

  PassengerService_addRate_result() {
  }

  virtual ~PassengerService_addRate_result() throw() {}

  Rate success;
  ServiceFailure servicefailure;

  _PassengerService_addRate_result__isset __isset;

  void __set_success(const Rate& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addRate_presult__isset {
  _PassengerService_addRate_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addRate_presult__isset;

class PassengerService_addRate_presult {
 public:


  virtual ~PassengerService_addRate_presult() throw() {}

  Rate* success;
  ServiceFailure servicefailure;

  _PassengerService_addRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addServiceOrder_args__isset {
  _PassengerService_addServiceOrder_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addServiceOrder_args__isset;

class PassengerService_addServiceOrder_args {
 public:

  PassengerService_addServiceOrder_args() {
  }

  virtual ~PassengerService_addServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrder value;

  _PassengerService_addServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const ServiceOrder& val) {
    value = val;
  }

  bool operator == (const PassengerService_addServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addServiceOrder_pargs {
 public:


  virtual ~PassengerService_addServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrder* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrder_result__isset {
  _PassengerService_addServiceOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrder_result__isset;

class PassengerService_addServiceOrder_result {
 public:

  PassengerService_addServiceOrder_result() {
  }

  virtual ~PassengerService_addServiceOrder_result() throw() {}

  ServiceOrder success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrder_result__isset __isset;

  void __set_success(const ServiceOrder& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addServiceOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrder_presult__isset {
  _PassengerService_addServiceOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrder_presult__isset;

class PassengerService_addServiceOrder_presult {
 public:


  virtual ~PassengerService_addServiceOrder_presult() throw() {}

  ServiceOrder* success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addServiceOrderDecline_args__isset {
  _PassengerService_addServiceOrderDecline_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addServiceOrderDecline_args__isset;

class PassengerService_addServiceOrderDecline_args {
 public:

  PassengerService_addServiceOrderDecline_args() {
  }

  virtual ~PassengerService_addServiceOrderDecline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrderDecline value;

  _PassengerService_addServiceOrderDecline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const ServiceOrderDecline& val) {
    value = val;
  }

  bool operator == (const PassengerService_addServiceOrderDecline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrderDecline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrderDecline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addServiceOrderDecline_pargs {
 public:


  virtual ~PassengerService_addServiceOrderDecline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrderDecline* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrderDecline_result__isset {
  _PassengerService_addServiceOrderDecline_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrderDecline_result__isset;

class PassengerService_addServiceOrderDecline_result {
 public:

  PassengerService_addServiceOrderDecline_result() {
  }

  virtual ~PassengerService_addServiceOrderDecline_result() throw() {}

  ServiceOrderDecline success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrderDecline_result__isset __isset;

  void __set_success(const ServiceOrderDecline& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addServiceOrderDecline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrderDecline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrderDecline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrderDecline_presult__isset {
  _PassengerService_addServiceOrderDecline_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrderDecline_presult__isset;

class PassengerService_addServiceOrderDecline_presult {
 public:


  virtual ~PassengerService_addServiceOrderDecline_presult() throw() {}

  ServiceOrderDecline* success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrderDecline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addClaim_args__isset {
  _PassengerService_addClaim_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addClaim_args__isset;

class PassengerService_addClaim_args {
 public:

  PassengerService_addClaim_args() {
  }

  virtual ~PassengerService_addClaim_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Claim value;

  _PassengerService_addClaim_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Claim& val) {
    value = val;
  }

  bool operator == (const PassengerService_addClaim_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addClaim_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addClaim_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addClaim_pargs {
 public:


  virtual ~PassengerService_addClaim_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Claim* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addClaim_result__isset {
  _PassengerService_addClaim_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addClaim_result__isset;

class PassengerService_addClaim_result {
 public:

  PassengerService_addClaim_result() {
  }

  virtual ~PassengerService_addClaim_result() throw() {}

  Claim success;
  ServiceFailure servicefailure;

  _PassengerService_addClaim_result__isset __isset;

  void __set_success(const Claim& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addClaim_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addClaim_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addClaim_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addClaim_presult__isset {
  _PassengerService_addClaim_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addClaim_presult__isset;

class PassengerService_addClaim_presult {
 public:


  virtual ~PassengerService_addClaim_presult() throw() {}

  Claim* success;
  ServiceFailure servicefailure;

  _PassengerService_addClaim_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addTrack_args__isset {
  _PassengerService_addTrack_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addTrack_args__isset;

class PassengerService_addTrack_args {
 public:

  PassengerService_addTrack_args() {
  }

  virtual ~PassengerService_addTrack_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Track value;

  _PassengerService_addTrack_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Track& val) {
    value = val;
  }

  bool operator == (const PassengerService_addTrack_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addTrack_pargs {
 public:


  virtual ~PassengerService_addTrack_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Track* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addTrack_result__isset {
  _PassengerService_addTrack_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addTrack_result__isset;

class PassengerService_addTrack_result {
 public:

  PassengerService_addTrack_result() : success(0) {
  }

  virtual ~PassengerService_addTrack_result() throw() {}

  ID success;
  ServiceFailure servicefailure;

  _PassengerService_addTrack_result__isset __isset;

  void __set_success(const ID val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addTrack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addTrack_presult__isset {
  _PassengerService_addTrack_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addTrack_presult__isset;

class PassengerService_addTrack_presult {
 public:


  virtual ~PassengerService_addTrack_presult() throw() {}

  ID* success;
  ServiceFailure servicefailure;

  _PassengerService_addTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmRate_args__isset {
  _PassengerService_rmRate_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmRate_args__isset;

class PassengerService_rmRate_args {
 public:

  PassengerService_rmRate_args() : id(0) {
  }

  virtual ~PassengerService_rmRate_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmRate_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmRate_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmRate_pargs {
 public:


  virtual ~PassengerService_rmRate_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmRate_result__isset {
  _PassengerService_rmRate_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmRate_result__isset;

class PassengerService_rmRate_result {
 public:

  PassengerService_rmRate_result() {
  }

  virtual ~PassengerService_rmRate_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmRate_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmRate_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmRate_presult__isset {
  _PassengerService_rmRate_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmRate_presult__isset;

class PassengerService_rmRate_presult {
 public:


  virtual ~PassengerService_rmRate_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmServiceOrder_args__isset {
  _PassengerService_rmServiceOrder_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmServiceOrder_args__isset;

class PassengerService_rmServiceOrder_args {
 public:

  PassengerService_rmServiceOrder_args() : id(0) {
  }

  virtual ~PassengerService_rmServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmServiceOrder_pargs {
 public:


  virtual ~PassengerService_rmServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrder_result__isset {
  _PassengerService_rmServiceOrder_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrder_result__isset;

class PassengerService_rmServiceOrder_result {
 public:

  PassengerService_rmServiceOrder_result() {
  }

  virtual ~PassengerService_rmServiceOrder_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrder_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmServiceOrder_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrder_presult__isset {
  _PassengerService_rmServiceOrder_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrder_presult__isset;

class PassengerService_rmServiceOrder_presult {
 public:


  virtual ~PassengerService_rmServiceOrder_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmServiceOrderDecline_args__isset {
  _PassengerService_rmServiceOrderDecline_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmServiceOrderDecline_args__isset;

class PassengerService_rmServiceOrderDecline_args {
 public:

  PassengerService_rmServiceOrderDecline_args() : id(0) {
  }

  virtual ~PassengerService_rmServiceOrderDecline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmServiceOrderDecline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmServiceOrderDecline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrderDecline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrderDecline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmServiceOrderDecline_pargs {
 public:


  virtual ~PassengerService_rmServiceOrderDecline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrderDecline_result__isset {
  _PassengerService_rmServiceOrderDecline_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrderDecline_result__isset;

class PassengerService_rmServiceOrderDecline_result {
 public:

  PassengerService_rmServiceOrderDecline_result() {
  }

  virtual ~PassengerService_rmServiceOrderDecline_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrderDecline_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmServiceOrderDecline_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrderDecline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrderDecline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrderDecline_presult__isset {
  _PassengerService_rmServiceOrderDecline_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrderDecline_presult__isset;

class PassengerService_rmServiceOrderDecline_presult {
 public:


  virtual ~PassengerService_rmServiceOrderDecline_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrderDecline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmClaim_args__isset {
  _PassengerService_rmClaim_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmClaim_args__isset;

class PassengerService_rmClaim_args {
 public:

  PassengerService_rmClaim_args() : id(0) {
  }

  virtual ~PassengerService_rmClaim_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmClaim_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmClaim_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmClaim_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmClaim_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmClaim_pargs {
 public:


  virtual ~PassengerService_rmClaim_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmClaim_result__isset {
  _PassengerService_rmClaim_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmClaim_result__isset;

class PassengerService_rmClaim_result {
 public:

  PassengerService_rmClaim_result() {
  }

  virtual ~PassengerService_rmClaim_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmClaim_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmClaim_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmClaim_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmClaim_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmClaim_presult__isset {
  _PassengerService_rmClaim_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmClaim_presult__isset;

class PassengerService_rmClaim_presult {
 public:


  virtual ~PassengerService_rmClaim_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmClaim_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmTrack_args__isset {
  _PassengerService_rmTrack_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmTrack_args__isset;

class PassengerService_rmTrack_args {
 public:

  PassengerService_rmTrack_args() : id(0) {
  }

  virtual ~PassengerService_rmTrack_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmTrack_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmTrack_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmTrack_pargs {
 public:


  virtual ~PassengerService_rmTrack_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmTrack_result__isset {
  _PassengerService_rmTrack_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmTrack_result__isset;

class PassengerService_rmTrack_result {
 public:

  PassengerService_rmTrack_result() {
  }

  virtual ~PassengerService_rmTrack_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmTrack_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmTrack_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmTrack_presult__isset {
  _PassengerService_rmTrack_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmTrack_presult__isset;

class PassengerService_rmTrack_presult {
 public:


  virtual ~PassengerService_rmTrack_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findOrg_args__isset {
  _PassengerService_findOrg_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findOrg_args__isset;

class PassengerService_findOrg_args {
 public:

  PassengerService_findOrg_args() {
  }

  virtual ~PassengerService_findOrg_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Org search;
  RowRange rowrange;

  _PassengerService_findOrg_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Org& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findOrg_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findOrg_pargs {
 public:


  virtual ~PassengerService_findOrg_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Org* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrg_result__isset {
  _PassengerService_findOrg_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrg_result__isset;

class PassengerService_findOrg_result {
 public:

  PassengerService_findOrg_result() {
  }

  virtual ~PassengerService_findOrg_result() throw() {}

  Orgs success;
  ServiceFailure servicefailure;

  _PassengerService_findOrg_result__isset __isset;

  void __set_success(const Orgs& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findOrg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrg_presult__isset {
  _PassengerService_findOrg_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrg_presult__isset;

class PassengerService_findOrg_presult {
 public:


  virtual ~PassengerService_findOrg_presult() throw() {}

  Orgs* success;
  ServiceFailure servicefailure;

  _PassengerService_findOrg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findOrgByName_args__isset {
  _PassengerService_findOrgByName_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findOrgByName_args__isset;

class PassengerService_findOrgByName_args {
 public:

  PassengerService_findOrgByName_args() : name() {
  }

  virtual ~PassengerService_findOrgByName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findOrgByName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findOrgByName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findOrgByName_pargs {
 public:


  virtual ~PassengerService_findOrgByName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgByName_result__isset {
  _PassengerService_findOrgByName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgByName_result__isset;

class PassengerService_findOrgByName_result {
 public:

  PassengerService_findOrgByName_result() {
  }

  virtual ~PassengerService_findOrgByName_result() throw() {}

  Orgs success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgByName_result__isset __isset;

  void __set_success(const Orgs& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findOrgByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgByName_presult__isset {
  _PassengerService_findOrgByName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgByName_presult__isset;

class PassengerService_findOrgByName_presult {
 public:


  virtual ~PassengerService_findOrgByName_presult() throw() {}

  Orgs* success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findColor_args__isset {
  _PassengerService_findColor_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findColor_args__isset;

class PassengerService_findColor_args {
 public:

  PassengerService_findColor_args() : name() {
  }

  virtual ~PassengerService_findColor_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findColor_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findColor_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findColor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findColor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findColor_pargs {
 public:


  virtual ~PassengerService_findColor_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findColor_result__isset {
  _PassengerService_findColor_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findColor_result__isset;

class PassengerService_findColor_result {
 public:

  PassengerService_findColor_result() {
  }

  virtual ~PassengerService_findColor_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findColor_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findColor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findColor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findColor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findColor_presult__isset {
  _PassengerService_findColor_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findColor_presult__isset;

class PassengerService_findColor_presult {
 public:


  virtual ~PassengerService_findColor_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findColor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBrand_args__isset {
  _PassengerService_findBrand_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findBrand_args__isset;

class PassengerService_findBrand_args {
 public:

  PassengerService_findBrand_args() : name() {
  }

  virtual ~PassengerService_findBrand_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findBrand_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBrand_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBrand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBrand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBrand_pargs {
 public:


  virtual ~PassengerService_findBrand_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBrand_result__isset {
  _PassengerService_findBrand_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBrand_result__isset;

class PassengerService_findBrand_result {
 public:

  PassengerService_findBrand_result() {
  }

  virtual ~PassengerService_findBrand_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findBrand_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBrand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBrand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBrand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBrand_presult__isset {
  _PassengerService_findBrand_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBrand_presult__isset;

class PassengerService_findBrand_presult {
 public:


  virtual ~PassengerService_findBrand_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findBrand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findModel_args__isset {
  _PassengerService_findModel_args__isset() : credentials(false), userdevice(false), brandid(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool brandid;
  bool name;
  bool rowrange;
} _PassengerService_findModel_args__isset;

class PassengerService_findModel_args {
 public:

  PassengerService_findModel_args() : brandid(0), name() {
  }

  virtual ~PassengerService_findModel_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID brandid;
  STR name;
  RowRange rowrange;

  _PassengerService_findModel_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandid(const ID val) {
    brandid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findModel_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandid == rhs.brandid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findModel_pargs {
 public:


  virtual ~PassengerService_findModel_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* brandid;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModel_result__isset {
  _PassengerService_findModel_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModel_result__isset;

class PassengerService_findModel_result {
 public:

  PassengerService_findModel_result() {
  }

  virtual ~PassengerService_findModel_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findModel_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModel_presult__isset {
  _PassengerService_findModel_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModel_presult__isset;

class PassengerService_findModel_presult {
 public:


  virtual ~PassengerService_findModel_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findModelByBrandName_args__isset {
  _PassengerService_findModelByBrandName_args__isset() : credentials(false), userdevice(false), brandname(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool brandname;
  bool name;
  bool rowrange;
} _PassengerService_findModelByBrandName_args__isset;

class PassengerService_findModelByBrandName_args {
 public:

  PassengerService_findModelByBrandName_args() : brandname(), name() {
  }

  virtual ~PassengerService_findModelByBrandName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR brandname;
  STR name;
  RowRange rowrange;

  _PassengerService_findModelByBrandName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandname(const STR& val) {
    brandname = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findModelByBrandName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandname == rhs.brandname))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModelByBrandName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModelByBrandName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findModelByBrandName_pargs {
 public:


  virtual ~PassengerService_findModelByBrandName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* brandname;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModelByBrandName_result__isset {
  _PassengerService_findModelByBrandName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModelByBrandName_result__isset;

class PassengerService_findModelByBrandName_result {
 public:

  PassengerService_findModelByBrandName_result() {
  }

  virtual ~PassengerService_findModelByBrandName_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findModelByBrandName_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findModelByBrandName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModelByBrandName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModelByBrandName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModelByBrandName_presult__isset {
  _PassengerService_findModelByBrandName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModelByBrandName_presult__isset;

class PassengerService_findModelByBrandName_presult {
 public:


  virtual ~PassengerService_findModelByBrandName_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findModelByBrandName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findCity_args__isset {
  _PassengerService_findCity_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findCity_args__isset;

class PassengerService_findCity_args {
 public:

  PassengerService_findCity_args() : name() {
  }

  virtual ~PassengerService_findCity_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findCity_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findCity_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findCity_pargs {
 public:


  virtual ~PassengerService_findCity_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCity_result__isset {
  _PassengerService_findCity_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCity_result__isset;

class PassengerService_findCity_result {
 public:

  PassengerService_findCity_result() {
  }

  virtual ~PassengerService_findCity_result() throw() {}

  Cities success;
  ServiceFailure servicefailure;

  _PassengerService_findCity_result__isset __isset;

  void __set_success(const Cities& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findCity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCity_presult__isset {
  _PassengerService_findCity_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCity_presult__isset;

class PassengerService_findCity_presult {
 public:


  virtual ~PassengerService_findCity_presult() throw() {}

  Cities* success;
  ServiceFailure servicefailure;

  _PassengerService_findCity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDriver_args__isset {
  _PassengerService_findDriver_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDriver_args__isset;

class PassengerService_findDriver_args {
 public:

  PassengerService_findDriver_args() {
  }

  virtual ~PassengerService_findDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Driver search;
  RowRange rowrange;

  _PassengerService_findDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Driver& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDriver_pargs {
 public:


  virtual ~PassengerService_findDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Driver* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDriver_result__isset {
  _PassengerService_findDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDriver_result__isset;

class PassengerService_findDriver_result {
 public:

  PassengerService_findDriver_result() {
  }

  virtual ~PassengerService_findDriver_result() throw() {}

  Drivers success;
  ServiceFailure servicefailure;

  _PassengerService_findDriver_result__isset __isset;

  void __set_success(const Drivers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDriver_presult__isset {
  _PassengerService_findDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDriver_presult__isset;

class PassengerService_findDriver_presult {
 public:


  virtual ~PassengerService_findDriver_presult() throw() {}

  Drivers* success;
  ServiceFailure servicefailure;

  _PassengerService_findDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findCustomer_args__isset {
  _PassengerService_findCustomer_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findCustomer_args__isset;

class PassengerService_findCustomer_args {
 public:

  PassengerService_findCustomer_args() {
  }

  virtual ~PassengerService_findCustomer_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Customer search;
  RowRange rowrange;

  _PassengerService_findCustomer_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Customer& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findCustomer_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCustomer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCustomer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findCustomer_pargs {
 public:


  virtual ~PassengerService_findCustomer_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Customer* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCustomer_result__isset {
  _PassengerService_findCustomer_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCustomer_result__isset;

class PassengerService_findCustomer_result {
 public:

  PassengerService_findCustomer_result() {
  }

  virtual ~PassengerService_findCustomer_result() throw() {}

  Customers success;
  ServiceFailure servicefailure;

  _PassengerService_findCustomer_result__isset __isset;

  void __set_success(const Customers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findCustomer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCustomer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCustomer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCustomer_presult__isset {
  _PassengerService_findCustomer_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCustomer_presult__isset;

class PassengerService_findCustomer_presult {
 public:


  virtual ~PassengerService_findCustomer_presult() throw() {}

  Customers* success;
  ServiceFailure servicefailure;

  _PassengerService_findCustomer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findPassenger_args__isset {
  _PassengerService_findPassenger_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findPassenger_args__isset;

class PassengerService_findPassenger_args {
 public:

  PassengerService_findPassenger_args() {
  }

  virtual ~PassengerService_findPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Passenger search;
  RowRange rowrange;

  _PassengerService_findPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Passenger& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findPassenger_pargs {
 public:


  virtual ~PassengerService_findPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Passenger* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findPassenger_result__isset {
  _PassengerService_findPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findPassenger_result__isset;

class PassengerService_findPassenger_result {
 public:

  PassengerService_findPassenger_result() {
  }

  virtual ~PassengerService_findPassenger_result() throw() {}

  Passengers success;
  ServiceFailure servicefailure;

  _PassengerService_findPassenger_result__isset __isset;

  void __set_success(const Passengers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findPassenger_presult__isset {
  _PassengerService_findPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findPassenger_presult__isset;

class PassengerService_findPassenger_presult {
 public:


  virtual ~PassengerService_findPassenger_presult() throw() {}

  Passengers* success;
  ServiceFailure servicefailure;

  _PassengerService_findPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findRate_args__isset {
  _PassengerService_findRate_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findRate_args__isset;

class PassengerService_findRate_args {
 public:

  PassengerService_findRate_args() {
  }

  virtual ~PassengerService_findRate_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Rate search;
  RowRange rowrange;

  _PassengerService_findRate_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Rate& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findRate_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findRate_pargs {
 public:


  virtual ~PassengerService_findRate_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Rate* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findRate_result__isset {
  _PassengerService_findRate_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findRate_result__isset;

class PassengerService_findRate_result {
 public:

  PassengerService_findRate_result() {
  }

  virtual ~PassengerService_findRate_result() throw() {}

  Rates success;
  ServiceFailure servicefailure;

  _PassengerService_findRate_result__isset __isset;

  void __set_success(const Rates& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findRate_presult__isset {
  _PassengerService_findRate_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findRate_presult__isset;

class PassengerService_findRate_presult {
 public:


  virtual ~PassengerService_findRate_presult() throw() {}

  Rates* success;
  ServiceFailure servicefailure;

  _PassengerService_findRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findServiceOrder_args__isset {
  _PassengerService_findServiceOrder_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findServiceOrder_args__isset;

class PassengerService_findServiceOrder_args {
 public:

  PassengerService_findServiceOrder_args() {
  }

  virtual ~PassengerService_findServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrder search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const ServiceOrder& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findServiceOrder_pargs {
 public:


  virtual ~PassengerService_findServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrder* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrder_result__isset {
  _PassengerService_findServiceOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrder_result__isset;

class PassengerService_findServiceOrder_result {
 public:

  PassengerService_findServiceOrder_result() {
  }

  virtual ~PassengerService_findServiceOrder_result() throw() {}

  ServiceOrders success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrder_result__isset __isset;

  void __set_success(const ServiceOrders& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findServiceOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrder_presult__isset {
  _PassengerService_findServiceOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrder_presult__isset;

class PassengerService_findServiceOrder_presult {
 public:


  virtual ~PassengerService_findServiceOrder_presult() throw() {}

  ServiceOrders* success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findServiceOrderDecline_args__isset {
  _PassengerService_findServiceOrderDecline_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findServiceOrderDecline_args__isset;

class PassengerService_findServiceOrderDecline_args {
 public:

  PassengerService_findServiceOrderDecline_args() {
  }

  virtual ~PassengerService_findServiceOrderDecline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrderDecline search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findServiceOrderDecline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const ServiceOrderDecline& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findServiceOrderDecline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrderDecline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrderDecline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findServiceOrderDecline_pargs {
 public:


  virtual ~PassengerService_findServiceOrderDecline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrderDecline* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrderDecline_result__isset {
  _PassengerService_findServiceOrderDecline_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrderDecline_result__isset;

class PassengerService_findServiceOrderDecline_result {
 public:

  PassengerService_findServiceOrderDecline_result() {
  }

  virtual ~PassengerService_findServiceOrderDecline_result() throw() {}

  ServiceOrderDeclines success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrderDecline_result__isset __isset;

  void __set_success(const ServiceOrderDeclines& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findServiceOrderDecline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrderDecline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrderDecline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrderDecline_presult__isset {
  _PassengerService_findServiceOrderDecline_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrderDecline_presult__isset;

class PassengerService_findServiceOrderDecline_presult {
 public:


  virtual ~PassengerService_findServiceOrderDecline_presult() throw() {}

  ServiceOrderDeclines* success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrderDecline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findClaim_args__isset {
  _PassengerService_findClaim_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findClaim_args__isset;

class PassengerService_findClaim_args {
 public:

  PassengerService_findClaim_args() {
  }

  virtual ~PassengerService_findClaim_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Claim search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findClaim_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Claim& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findClaim_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findClaim_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findClaim_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findClaim_pargs {
 public:


  virtual ~PassengerService_findClaim_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Claim* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findClaim_result__isset {
  _PassengerService_findClaim_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findClaim_result__isset;

class PassengerService_findClaim_result {
 public:

  PassengerService_findClaim_result() {
  }

  virtual ~PassengerService_findClaim_result() throw() {}

  Claims success;
  ServiceFailure servicefailure;

  _PassengerService_findClaim_result__isset __isset;

  void __set_success(const Claims& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findClaim_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findClaim_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findClaim_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findClaim_presult__isset {
  _PassengerService_findClaim_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findClaim_presult__isset;

class PassengerService_findClaim_presult {
 public:


  virtual ~PassengerService_findClaim_presult() throw() {}

  Claims* success;
  ServiceFailure servicefailure;

  _PassengerService_findClaim_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findTrack_args__isset {
  _PassengerService_findTrack_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findTrack_args__isset;

class PassengerService_findTrack_args {
 public:

  PassengerService_findTrack_args() {
  }

  virtual ~PassengerService_findTrack_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Track search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findTrack_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Track& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findTrack_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findTrack_pargs {
 public:


  virtual ~PassengerService_findTrack_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Track* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findTrack_result__isset {
  _PassengerService_findTrack_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findTrack_result__isset;

class PassengerService_findTrack_result {
 public:

  PassengerService_findTrack_result() {
  }

  virtual ~PassengerService_findTrack_result() throw() {}

  Tracks success;
  ServiceFailure servicefailure;

  _PassengerService_findTrack_result__isset __isset;

  void __set_success(const Tracks& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findTrack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findTrack_presult__isset {
  _PassengerService_findTrack_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findTrack_presult__isset;

class PassengerService_findTrack_presult {
 public:


  virtual ~PassengerService_findTrack_presult() throw() {}

  Tracks* success;
  ServiceFailure servicefailure;

  _PassengerService_findTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PassengerServiceClient : virtual public PassengerServiceIf {
 public:
  PassengerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PassengerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDocument(Document& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getDocument(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getDocument(Document& _return);
  void getOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getOrg(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getOrg(Org& _return);
  void loginDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice);
  void send_loginDriver(const Credentials& credentials, const UserDevice& userdevice);
  void recv_loginDriver(Driver& _return);
  void loginPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice);
  void send_loginPassenger(const Credentials& credentials, const UserDevice& userdevice);
  void recv_loginPassenger(Passenger& _return);
  void findDictEntry(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange);
  void send_findDictEntry(const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange);
  void recv_findDictEntry(DictEntries& _return);
  void findDictTag(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange);
  void send_findDictTag(const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange);
  void recv_findDictTag(DictEntries& _return);
  void findBank(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange);
  void send_findBank(const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange);
  void recv_findBank(Banks& _return);
  void findBankByName(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findBankByName(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findBankByName(Banks& _return);
  void findOrgService(OrgServices& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange);
  void send_findOrgService(const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange);
  void recv_findOrgService(OrgServices& _return);
  void findVehicle(Vehicles& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void send_findVehicle(const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void recv_findVehicle(Vehicles& _return);
  void findVehicleid(Vehicleids& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void send_findVehicleid(const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void recv_findVehicleid(Vehicleids& _return);
  void addCity(City& _return, const Credentials& credentials, const UserDevice& userdevice, const City& value);
  void send_addCity(const Credentials& credentials, const UserDevice& userdevice, const City& value);
  void recv_addCity(City& _return);
  void addDictEntry(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value);
  void send_addDictEntry(const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value);
  void recv_addDictEntry(DictEntry& _return);
  void addBank(Bank& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& value);
  void send_addBank(const Credentials& credentials, const UserDevice& userdevice, const Bank& value);
  void recv_addBank(Bank& _return);
  void addOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& value);
  void send_addOrg(const Credentials& credentials, const UserDevice& userdevice, const Org& value);
  void recv_addOrg(Org& _return);
  void addOrgService(OrgService& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& value);
  void send_addOrgService(const Credentials& credentials, const UserDevice& userdevice, const OrgService& value);
  void recv_addOrgService(OrgService& _return);
  void addCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& value);
  void send_addCustomer(const Credentials& credentials, const UserDevice& userdevice, const Customer& value);
  void recv_addCustomer(Customer& _return);
  void addPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& value);
  void send_addPassenger(const Credentials& credentials, const UserDevice& userdevice, const Passenger& value);
  void recv_addPassenger(Passenger& _return);
  void addDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& value);
  void send_addDriver(const Credentials& credentials, const UserDevice& userdevice, const Driver& value);
  void recv_addDriver(Driver& _return);
  void addVehicleColor(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value);
  void send_addVehicleColor(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value);
  void recv_addVehicleColor(DictEntry& _return);
  void addVehicleBrand(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name);
  void send_addVehicleBrand(const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name);
  void recv_addVehicleBrand(DictEntry& _return);
  void addVehicleModel(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year);
  void send_addVehicleModel(const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year);
  void recv_addVehicleModel(DictEntry& _return);
  void addVehicleModelByBrandName(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year);
  void send_addVehicleModelByBrandName(const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year);
  void recv_addVehicleModelByBrandName(DictEntry& _return);
  void addRate(Rate& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& value);
  void send_addRate(const Credentials& credentials, const UserDevice& userdevice, const Rate& value);
  void recv_addRate(Rate& _return);
  void addServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value);
  void send_addServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value);
  void recv_addServiceOrder(ServiceOrder& _return);
  void addServiceOrderDecline(ServiceOrderDecline& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value);
  void send_addServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value);
  void recv_addServiceOrderDecline(ServiceOrderDecline& _return);
  void addClaim(Claim& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& value);
  void send_addClaim(const Credentials& credentials, const UserDevice& userdevice, const Claim& value);
  void recv_addClaim(Claim& _return);
  ID addTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& value);
  void send_addTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& value);
  ID recv_addTrack();
  void rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmRate();
  void rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmServiceOrder();
  void rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmServiceOrderDecline();
  void rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmClaim();
  void rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmTrack();
  void findOrg(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange);
  void send_findOrg(const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange);
  void recv_findOrg(Orgs& _return);
  void findOrgByName(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findOrgByName(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findOrgByName(Orgs& _return);
  void findColor(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findColor(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findColor(DictEntries& _return);
  void findBrand(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findBrand(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findBrand(DictEntries& _return);
  void findModel(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange);
  void send_findModel(const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange);
  void recv_findModel(DictEntries& _return);
  void findModelByBrandName(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange);
  void send_findModelByBrandName(const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange);
  void recv_findModelByBrandName(DictEntries& _return);
  void findCity(Cities& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findCity(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findCity(Cities& _return);
  void findDriver(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange);
  void send_findDriver(const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange);
  void recv_findDriver(Drivers& _return);
  void findCustomer(Customers& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange);
  void send_findCustomer(const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange);
  void recv_findCustomer(Customers& _return);
  void findPassenger(Passengers& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange);
  void send_findPassenger(const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange);
  void recv_findPassenger(Passengers& _return);
  void findRate(Rates& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange);
  void send_findRate(const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange);
  void recv_findRate(Rates& _return);
  void findServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findServiceOrder(ServiceOrders& _return);
  void findServiceOrderDecline(ServiceOrderDeclines& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findServiceOrderDecline(ServiceOrderDeclines& _return);
  void findClaim(Claims& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findClaim(const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findClaim(Claims& _return);
  void findTrack(Tracks& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findTrack(Tracks& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PassengerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PassengerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PassengerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDictEntry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDictTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBankByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findOrgService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findVehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findVehicleid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDictEntry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addBank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addOrg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addOrgService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCustomer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleColor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleBrand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleModelByBrandName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addServiceOrderDecline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addClaim(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmServiceOrderDecline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmClaim(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findOrg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findOrgByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findColor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBrand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findModelByBrandName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findCity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findCustomer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findServiceOrderDecline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findClaim(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PassengerServiceProcessor(boost::shared_ptr<PassengerServiceIf> iface) :
    iface_(iface) {
    processMap_["getDocument"] = &PassengerServiceProcessor::process_getDocument;
    processMap_["getOrg"] = &PassengerServiceProcessor::process_getOrg;
    processMap_["loginDriver"] = &PassengerServiceProcessor::process_loginDriver;
    processMap_["loginPassenger"] = &PassengerServiceProcessor::process_loginPassenger;
    processMap_["findDictEntry"] = &PassengerServiceProcessor::process_findDictEntry;
    processMap_["findDictTag"] = &PassengerServiceProcessor::process_findDictTag;
    processMap_["findBank"] = &PassengerServiceProcessor::process_findBank;
    processMap_["findBankByName"] = &PassengerServiceProcessor::process_findBankByName;
    processMap_["findOrgService"] = &PassengerServiceProcessor::process_findOrgService;
    processMap_["findVehicle"] = &PassengerServiceProcessor::process_findVehicle;
    processMap_["findVehicleid"] = &PassengerServiceProcessor::process_findVehicleid;
    processMap_["addCity"] = &PassengerServiceProcessor::process_addCity;
    processMap_["addDictEntry"] = &PassengerServiceProcessor::process_addDictEntry;
    processMap_["addBank"] = &PassengerServiceProcessor::process_addBank;
    processMap_["addOrg"] = &PassengerServiceProcessor::process_addOrg;
    processMap_["addOrgService"] = &PassengerServiceProcessor::process_addOrgService;
    processMap_["addCustomer"] = &PassengerServiceProcessor::process_addCustomer;
    processMap_["addPassenger"] = &PassengerServiceProcessor::process_addPassenger;
    processMap_["addDriver"] = &PassengerServiceProcessor::process_addDriver;
    processMap_["addVehicleColor"] = &PassengerServiceProcessor::process_addVehicleColor;
    processMap_["addVehicleBrand"] = &PassengerServiceProcessor::process_addVehicleBrand;
    processMap_["addVehicleModel"] = &PassengerServiceProcessor::process_addVehicleModel;
    processMap_["addVehicleModelByBrandName"] = &PassengerServiceProcessor::process_addVehicleModelByBrandName;
    processMap_["addRate"] = &PassengerServiceProcessor::process_addRate;
    processMap_["addServiceOrder"] = &PassengerServiceProcessor::process_addServiceOrder;
    processMap_["addServiceOrderDecline"] = &PassengerServiceProcessor::process_addServiceOrderDecline;
    processMap_["addClaim"] = &PassengerServiceProcessor::process_addClaim;
    processMap_["addTrack"] = &PassengerServiceProcessor::process_addTrack;
    processMap_["rmRate"] = &PassengerServiceProcessor::process_rmRate;
    processMap_["rmServiceOrder"] = &PassengerServiceProcessor::process_rmServiceOrder;
    processMap_["rmServiceOrderDecline"] = &PassengerServiceProcessor::process_rmServiceOrderDecline;
    processMap_["rmClaim"] = &PassengerServiceProcessor::process_rmClaim;
    processMap_["rmTrack"] = &PassengerServiceProcessor::process_rmTrack;
    processMap_["findOrg"] = &PassengerServiceProcessor::process_findOrg;
    processMap_["findOrgByName"] = &PassengerServiceProcessor::process_findOrgByName;
    processMap_["findColor"] = &PassengerServiceProcessor::process_findColor;
    processMap_["findBrand"] = &PassengerServiceProcessor::process_findBrand;
    processMap_["findModel"] = &PassengerServiceProcessor::process_findModel;
    processMap_["findModelByBrandName"] = &PassengerServiceProcessor::process_findModelByBrandName;
    processMap_["findCity"] = &PassengerServiceProcessor::process_findCity;
    processMap_["findDriver"] = &PassengerServiceProcessor::process_findDriver;
    processMap_["findCustomer"] = &PassengerServiceProcessor::process_findCustomer;
    processMap_["findPassenger"] = &PassengerServiceProcessor::process_findPassenger;
    processMap_["findRate"] = &PassengerServiceProcessor::process_findRate;
    processMap_["findServiceOrder"] = &PassengerServiceProcessor::process_findServiceOrder;
    processMap_["findServiceOrderDecline"] = &PassengerServiceProcessor::process_findServiceOrderDecline;
    processMap_["findClaim"] = &PassengerServiceProcessor::process_findClaim;
    processMap_["findTrack"] = &PassengerServiceProcessor::process_findTrack;
  }

  virtual ~PassengerServiceProcessor() {}
};

class PassengerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PassengerServiceProcessorFactory(const ::boost::shared_ptr< PassengerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PassengerServiceIfFactory > handlerFactory_;
};

class PassengerServiceMultiface : virtual public PassengerServiceIf {
 public:
  PassengerServiceMultiface(std::vector<boost::shared_ptr<PassengerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PassengerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PassengerServiceIf> > ifaces_;
  PassengerServiceMultiface() {}
  void add(boost::shared_ptr<PassengerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDocument(Document& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocument(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getDocument(_return, credentials, userdevice, id);
    return;
  }

  void getOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrg(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getOrg(_return, credentials, userdevice, id);
    return;
  }

  void loginDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginDriver(_return, credentials, userdevice);
    }
    ifaces_[i]->loginDriver(_return, credentials, userdevice);
    return;
  }

  void loginPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginPassenger(_return, credentials, userdevice);
    }
    ifaces_[i]->loginPassenger(_return, credentials, userdevice);
    return;
  }

  void findDictEntry(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDictEntry(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDictEntry(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findDictTag(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDictTag(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDictTag(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findBank(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBank(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findBank(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findBankByName(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBankByName(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findBankByName(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findOrgService(OrgServices& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findOrgService(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findOrgService(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findVehicle(Vehicles& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findVehicle(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findVehicle(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findVehicleid(Vehicleids& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findVehicleid(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findVehicleid(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void addCity(City& _return, const Credentials& credentials, const UserDevice& userdevice, const City& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCity(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addCity(_return, credentials, userdevice, value);
    return;
  }

  void addDictEntry(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDictEntry(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addDictEntry(_return, credentials, userdevice, value);
    return;
  }

  void addBank(Bank& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addBank(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addBank(_return, credentials, userdevice, value);
    return;
  }

  void addOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addOrg(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addOrg(_return, credentials, userdevice, value);
    return;
  }

  void addOrgService(OrgService& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addOrgService(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addOrgService(_return, credentials, userdevice, value);
    return;
  }

  void addCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCustomer(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addCustomer(_return, credentials, userdevice, value);
    return;
  }

  void addPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addPassenger(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addPassenger(_return, credentials, userdevice, value);
    return;
  }

  void addDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDriver(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addDriver(_return, credentials, userdevice, value);
    return;
  }

  void addVehicleColor(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleColor(_return, credentials, userdevice, name, value);
    }
    ifaces_[i]->addVehicleColor(_return, credentials, userdevice, name, value);
    return;
  }

  void addVehicleBrand(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleBrand(_return, credentials, userdevice, category, name);
    }
    ifaces_[i]->addVehicleBrand(_return, credentials, userdevice, category, name);
    return;
  }

  void addVehicleModel(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleModel(_return, credentials, userdevice, brandid, name, year);
    }
    ifaces_[i]->addVehicleModel(_return, credentials, userdevice, brandid, name, year);
    return;
  }

  void addVehicleModelByBrandName(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleModelByBrandName(_return, credentials, userdevice, brandname, name, year);
    }
    ifaces_[i]->addVehicleModelByBrandName(_return, credentials, userdevice, brandname, name, year);
    return;
  }

  void addRate(Rate& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRate(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addRate(_return, credentials, userdevice, value);
    return;
  }

  void addServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addServiceOrder(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addServiceOrder(_return, credentials, userdevice, value);
    return;
  }

  void addServiceOrderDecline(ServiceOrderDecline& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addServiceOrderDecline(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addServiceOrderDecline(_return, credentials, userdevice, value);
    return;
  }

  void addClaim(Claim& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addClaim(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addClaim(_return, credentials, userdevice, value);
    return;
  }

  ID addTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addTrack(credentials, userdevice, value);
    }
    return ifaces_[i]->addTrack(credentials, userdevice, value);
  }

  void rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmRate(credentials, userdevice, id);
    }
    ifaces_[i]->rmRate(credentials, userdevice, id);
  }

  void rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmServiceOrder(credentials, userdevice, id);
    }
    ifaces_[i]->rmServiceOrder(credentials, userdevice, id);
  }

  void rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmServiceOrderDecline(credentials, userdevice, id);
    }
    ifaces_[i]->rmServiceOrderDecline(credentials, userdevice, id);
  }

  void rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmClaim(credentials, userdevice, id);
    }
    ifaces_[i]->rmClaim(credentials, userdevice, id);
  }

  void rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmTrack(credentials, userdevice, id);
    }
    ifaces_[i]->rmTrack(credentials, userdevice, id);
  }

  void findOrg(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findOrg(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findOrg(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findOrgByName(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findOrgByName(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findOrgByName(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findColor(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findColor(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findColor(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findBrand(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBrand(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findBrand(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findModel(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findModel(_return, credentials, userdevice, brandid, name, rowrange);
    }
    ifaces_[i]->findModel(_return, credentials, userdevice, brandid, name, rowrange);
    return;
  }

  void findModelByBrandName(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findModelByBrandName(_return, credentials, userdevice, brandname, name, rowrange);
    }
    ifaces_[i]->findModelByBrandName(_return, credentials, userdevice, brandname, name, rowrange);
    return;
  }

  void findCity(Cities& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findCity(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findCity(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findDriver(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDriver(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDriver(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findCustomer(Customers& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findCustomer(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findCustomer(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findPassenger(Passengers& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findPassenger(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findPassenger(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findRate(Rates& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findRate(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findRate(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findServiceOrder(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findServiceOrder(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void findServiceOrderDecline(ServiceOrderDeclines& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findServiceOrderDecline(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findServiceOrderDecline(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void findClaim(Claims& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findClaim(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findClaim(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void findTrack(Tracks& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findTrack(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findTrack(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

};

} // namespace

#endif
