/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PassengerService_H
#define PassengerService_H

#include <thrift/TDispatchProcessor.h>
#include "taxi_types.h"

namespace taxi {

class PassengerServiceIf {
 public:
  virtual ~PassengerServiceIf() {}
  virtual void getDocument(Document& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void getOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void loginDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice) = 0;
  virtual void loginPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice) = 0;
  virtual void findDictEntry(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange) = 0;
  virtual void findDictTag(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange) = 0;
  virtual void findBank(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange) = 0;
  virtual void findBankByName(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findOrgService(OrgServices& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange) = 0;
  virtual void findVehicle(Vehicles& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) = 0;
  virtual void findVehicleid(Vehicleids& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) = 0;
  virtual void addCity(City& _return, const Credentials& credentials, const UserDevice& userdevice, const City& value) = 0;
  virtual void addDictEntry(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value) = 0;
  virtual void addBank(Bank& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& value) = 0;
  virtual void addOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& value) = 0;
  virtual void addOrgService(OrgService& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& value) = 0;
  virtual void addManager(Manager& _return, const Credentials& credentials, const UserDevice& userdevice, const Manager& value) = 0;
  virtual void addCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& value) = 0;
  virtual void addPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& value) = 0;
  virtual void addDispatcher(Dispatcher& _return, const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& value) = 0;
  virtual void addDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& value) = 0;
  virtual void addVehicle(Vehicle& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& value) = 0;
  virtual void addVehicleColor(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value) = 0;
  virtual void addVehicleBrand(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name) = 0;
  virtual void addVehicleModel(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year) = 0;
  virtual void addVehicleModelByBrandName(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year) = 0;
  virtual void addTariffPlan(TariffPlan& _return, const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& value) = 0;
  virtual void addRate(Rate& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& value) = 0;
  virtual void addServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value) = 0;
  virtual void getServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual void getPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void getCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void getDispatcher(Dispatcher& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void getDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void addServiceOrderDecline(ServiceOrderDecline& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value) = 0;
  virtual void addClaim(Claim& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& value) = 0;
  virtual void addTrack(Track& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& value) = 0;
  virtual void rmCity(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmVehicle(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmManager(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmTariffPlan(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmOldTracks(const Credentials& credentials, const UserDevice& userdevice, const DATE olderthan) = 0;
  virtual void findOrg(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange) = 0;
  virtual void findOrgByName(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findColor(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findBrand(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findModel(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange) = 0;
  virtual void findModelByBrandName(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange) = 0;
  virtual void findCity(Cities& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) = 0;
  virtual void findManager(Managers& _return, const Credentials& credentials, const UserDevice& userdevice, const Manager& search, const RowRange& rowrange) = 0;
  virtual void findDriver(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange) = 0;
  virtual void getDriverOnlineAvailable(DriverOnlineMap& _return, const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid) = 0;
  virtual void getDriverAvailable(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid) = 0;
  virtual void findCustomer(Customers& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange) = 0;
  virtual void findPassenger(Passengers& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange) = 0;
  virtual void findTariffPlan(TariffPlans& _return, const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& search, const RowRange& rowrange) = 0;
  virtual void findRate(Rates& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange) = 0;
  virtual void findServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void findServiceOrderDecline(ServiceOrderDeclines& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void findClaim(Claims& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void findTrack(Tracks& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange) = 0;
  virtual void getEvents(NotificationEvents& _return, const Credentials& credentials, const UserDevice& userdevice, const ID startId, const RowRange& rowrange) = 0;
  virtual bool getOnline(const Credentials& credentials, const UserDevice& userdevice) = 0;
  virtual bool setOnline(const Credentials& credentials, const UserDevice& userdevice, const bool value) = 0;
  virtual bool takeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid, const bool confirm, const NUMBER32 provisionminutes) = 0;
  virtual bool startWaiting(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual bool startDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual bool stopDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual bool completeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual bool cancelOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual bool failOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) = 0;
  virtual void getDriverServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const RowRange& rowrange) = 0;
  virtual void findAutoPayment(AutoPayments& _return, const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& search, const RowRange& rowrange) = 0;
  virtual void findBillAct(BillActs& _return, const Credentials& credentials, const UserDevice& userdevice, const BillAct& search, const RowRange& rowrange) = 0;
  virtual void findDriverBlackList(DriverBlackLists& _return, const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& search, const RowRange& rowrange) = 0;
  virtual void findDispatcher(Dispatchers& _return, const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& search, const RowRange& rowrange) = 0;
  virtual void findNotification(Notifications& _return, const Credentials& credentials, const UserDevice& userdevice, const Notification& search, const RowRange& rowrange) = 0;
  virtual void findShedule(Shedules& _return, const Credentials& credentials, const UserDevice& userdevice, const Shedule& search, const RowRange& rowrange) = 0;
  virtual void findServiceOrderStop(ServiceOrderStops& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& search, const RowRange& rowrange) = 0;
  virtual void findCustomerStatistic(CustomerStatistics& _return, const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& search, const RowRange& rowrange) = 0;
  virtual void addAutoPayment(AutoPayment& _return, const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& value) = 0;
  virtual void addBillAct(BillAct& _return, const Credentials& credentials, const UserDevice& userdevice, const BillAct& value) = 0;
  virtual void addDriverBlackList(DriverBlackList& _return, const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& value) = 0;
  virtual void addNotification(Notification& _return, const Credentials& credentials, const UserDevice& userdevice, const Notification& value) = 0;
  virtual void addShedule(Shedule& _return, const Credentials& credentials, const UserDevice& userdevice, const Shedule& value) = 0;
  virtual void addServiceOrderStop(ServiceOrderStop& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& value) = 0;
  virtual void addCustomerStatistic(CustomerStatistic& _return, const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& value) = 0;
  virtual void rmAutoPayment(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmBank(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmBillAct(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmVehicleBrand(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmVehicleColor(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmDictEntry(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmDriver(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmDriverBlackList(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmPassenger(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmNotification(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmCustomer(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmDispatcher(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmShedule(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmServiceOrderStop(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
  virtual void rmCustomerStatistic(const Credentials& credentials, const UserDevice& userdevice, const ID id) = 0;
};

class PassengerServiceIfFactory {
 public:
  typedef PassengerServiceIf Handler;

  virtual ~PassengerServiceIfFactory() {}

  virtual PassengerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PassengerServiceIf* /* handler */) = 0;
};

class PassengerServiceIfSingletonFactory : virtual public PassengerServiceIfFactory {
 public:
  PassengerServiceIfSingletonFactory(const boost::shared_ptr<PassengerServiceIf>& iface) : iface_(iface) {}
  virtual ~PassengerServiceIfSingletonFactory() {}

  virtual PassengerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PassengerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PassengerServiceIf> iface_;
};

class PassengerServiceNull : virtual public PassengerServiceIf {
 public:
  virtual ~PassengerServiceNull() {}
  void getDocument(Document& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void getOrg(Org& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void loginDriver(Driver& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */) {
    return;
  }
  void loginPassenger(Passenger& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */) {
    return;
  }
  void findDictEntry(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DictEntry& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findDictTag(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DictTag::type /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findBank(Banks& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Bank& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findBankByName(Banks& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findOrgService(OrgServices& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const OrgService& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findVehicle(Vehicles& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Vehicle& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findVehicleid(Vehicleids& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Vehicle& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void addCity(City& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const City& /* value */) {
    return;
  }
  void addDictEntry(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DictEntry& /* value */) {
    return;
  }
  void addBank(Bank& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Bank& /* value */) {
    return;
  }
  void addOrg(Org& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Org& /* value */) {
    return;
  }
  void addOrgService(OrgService& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const OrgService& /* value */) {
    return;
  }
  void addManager(Manager& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Manager& /* value */) {
    return;
  }
  void addCustomer(Customer& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Customer& /* value */) {
    return;
  }
  void addPassenger(Passenger& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Passenger& /* value */) {
    return;
  }
  void addDispatcher(Dispatcher& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Dispatcher& /* value */) {
    return;
  }
  void addDriver(Driver& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Driver& /* value */) {
    return;
  }
  void addVehicle(Vehicle& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Vehicle& /* value */) {
    return;
  }
  void addVehicleColor(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const NUMBER32 /* value */) {
    return;
  }
  void addVehicleBrand(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const VehicleCategory::type /* category */, const STR& /* name */) {
    return;
  }
  void addVehicleModel(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* brandid */, const STR& /* name */, const NUMBER32 /* year */) {
    return;
  }
  void addVehicleModelByBrandName(DictEntry& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* brandname */, const STR& /* name */, const NUMBER32 /* year */) {
    return;
  }
  void addTariffPlan(TariffPlan& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const TariffPlan& /* value */) {
    return;
  }
  void addRate(Rate& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Rate& /* value */) {
    return;
  }
  void addServiceOrder(ServiceOrder& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrder& /* value */) {
    return;
  }
  void getServiceOrder(ServiceOrder& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    return;
  }
  void getPassenger(Passenger& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void getCustomer(Customer& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void getDispatcher(Dispatcher& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void getDriver(Driver& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void addServiceOrderDecline(ServiceOrderDecline& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrderDecline& /* value */) {
    return;
  }
  void addClaim(Claim& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Claim& /* value */) {
    return;
  }
  void addTrack(Track& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Track& /* value */) {
    return;
  }
  void rmCity(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmVehicle(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmManager(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmTariffPlan(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmRate(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmServiceOrder(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmServiceOrderDecline(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmClaim(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmTrack(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmOldTracks(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DATE /* olderthan */) {
    return;
  }
  void findOrg(Orgs& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Org& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findOrgByName(Orgs& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findColor(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findBrand(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findModel(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* brandid */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findModelByBrandName(DictEntries& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* brandname */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findCity(Cities& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const STR& /* name */, const RowRange& /* rowrange */) {
    return;
  }
  void findManager(Managers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Manager& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findDriver(Drivers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Driver& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void getDriverOnlineAvailable(DriverOnlineMap& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Cityid /* cityid */) {
    return;
  }
  void getDriverAvailable(Drivers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Cityid /* cityid */) {
    return;
  }
  void findCustomer(Customers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Customer& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findPassenger(Passengers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Passenger& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findTariffPlan(TariffPlans& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const TariffPlan& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findRate(Rates& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Rate& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findServiceOrder(ServiceOrders& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrder& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void findServiceOrderDecline(ServiceOrderDeclines& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrderDecline& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void findClaim(Claims& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Claim& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void findTrack(Tracks& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Track& /* search */, const DateRange& /* sheduletime */, const RowRange& /* rowrange */) {
    return;
  }
  void getEvents(NotificationEvents& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* startId */, const RowRange& /* rowrange */) {
    return;
  }
  bool getOnline(const Credentials& /* credentials */, const UserDevice& /* userdevice */) {
    bool _return = false;
    return _return;
  }
  bool setOnline(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const bool /* value */) {
    bool _return = false;
    return _return;
  }
  bool takeOrder(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */, const bool /* confirm */, const NUMBER32 /* provisionminutes */) {
    bool _return = false;
    return _return;
  }
  bool startWaiting(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    bool _return = false;
    return _return;
  }
  bool startDriving(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    bool _return = false;
    return _return;
  }
  bool stopDriving(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    bool _return = false;
    return _return;
  }
  bool completeOrder(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    bool _return = false;
    return _return;
  }
  bool cancelOrder(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    bool _return = false;
    return _return;
  }
  bool failOrder(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* serviceorderid */) {
    bool _return = false;
    return _return;
  }
  void getDriverServiceOrder(ServiceOrders& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const RowRange& /* rowrange */) {
    return;
  }
  void findAutoPayment(AutoPayments& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const AutoPayment& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findBillAct(BillActs& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const BillAct& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findDriverBlackList(DriverBlackLists& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DriverBlackList& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findDispatcher(Dispatchers& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Dispatcher& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findNotification(Notifications& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Notification& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findShedule(Shedules& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Shedule& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findServiceOrderStop(ServiceOrderStops& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrderStop& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void findCustomerStatistic(CustomerStatistics& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const CustomerStatistic& /* search */, const RowRange& /* rowrange */) {
    return;
  }
  void addAutoPayment(AutoPayment& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const AutoPayment& /* value */) {
    return;
  }
  void addBillAct(BillAct& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const BillAct& /* value */) {
    return;
  }
  void addDriverBlackList(DriverBlackList& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const DriverBlackList& /* value */) {
    return;
  }
  void addNotification(Notification& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Notification& /* value */) {
    return;
  }
  void addShedule(Shedule& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const Shedule& /* value */) {
    return;
  }
  void addServiceOrderStop(ServiceOrderStop& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ServiceOrderStop& /* value */) {
    return;
  }
  void addCustomerStatistic(CustomerStatistic& /* _return */, const Credentials& /* credentials */, const UserDevice& /* userdevice */, const CustomerStatistic& /* value */) {
    return;
  }
  void rmAutoPayment(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmBank(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmBillAct(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmVehicleBrand(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmVehicleColor(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmDictEntry(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmDriver(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmDriverBlackList(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmPassenger(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmNotification(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmCustomer(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmDispatcher(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmShedule(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmServiceOrderStop(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
  void rmCustomerStatistic(const Credentials& /* credentials */, const UserDevice& /* userdevice */, const ID /* id */) {
    return;
  }
};

typedef struct _PassengerService_getDocument_args__isset {
  _PassengerService_getDocument_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getDocument_args__isset;

class PassengerService_getDocument_args {
 public:

  PassengerService_getDocument_args() : id(0) {
  }

  virtual ~PassengerService_getDocument_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getDocument_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getDocument_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDocument_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDocument_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDocument_pargs {
 public:


  virtual ~PassengerService_getDocument_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDocument_result__isset {
  _PassengerService_getDocument_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDocument_result__isset;

class PassengerService_getDocument_result {
 public:

  PassengerService_getDocument_result() {
  }

  virtual ~PassengerService_getDocument_result() throw() {}

  Document success;
  ServiceFailure servicefailure;

  _PassengerService_getDocument_result__isset __isset;

  void __set_success(const Document& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDocument_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDocument_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDocument_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDocument_presult__isset {
  _PassengerService_getDocument_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDocument_presult__isset;

class PassengerService_getDocument_presult {
 public:


  virtual ~PassengerService_getDocument_presult() throw() {}

  Document* success;
  ServiceFailure servicefailure;

  _PassengerService_getDocument_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getOrg_args__isset {
  _PassengerService_getOrg_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getOrg_args__isset;

class PassengerService_getOrg_args {
 public:

  PassengerService_getOrg_args() : id(0) {
  }

  virtual ~PassengerService_getOrg_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getOrg_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getOrg_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getOrg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getOrg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getOrg_pargs {
 public:


  virtual ~PassengerService_getOrg_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getOrg_result__isset {
  _PassengerService_getOrg_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getOrg_result__isset;

class PassengerService_getOrg_result {
 public:

  PassengerService_getOrg_result() {
  }

  virtual ~PassengerService_getOrg_result() throw() {}

  Org success;
  ServiceFailure servicefailure;

  _PassengerService_getOrg_result__isset __isset;

  void __set_success(const Org& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getOrg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getOrg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getOrg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getOrg_presult__isset {
  _PassengerService_getOrg_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getOrg_presult__isset;

class PassengerService_getOrg_presult {
 public:


  virtual ~PassengerService_getOrg_presult() throw() {}

  Org* success;
  ServiceFailure servicefailure;

  _PassengerService_getOrg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_loginDriver_args__isset {
  _PassengerService_loginDriver_args__isset() : credentials(false), userdevice(false) {}
  bool credentials;
  bool userdevice;
} _PassengerService_loginDriver_args__isset;

class PassengerService_loginDriver_args {
 public:

  PassengerService_loginDriver_args() {
  }

  virtual ~PassengerService_loginDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;

  _PassengerService_loginDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  bool operator == (const PassengerService_loginDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_loginDriver_pargs {
 public:


  virtual ~PassengerService_loginDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginDriver_result__isset {
  _PassengerService_loginDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginDriver_result__isset;

class PassengerService_loginDriver_result {
 public:

  PassengerService_loginDriver_result() {
  }

  virtual ~PassengerService_loginDriver_result() throw() {}

  Driver success;
  ServiceFailure servicefailure;

  _PassengerService_loginDriver_result__isset __isset;

  void __set_success(const Driver& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_loginDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginDriver_presult__isset {
  _PassengerService_loginDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginDriver_presult__isset;

class PassengerService_loginDriver_presult {
 public:


  virtual ~PassengerService_loginDriver_presult() throw() {}

  Driver* success;
  ServiceFailure servicefailure;

  _PassengerService_loginDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_loginPassenger_args__isset {
  _PassengerService_loginPassenger_args__isset() : credentials(false), userdevice(false) {}
  bool credentials;
  bool userdevice;
} _PassengerService_loginPassenger_args__isset;

class PassengerService_loginPassenger_args {
 public:

  PassengerService_loginPassenger_args() {
  }

  virtual ~PassengerService_loginPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;

  _PassengerService_loginPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  bool operator == (const PassengerService_loginPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_loginPassenger_pargs {
 public:


  virtual ~PassengerService_loginPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginPassenger_result__isset {
  _PassengerService_loginPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginPassenger_result__isset;

class PassengerService_loginPassenger_result {
 public:

  PassengerService_loginPassenger_result() {
  }

  virtual ~PassengerService_loginPassenger_result() throw() {}

  Passenger success;
  ServiceFailure servicefailure;

  _PassengerService_loginPassenger_result__isset __isset;

  void __set_success(const Passenger& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_loginPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_loginPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_loginPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_loginPassenger_presult__isset {
  _PassengerService_loginPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_loginPassenger_presult__isset;

class PassengerService_loginPassenger_presult {
 public:


  virtual ~PassengerService_loginPassenger_presult() throw() {}

  Passenger* success;
  ServiceFailure servicefailure;

  _PassengerService_loginPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDictEntry_args__isset {
  _PassengerService_findDictEntry_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDictEntry_args__isset;

class PassengerService_findDictEntry_args {
 public:

  PassengerService_findDictEntry_args() {
  }

  virtual ~PassengerService_findDictEntry_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DictEntry search;
  RowRange rowrange;

  _PassengerService_findDictEntry_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const DictEntry& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDictEntry_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictEntry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictEntry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDictEntry_pargs {
 public:


  virtual ~PassengerService_findDictEntry_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DictEntry* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictEntry_result__isset {
  _PassengerService_findDictEntry_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictEntry_result__isset;

class PassengerService_findDictEntry_result {
 public:

  PassengerService_findDictEntry_result() {
  }

  virtual ~PassengerService_findDictEntry_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findDictEntry_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDictEntry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictEntry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictEntry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictEntry_presult__isset {
  _PassengerService_findDictEntry_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictEntry_presult__isset;

class PassengerService_findDictEntry_presult {
 public:


  virtual ~PassengerService_findDictEntry_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findDictEntry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDictTag_args__isset {
  _PassengerService_findDictTag_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDictTag_args__isset;

class PassengerService_findDictTag_args {
 public:

  PassengerService_findDictTag_args() : search((DictTag::type)0) {
  }

  virtual ~PassengerService_findDictTag_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DictTag::type search;
  RowRange rowrange;

  _PassengerService_findDictTag_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const DictTag::type val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDictTag_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDictTag_pargs {
 public:


  virtual ~PassengerService_findDictTag_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DictTag::type* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictTag_result__isset {
  _PassengerService_findDictTag_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictTag_result__isset;

class PassengerService_findDictTag_result {
 public:

  PassengerService_findDictTag_result() {
  }

  virtual ~PassengerService_findDictTag_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findDictTag_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDictTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDictTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDictTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDictTag_presult__isset {
  _PassengerService_findDictTag_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDictTag_presult__isset;

class PassengerService_findDictTag_presult {
 public:


  virtual ~PassengerService_findDictTag_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findDictTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBank_args__isset {
  _PassengerService_findBank_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findBank_args__isset;

class PassengerService_findBank_args {
 public:

  PassengerService_findBank_args() {
  }

  virtual ~PassengerService_findBank_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Bank search;
  RowRange rowrange;

  _PassengerService_findBank_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Bank& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBank_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBank_pargs {
 public:


  virtual ~PassengerService_findBank_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Bank* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBank_result__isset {
  _PassengerService_findBank_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBank_result__isset;

class PassengerService_findBank_result {
 public:

  PassengerService_findBank_result() {
  }

  virtual ~PassengerService_findBank_result() throw() {}

  Banks success;
  ServiceFailure servicefailure;

  _PassengerService_findBank_result__isset __isset;

  void __set_success(const Banks& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBank_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBank_presult__isset {
  _PassengerService_findBank_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBank_presult__isset;

class PassengerService_findBank_presult {
 public:


  virtual ~PassengerService_findBank_presult() throw() {}

  Banks* success;
  ServiceFailure servicefailure;

  _PassengerService_findBank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBankByName_args__isset {
  _PassengerService_findBankByName_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findBankByName_args__isset;

class PassengerService_findBankByName_args {
 public:

  PassengerService_findBankByName_args() : name() {
  }

  virtual ~PassengerService_findBankByName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findBankByName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBankByName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBankByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBankByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBankByName_pargs {
 public:


  virtual ~PassengerService_findBankByName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBankByName_result__isset {
  _PassengerService_findBankByName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBankByName_result__isset;

class PassengerService_findBankByName_result {
 public:

  PassengerService_findBankByName_result() {
  }

  virtual ~PassengerService_findBankByName_result() throw() {}

  Banks success;
  ServiceFailure servicefailure;

  _PassengerService_findBankByName_result__isset __isset;

  void __set_success(const Banks& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBankByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBankByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBankByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBankByName_presult__isset {
  _PassengerService_findBankByName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBankByName_presult__isset;

class PassengerService_findBankByName_presult {
 public:


  virtual ~PassengerService_findBankByName_presult() throw() {}

  Banks* success;
  ServiceFailure servicefailure;

  _PassengerService_findBankByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findOrgService_args__isset {
  _PassengerService_findOrgService_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findOrgService_args__isset;

class PassengerService_findOrgService_args {
 public:

  PassengerService_findOrgService_args() {
  }

  virtual ~PassengerService_findOrgService_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  OrgService search;
  RowRange rowrange;

  _PassengerService_findOrgService_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const OrgService& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findOrgService_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findOrgService_pargs {
 public:


  virtual ~PassengerService_findOrgService_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const OrgService* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgService_result__isset {
  _PassengerService_findOrgService_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgService_result__isset;

class PassengerService_findOrgService_result {
 public:

  PassengerService_findOrgService_result() {
  }

  virtual ~PassengerService_findOrgService_result() throw() {}

  OrgServices success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgService_result__isset __isset;

  void __set_success(const OrgServices& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findOrgService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgService_presult__isset {
  _PassengerService_findOrgService_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgService_presult__isset;

class PassengerService_findOrgService_presult {
 public:


  virtual ~PassengerService_findOrgService_presult() throw() {}

  OrgServices* success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findVehicle_args__isset {
  _PassengerService_findVehicle_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findVehicle_args__isset;

class PassengerService_findVehicle_args {
 public:

  PassengerService_findVehicle_args() {
  }

  virtual ~PassengerService_findVehicle_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Vehicle search;
  RowRange rowrange;

  _PassengerService_findVehicle_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Vehicle& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findVehicle_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findVehicle_pargs {
 public:


  virtual ~PassengerService_findVehicle_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Vehicle* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicle_result__isset {
  _PassengerService_findVehicle_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicle_result__isset;

class PassengerService_findVehicle_result {
 public:

  PassengerService_findVehicle_result() {
  }

  virtual ~PassengerService_findVehicle_result() throw() {}

  Vehicles success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicle_result__isset __isset;

  void __set_success(const Vehicles& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findVehicle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicle_presult__isset {
  _PassengerService_findVehicle_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicle_presult__isset;

class PassengerService_findVehicle_presult {
 public:


  virtual ~PassengerService_findVehicle_presult() throw() {}

  Vehicles* success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findVehicleid_args__isset {
  _PassengerService_findVehicleid_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findVehicleid_args__isset;

class PassengerService_findVehicleid_args {
 public:

  PassengerService_findVehicleid_args() {
  }

  virtual ~PassengerService_findVehicleid_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Vehicle search;
  RowRange rowrange;

  _PassengerService_findVehicleid_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Vehicle& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findVehicleid_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicleid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicleid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findVehicleid_pargs {
 public:


  virtual ~PassengerService_findVehicleid_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Vehicle* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicleid_result__isset {
  _PassengerService_findVehicleid_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicleid_result__isset;

class PassengerService_findVehicleid_result {
 public:

  PassengerService_findVehicleid_result() {
  }

  virtual ~PassengerService_findVehicleid_result() throw() {}

  Vehicleids success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicleid_result__isset __isset;

  void __set_success(const Vehicleids& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findVehicleid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findVehicleid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findVehicleid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findVehicleid_presult__isset {
  _PassengerService_findVehicleid_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findVehicleid_presult__isset;

class PassengerService_findVehicleid_presult {
 public:


  virtual ~PassengerService_findVehicleid_presult() throw() {}

  Vehicleids* success;
  ServiceFailure servicefailure;

  _PassengerService_findVehicleid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addCity_args__isset {
  _PassengerService_addCity_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addCity_args__isset;

class PassengerService_addCity_args {
 public:

  PassengerService_addCity_args() {
  }

  virtual ~PassengerService_addCity_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  City value;

  _PassengerService_addCity_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const City& val) {
    value = val;
  }

  bool operator == (const PassengerService_addCity_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addCity_pargs {
 public:


  virtual ~PassengerService_addCity_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const City* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCity_result__isset {
  _PassengerService_addCity_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCity_result__isset;

class PassengerService_addCity_result {
 public:

  PassengerService_addCity_result() {
  }

  virtual ~PassengerService_addCity_result() throw() {}

  City success;
  ServiceFailure servicefailure;

  _PassengerService_addCity_result__isset __isset;

  void __set_success(const City& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addCity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCity_presult__isset {
  _PassengerService_addCity_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCity_presult__isset;

class PassengerService_addCity_presult {
 public:


  virtual ~PassengerService_addCity_presult() throw() {}

  City* success;
  ServiceFailure servicefailure;

  _PassengerService_addCity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addDictEntry_args__isset {
  _PassengerService_addDictEntry_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addDictEntry_args__isset;

class PassengerService_addDictEntry_args {
 public:

  PassengerService_addDictEntry_args() {
  }

  virtual ~PassengerService_addDictEntry_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DictEntry value;

  _PassengerService_addDictEntry_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const DictEntry& val) {
    value = val;
  }

  bool operator == (const PassengerService_addDictEntry_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDictEntry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDictEntry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addDictEntry_pargs {
 public:


  virtual ~PassengerService_addDictEntry_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DictEntry* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDictEntry_result__isset {
  _PassengerService_addDictEntry_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDictEntry_result__isset;

class PassengerService_addDictEntry_result {
 public:

  PassengerService_addDictEntry_result() {
  }

  virtual ~PassengerService_addDictEntry_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addDictEntry_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addDictEntry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDictEntry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDictEntry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDictEntry_presult__isset {
  _PassengerService_addDictEntry_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDictEntry_presult__isset;

class PassengerService_addDictEntry_presult {
 public:


  virtual ~PassengerService_addDictEntry_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addDictEntry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addBank_args__isset {
  _PassengerService_addBank_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addBank_args__isset;

class PassengerService_addBank_args {
 public:

  PassengerService_addBank_args() {
  }

  virtual ~PassengerService_addBank_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Bank value;

  _PassengerService_addBank_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Bank& val) {
    value = val;
  }

  bool operator == (const PassengerService_addBank_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addBank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addBank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addBank_pargs {
 public:


  virtual ~PassengerService_addBank_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Bank* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addBank_result__isset {
  _PassengerService_addBank_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addBank_result__isset;

class PassengerService_addBank_result {
 public:

  PassengerService_addBank_result() {
  }

  virtual ~PassengerService_addBank_result() throw() {}

  Bank success;
  ServiceFailure servicefailure;

  _PassengerService_addBank_result__isset __isset;

  void __set_success(const Bank& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addBank_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addBank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addBank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addBank_presult__isset {
  _PassengerService_addBank_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addBank_presult__isset;

class PassengerService_addBank_presult {
 public:


  virtual ~PassengerService_addBank_presult() throw() {}

  Bank* success;
  ServiceFailure servicefailure;

  _PassengerService_addBank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addOrg_args__isset {
  _PassengerService_addOrg_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addOrg_args__isset;

class PassengerService_addOrg_args {
 public:

  PassengerService_addOrg_args() {
  }

  virtual ~PassengerService_addOrg_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Org value;

  _PassengerService_addOrg_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Org& val) {
    value = val;
  }

  bool operator == (const PassengerService_addOrg_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addOrg_pargs {
 public:


  virtual ~PassengerService_addOrg_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Org* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrg_result__isset {
  _PassengerService_addOrg_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrg_result__isset;

class PassengerService_addOrg_result {
 public:

  PassengerService_addOrg_result() {
  }

  virtual ~PassengerService_addOrg_result() throw() {}

  Org success;
  ServiceFailure servicefailure;

  _PassengerService_addOrg_result__isset __isset;

  void __set_success(const Org& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addOrg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrg_presult__isset {
  _PassengerService_addOrg_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrg_presult__isset;

class PassengerService_addOrg_presult {
 public:


  virtual ~PassengerService_addOrg_presult() throw() {}

  Org* success;
  ServiceFailure servicefailure;

  _PassengerService_addOrg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addOrgService_args__isset {
  _PassengerService_addOrgService_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addOrgService_args__isset;

class PassengerService_addOrgService_args {
 public:

  PassengerService_addOrgService_args() {
  }

  virtual ~PassengerService_addOrgService_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  OrgService value;

  _PassengerService_addOrgService_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const OrgService& val) {
    value = val;
  }

  bool operator == (const PassengerService_addOrgService_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrgService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrgService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addOrgService_pargs {
 public:


  virtual ~PassengerService_addOrgService_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const OrgService* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrgService_result__isset {
  _PassengerService_addOrgService_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrgService_result__isset;

class PassengerService_addOrgService_result {
 public:

  PassengerService_addOrgService_result() {
  }

  virtual ~PassengerService_addOrgService_result() throw() {}

  OrgService success;
  ServiceFailure servicefailure;

  _PassengerService_addOrgService_result__isset __isset;

  void __set_success(const OrgService& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addOrgService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addOrgService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addOrgService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addOrgService_presult__isset {
  _PassengerService_addOrgService_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addOrgService_presult__isset;

class PassengerService_addOrgService_presult {
 public:


  virtual ~PassengerService_addOrgService_presult() throw() {}

  OrgService* success;
  ServiceFailure servicefailure;

  _PassengerService_addOrgService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addManager_args__isset {
  _PassengerService_addManager_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addManager_args__isset;

class PassengerService_addManager_args {
 public:

  PassengerService_addManager_args() {
  }

  virtual ~PassengerService_addManager_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Manager value;

  _PassengerService_addManager_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Manager& val) {
    value = val;
  }

  bool operator == (const PassengerService_addManager_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addManager_pargs {
 public:


  virtual ~PassengerService_addManager_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Manager* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addManager_result__isset {
  _PassengerService_addManager_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addManager_result__isset;

class PassengerService_addManager_result {
 public:

  PassengerService_addManager_result() {
  }

  virtual ~PassengerService_addManager_result() throw() {}

  Manager success;
  ServiceFailure servicefailure;

  _PassengerService_addManager_result__isset __isset;

  void __set_success(const Manager& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addManager_presult__isset {
  _PassengerService_addManager_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addManager_presult__isset;

class PassengerService_addManager_presult {
 public:


  virtual ~PassengerService_addManager_presult() throw() {}

  Manager* success;
  ServiceFailure servicefailure;

  _PassengerService_addManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addCustomer_args__isset {
  _PassengerService_addCustomer_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addCustomer_args__isset;

class PassengerService_addCustomer_args {
 public:

  PassengerService_addCustomer_args() {
  }

  virtual ~PassengerService_addCustomer_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Customer value;

  _PassengerService_addCustomer_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Customer& val) {
    value = val;
  }

  bool operator == (const PassengerService_addCustomer_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCustomer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCustomer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addCustomer_pargs {
 public:


  virtual ~PassengerService_addCustomer_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Customer* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCustomer_result__isset {
  _PassengerService_addCustomer_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCustomer_result__isset;

class PassengerService_addCustomer_result {
 public:

  PassengerService_addCustomer_result() {
  }

  virtual ~PassengerService_addCustomer_result() throw() {}

  Customer success;
  ServiceFailure servicefailure;

  _PassengerService_addCustomer_result__isset __isset;

  void __set_success(const Customer& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addCustomer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCustomer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCustomer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCustomer_presult__isset {
  _PassengerService_addCustomer_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCustomer_presult__isset;

class PassengerService_addCustomer_presult {
 public:


  virtual ~PassengerService_addCustomer_presult() throw() {}

  Customer* success;
  ServiceFailure servicefailure;

  _PassengerService_addCustomer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addPassenger_args__isset {
  _PassengerService_addPassenger_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addPassenger_args__isset;

class PassengerService_addPassenger_args {
 public:

  PassengerService_addPassenger_args() {
  }

  virtual ~PassengerService_addPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Passenger value;

  _PassengerService_addPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Passenger& val) {
    value = val;
  }

  bool operator == (const PassengerService_addPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addPassenger_pargs {
 public:


  virtual ~PassengerService_addPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Passenger* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addPassenger_result__isset {
  _PassengerService_addPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addPassenger_result__isset;

class PassengerService_addPassenger_result {
 public:

  PassengerService_addPassenger_result() {
  }

  virtual ~PassengerService_addPassenger_result() throw() {}

  Passenger success;
  ServiceFailure servicefailure;

  _PassengerService_addPassenger_result__isset __isset;

  void __set_success(const Passenger& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addPassenger_presult__isset {
  _PassengerService_addPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addPassenger_presult__isset;

class PassengerService_addPassenger_presult {
 public:


  virtual ~PassengerService_addPassenger_presult() throw() {}

  Passenger* success;
  ServiceFailure servicefailure;

  _PassengerService_addPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addDispatcher_args__isset {
  _PassengerService_addDispatcher_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addDispatcher_args__isset;

class PassengerService_addDispatcher_args {
 public:

  PassengerService_addDispatcher_args() {
  }

  virtual ~PassengerService_addDispatcher_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Dispatcher value;

  _PassengerService_addDispatcher_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Dispatcher& val) {
    value = val;
  }

  bool operator == (const PassengerService_addDispatcher_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDispatcher_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDispatcher_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addDispatcher_pargs {
 public:


  virtual ~PassengerService_addDispatcher_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Dispatcher* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDispatcher_result__isset {
  _PassengerService_addDispatcher_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDispatcher_result__isset;

class PassengerService_addDispatcher_result {
 public:

  PassengerService_addDispatcher_result() {
  }

  virtual ~PassengerService_addDispatcher_result() throw() {}

  Dispatcher success;
  ServiceFailure servicefailure;

  _PassengerService_addDispatcher_result__isset __isset;

  void __set_success(const Dispatcher& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addDispatcher_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDispatcher_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDispatcher_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDispatcher_presult__isset {
  _PassengerService_addDispatcher_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDispatcher_presult__isset;

class PassengerService_addDispatcher_presult {
 public:


  virtual ~PassengerService_addDispatcher_presult() throw() {}

  Dispatcher* success;
  ServiceFailure servicefailure;

  _PassengerService_addDispatcher_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addDriver_args__isset {
  _PassengerService_addDriver_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addDriver_args__isset;

class PassengerService_addDriver_args {
 public:

  PassengerService_addDriver_args() {
  }

  virtual ~PassengerService_addDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Driver value;

  _PassengerService_addDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Driver& val) {
    value = val;
  }

  bool operator == (const PassengerService_addDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addDriver_pargs {
 public:


  virtual ~PassengerService_addDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Driver* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDriver_result__isset {
  _PassengerService_addDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDriver_result__isset;

class PassengerService_addDriver_result {
 public:

  PassengerService_addDriver_result() {
  }

  virtual ~PassengerService_addDriver_result() throw() {}

  Driver success;
  ServiceFailure servicefailure;

  _PassengerService_addDriver_result__isset __isset;

  void __set_success(const Driver& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDriver_presult__isset {
  _PassengerService_addDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDriver_presult__isset;

class PassengerService_addDriver_presult {
 public:


  virtual ~PassengerService_addDriver_presult() throw() {}

  Driver* success;
  ServiceFailure servicefailure;

  _PassengerService_addDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicle_args__isset {
  _PassengerService_addVehicle_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addVehicle_args__isset;

class PassengerService_addVehicle_args {
 public:

  PassengerService_addVehicle_args() {
  }

  virtual ~PassengerService_addVehicle_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Vehicle value;

  _PassengerService_addVehicle_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Vehicle& val) {
    value = val;
  }

  bool operator == (const PassengerService_addVehicle_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicle_pargs {
 public:


  virtual ~PassengerService_addVehicle_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Vehicle* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicle_result__isset {
  _PassengerService_addVehicle_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicle_result__isset;

class PassengerService_addVehicle_result {
 public:

  PassengerService_addVehicle_result() {
  }

  virtual ~PassengerService_addVehicle_result() throw() {}

  Vehicle success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicle_result__isset __isset;

  void __set_success(const Vehicle& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicle_presult__isset {
  _PassengerService_addVehicle_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicle_presult__isset;

class PassengerService_addVehicle_presult {
 public:


  virtual ~PassengerService_addVehicle_presult() throw() {}

  Vehicle* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleColor_args__isset {
  _PassengerService_addVehicleColor_args__isset() : credentials(false), userdevice(false), name(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool value;
} _PassengerService_addVehicleColor_args__isset;

class PassengerService_addVehicleColor_args {
 public:

  PassengerService_addVehicleColor_args() : name(), value(0) {
  }

  virtual ~PassengerService_addVehicleColor_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  NUMBER32 value;

  _PassengerService_addVehicleColor_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_value(const NUMBER32 val) {
    value = val;
  }

  bool operator == (const PassengerService_addVehicleColor_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleColor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleColor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleColor_pargs {
 public:


  virtual ~PassengerService_addVehicleColor_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const NUMBER32* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleColor_result__isset {
  _PassengerService_addVehicleColor_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleColor_result__isset;

class PassengerService_addVehicleColor_result {
 public:

  PassengerService_addVehicleColor_result() {
  }

  virtual ~PassengerService_addVehicleColor_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleColor_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleColor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleColor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleColor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleColor_presult__isset {
  _PassengerService_addVehicleColor_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleColor_presult__isset;

class PassengerService_addVehicleColor_presult {
 public:


  virtual ~PassengerService_addVehicleColor_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleColor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleBrand_args__isset {
  _PassengerService_addVehicleBrand_args__isset() : credentials(false), userdevice(false), category(false), name(false) {}
  bool credentials;
  bool userdevice;
  bool category;
  bool name;
} _PassengerService_addVehicleBrand_args__isset;

class PassengerService_addVehicleBrand_args {
 public:

  PassengerService_addVehicleBrand_args() : category((VehicleCategory::type)0), name() {
  }

  virtual ~PassengerService_addVehicleBrand_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  VehicleCategory::type category;
  STR name;

  _PassengerService_addVehicleBrand_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_category(const VehicleCategory::type val) {
    category = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  bool operator == (const PassengerService_addVehicleBrand_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleBrand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleBrand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleBrand_pargs {
 public:


  virtual ~PassengerService_addVehicleBrand_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const VehicleCategory::type* category;
  const STR* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleBrand_result__isset {
  _PassengerService_addVehicleBrand_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleBrand_result__isset;

class PassengerService_addVehicleBrand_result {
 public:

  PassengerService_addVehicleBrand_result() {
  }

  virtual ~PassengerService_addVehicleBrand_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleBrand_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleBrand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleBrand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleBrand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleBrand_presult__isset {
  _PassengerService_addVehicleBrand_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleBrand_presult__isset;

class PassengerService_addVehicleBrand_presult {
 public:


  virtual ~PassengerService_addVehicleBrand_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleBrand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleModel_args__isset {
  _PassengerService_addVehicleModel_args__isset() : credentials(false), userdevice(false), brandid(false), name(false), year(false) {}
  bool credentials;
  bool userdevice;
  bool brandid;
  bool name;
  bool year;
} _PassengerService_addVehicleModel_args__isset;

class PassengerService_addVehicleModel_args {
 public:

  PassengerService_addVehicleModel_args() : brandid(0), name(), year(0) {
  }

  virtual ~PassengerService_addVehicleModel_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID brandid;
  STR name;
  NUMBER32 year;

  _PassengerService_addVehicleModel_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandid(const ID val) {
    brandid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_year(const NUMBER32 val) {
    year = val;
  }

  bool operator == (const PassengerService_addVehicleModel_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandid == rhs.brandid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(year == rhs.year))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleModel_pargs {
 public:


  virtual ~PassengerService_addVehicleModel_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* brandid;
  const STR* name;
  const NUMBER32* year;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModel_result__isset {
  _PassengerService_addVehicleModel_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModel_result__isset;

class PassengerService_addVehicleModel_result {
 public:

  PassengerService_addVehicleModel_result() {
  }

  virtual ~PassengerService_addVehicleModel_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModel_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModel_presult__isset {
  _PassengerService_addVehicleModel_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModel_presult__isset;

class PassengerService_addVehicleModel_presult {
 public:


  virtual ~PassengerService_addVehicleModel_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addVehicleModelByBrandName_args__isset {
  _PassengerService_addVehicleModelByBrandName_args__isset() : credentials(false), userdevice(false), brandname(false), name(false), year(false) {}
  bool credentials;
  bool userdevice;
  bool brandname;
  bool name;
  bool year;
} _PassengerService_addVehicleModelByBrandName_args__isset;

class PassengerService_addVehicleModelByBrandName_args {
 public:

  PassengerService_addVehicleModelByBrandName_args() : brandname(), name(), year(0) {
  }

  virtual ~PassengerService_addVehicleModelByBrandName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR brandname;
  STR name;
  NUMBER32 year;

  _PassengerService_addVehicleModelByBrandName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandname(const STR& val) {
    brandname = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_year(const NUMBER32 val) {
    year = val;
  }

  bool operator == (const PassengerService_addVehicleModelByBrandName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandname == rhs.brandname))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(year == rhs.year))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModelByBrandName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModelByBrandName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addVehicleModelByBrandName_pargs {
 public:


  virtual ~PassengerService_addVehicleModelByBrandName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* brandname;
  const STR* name;
  const NUMBER32* year;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModelByBrandName_result__isset {
  _PassengerService_addVehicleModelByBrandName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModelByBrandName_result__isset;

class PassengerService_addVehicleModelByBrandName_result {
 public:

  PassengerService_addVehicleModelByBrandName_result() {
  }

  virtual ~PassengerService_addVehicleModelByBrandName_result() throw() {}

  DictEntry success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModelByBrandName_result__isset __isset;

  void __set_success(const DictEntry& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addVehicleModelByBrandName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addVehicleModelByBrandName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addVehicleModelByBrandName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addVehicleModelByBrandName_presult__isset {
  _PassengerService_addVehicleModelByBrandName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addVehicleModelByBrandName_presult__isset;

class PassengerService_addVehicleModelByBrandName_presult {
 public:


  virtual ~PassengerService_addVehicleModelByBrandName_presult() throw() {}

  DictEntry* success;
  ServiceFailure servicefailure;

  _PassengerService_addVehicleModelByBrandName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addTariffPlan_args__isset {
  _PassengerService_addTariffPlan_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addTariffPlan_args__isset;

class PassengerService_addTariffPlan_args {
 public:

  PassengerService_addTariffPlan_args() {
  }

  virtual ~PassengerService_addTariffPlan_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  TariffPlan value;

  _PassengerService_addTariffPlan_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const TariffPlan& val) {
    value = val;
  }

  bool operator == (const PassengerService_addTariffPlan_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addTariffPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addTariffPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addTariffPlan_pargs {
 public:


  virtual ~PassengerService_addTariffPlan_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const TariffPlan* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addTariffPlan_result__isset {
  _PassengerService_addTariffPlan_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addTariffPlan_result__isset;

class PassengerService_addTariffPlan_result {
 public:

  PassengerService_addTariffPlan_result() {
  }

  virtual ~PassengerService_addTariffPlan_result() throw() {}

  TariffPlan success;
  ServiceFailure servicefailure;

  _PassengerService_addTariffPlan_result__isset __isset;

  void __set_success(const TariffPlan& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addTariffPlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addTariffPlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addTariffPlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addTariffPlan_presult__isset {
  _PassengerService_addTariffPlan_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addTariffPlan_presult__isset;

class PassengerService_addTariffPlan_presult {
 public:


  virtual ~PassengerService_addTariffPlan_presult() throw() {}

  TariffPlan* success;
  ServiceFailure servicefailure;

  _PassengerService_addTariffPlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addRate_args__isset {
  _PassengerService_addRate_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addRate_args__isset;

class PassengerService_addRate_args {
 public:

  PassengerService_addRate_args() {
  }

  virtual ~PassengerService_addRate_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Rate value;

  _PassengerService_addRate_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Rate& val) {
    value = val;
  }

  bool operator == (const PassengerService_addRate_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addRate_pargs {
 public:


  virtual ~PassengerService_addRate_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Rate* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addRate_result__isset {
  _PassengerService_addRate_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addRate_result__isset;

class PassengerService_addRate_result {
 public:

  PassengerService_addRate_result() {
  }

  virtual ~PassengerService_addRate_result() throw() {}

  Rate success;
  ServiceFailure servicefailure;

  _PassengerService_addRate_result__isset __isset;

  void __set_success(const Rate& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addRate_presult__isset {
  _PassengerService_addRate_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addRate_presult__isset;

class PassengerService_addRate_presult {
 public:


  virtual ~PassengerService_addRate_presult() throw() {}

  Rate* success;
  ServiceFailure servicefailure;

  _PassengerService_addRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addServiceOrder_args__isset {
  _PassengerService_addServiceOrder_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addServiceOrder_args__isset;

class PassengerService_addServiceOrder_args {
 public:

  PassengerService_addServiceOrder_args() {
  }

  virtual ~PassengerService_addServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrder value;

  _PassengerService_addServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const ServiceOrder& val) {
    value = val;
  }

  bool operator == (const PassengerService_addServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addServiceOrder_pargs {
 public:


  virtual ~PassengerService_addServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrder* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrder_result__isset {
  _PassengerService_addServiceOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrder_result__isset;

class PassengerService_addServiceOrder_result {
 public:

  PassengerService_addServiceOrder_result() {
  }

  virtual ~PassengerService_addServiceOrder_result() throw() {}

  ServiceOrder success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrder_result__isset __isset;

  void __set_success(const ServiceOrder& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addServiceOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrder_presult__isset {
  _PassengerService_addServiceOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrder_presult__isset;

class PassengerService_addServiceOrder_presult {
 public:


  virtual ~PassengerService_addServiceOrder_presult() throw() {}

  ServiceOrder* success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getServiceOrder_args__isset {
  _PassengerService_getServiceOrder_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_getServiceOrder_args__isset;

class PassengerService_getServiceOrder_args {
 public:

  PassengerService_getServiceOrder_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_getServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_getServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_getServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getServiceOrder_pargs {
 public:


  virtual ~PassengerService_getServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getServiceOrder_result__isset {
  _PassengerService_getServiceOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getServiceOrder_result__isset;

class PassengerService_getServiceOrder_result {
 public:

  PassengerService_getServiceOrder_result() {
  }

  virtual ~PassengerService_getServiceOrder_result() throw() {}

  ServiceOrder success;
  ServiceFailure servicefailure;

  _PassengerService_getServiceOrder_result__isset __isset;

  void __set_success(const ServiceOrder& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getServiceOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getServiceOrder_presult__isset {
  _PassengerService_getServiceOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getServiceOrder_presult__isset;

class PassengerService_getServiceOrder_presult {
 public:


  virtual ~PassengerService_getServiceOrder_presult() throw() {}

  ServiceOrder* success;
  ServiceFailure servicefailure;

  _PassengerService_getServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getPassenger_args__isset {
  _PassengerService_getPassenger_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getPassenger_args__isset;

class PassengerService_getPassenger_args {
 public:

  PassengerService_getPassenger_args() : id(0) {
  }

  virtual ~PassengerService_getPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getPassenger_pargs {
 public:


  virtual ~PassengerService_getPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getPassenger_result__isset {
  _PassengerService_getPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getPassenger_result__isset;

class PassengerService_getPassenger_result {
 public:

  PassengerService_getPassenger_result() {
  }

  virtual ~PassengerService_getPassenger_result() throw() {}

  Passenger success;
  ServiceFailure servicefailure;

  _PassengerService_getPassenger_result__isset __isset;

  void __set_success(const Passenger& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getPassenger_presult__isset {
  _PassengerService_getPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getPassenger_presult__isset;

class PassengerService_getPassenger_presult {
 public:


  virtual ~PassengerService_getPassenger_presult() throw() {}

  Passenger* success;
  ServiceFailure servicefailure;

  _PassengerService_getPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getCustomer_args__isset {
  _PassengerService_getCustomer_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getCustomer_args__isset;

class PassengerService_getCustomer_args {
 public:

  PassengerService_getCustomer_args() : id(0) {
  }

  virtual ~PassengerService_getCustomer_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getCustomer_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getCustomer_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getCustomer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getCustomer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getCustomer_pargs {
 public:


  virtual ~PassengerService_getCustomer_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getCustomer_result__isset {
  _PassengerService_getCustomer_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getCustomer_result__isset;

class PassengerService_getCustomer_result {
 public:

  PassengerService_getCustomer_result() {
  }

  virtual ~PassengerService_getCustomer_result() throw() {}

  Customer success;
  ServiceFailure servicefailure;

  _PassengerService_getCustomer_result__isset __isset;

  void __set_success(const Customer& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getCustomer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getCustomer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getCustomer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getCustomer_presult__isset {
  _PassengerService_getCustomer_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getCustomer_presult__isset;

class PassengerService_getCustomer_presult {
 public:


  virtual ~PassengerService_getCustomer_presult() throw() {}

  Customer* success;
  ServiceFailure servicefailure;

  _PassengerService_getCustomer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getDispatcher_args__isset {
  _PassengerService_getDispatcher_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getDispatcher_args__isset;

class PassengerService_getDispatcher_args {
 public:

  PassengerService_getDispatcher_args() : id(0) {
  }

  virtual ~PassengerService_getDispatcher_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getDispatcher_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getDispatcher_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDispatcher_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDispatcher_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDispatcher_pargs {
 public:


  virtual ~PassengerService_getDispatcher_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDispatcher_result__isset {
  _PassengerService_getDispatcher_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDispatcher_result__isset;

class PassengerService_getDispatcher_result {
 public:

  PassengerService_getDispatcher_result() {
  }

  virtual ~PassengerService_getDispatcher_result() throw() {}

  Dispatcher success;
  ServiceFailure servicefailure;

  _PassengerService_getDispatcher_result__isset __isset;

  void __set_success(const Dispatcher& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDispatcher_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDispatcher_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDispatcher_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDispatcher_presult__isset {
  _PassengerService_getDispatcher_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDispatcher_presult__isset;

class PassengerService_getDispatcher_presult {
 public:


  virtual ~PassengerService_getDispatcher_presult() throw() {}

  Dispatcher* success;
  ServiceFailure servicefailure;

  _PassengerService_getDispatcher_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getDriver_args__isset {
  _PassengerService_getDriver_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_getDriver_args__isset;

class PassengerService_getDriver_args {
 public:

  PassengerService_getDriver_args() : id(0) {
  }

  virtual ~PassengerService_getDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_getDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_getDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDriver_pargs {
 public:


  virtual ~PassengerService_getDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriver_result__isset {
  _PassengerService_getDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriver_result__isset;

class PassengerService_getDriver_result {
 public:

  PassengerService_getDriver_result() {
  }

  virtual ~PassengerService_getDriver_result() throw() {}

  Driver success;
  ServiceFailure servicefailure;

  _PassengerService_getDriver_result__isset __isset;

  void __set_success(const Driver& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriver_presult__isset {
  _PassengerService_getDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriver_presult__isset;

class PassengerService_getDriver_presult {
 public:


  virtual ~PassengerService_getDriver_presult() throw() {}

  Driver* success;
  ServiceFailure servicefailure;

  _PassengerService_getDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addServiceOrderDecline_args__isset {
  _PassengerService_addServiceOrderDecline_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addServiceOrderDecline_args__isset;

class PassengerService_addServiceOrderDecline_args {
 public:

  PassengerService_addServiceOrderDecline_args() {
  }

  virtual ~PassengerService_addServiceOrderDecline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrderDecline value;

  _PassengerService_addServiceOrderDecline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const ServiceOrderDecline& val) {
    value = val;
  }

  bool operator == (const PassengerService_addServiceOrderDecline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrderDecline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrderDecline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addServiceOrderDecline_pargs {
 public:


  virtual ~PassengerService_addServiceOrderDecline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrderDecline* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrderDecline_result__isset {
  _PassengerService_addServiceOrderDecline_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrderDecline_result__isset;

class PassengerService_addServiceOrderDecline_result {
 public:

  PassengerService_addServiceOrderDecline_result() {
  }

  virtual ~PassengerService_addServiceOrderDecline_result() throw() {}

  ServiceOrderDecline success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrderDecline_result__isset __isset;

  void __set_success(const ServiceOrderDecline& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addServiceOrderDecline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrderDecline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrderDecline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrderDecline_presult__isset {
  _PassengerService_addServiceOrderDecline_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrderDecline_presult__isset;

class PassengerService_addServiceOrderDecline_presult {
 public:


  virtual ~PassengerService_addServiceOrderDecline_presult() throw() {}

  ServiceOrderDecline* success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrderDecline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addClaim_args__isset {
  _PassengerService_addClaim_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addClaim_args__isset;

class PassengerService_addClaim_args {
 public:

  PassengerService_addClaim_args() {
  }

  virtual ~PassengerService_addClaim_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Claim value;

  _PassengerService_addClaim_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Claim& val) {
    value = val;
  }

  bool operator == (const PassengerService_addClaim_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addClaim_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addClaim_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addClaim_pargs {
 public:


  virtual ~PassengerService_addClaim_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Claim* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addClaim_result__isset {
  _PassengerService_addClaim_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addClaim_result__isset;

class PassengerService_addClaim_result {
 public:

  PassengerService_addClaim_result() {
  }

  virtual ~PassengerService_addClaim_result() throw() {}

  Claim success;
  ServiceFailure servicefailure;

  _PassengerService_addClaim_result__isset __isset;

  void __set_success(const Claim& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addClaim_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addClaim_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addClaim_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addClaim_presult__isset {
  _PassengerService_addClaim_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addClaim_presult__isset;

class PassengerService_addClaim_presult {
 public:


  virtual ~PassengerService_addClaim_presult() throw() {}

  Claim* success;
  ServiceFailure servicefailure;

  _PassengerService_addClaim_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addTrack_args__isset {
  _PassengerService_addTrack_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addTrack_args__isset;

class PassengerService_addTrack_args {
 public:

  PassengerService_addTrack_args() {
  }

  virtual ~PassengerService_addTrack_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Track value;

  _PassengerService_addTrack_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Track& val) {
    value = val;
  }

  bool operator == (const PassengerService_addTrack_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addTrack_pargs {
 public:


  virtual ~PassengerService_addTrack_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Track* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addTrack_result__isset {
  _PassengerService_addTrack_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addTrack_result__isset;

class PassengerService_addTrack_result {
 public:

  PassengerService_addTrack_result() {
  }

  virtual ~PassengerService_addTrack_result() throw() {}

  Track success;
  ServiceFailure servicefailure;

  _PassengerService_addTrack_result__isset __isset;

  void __set_success(const Track& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addTrack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addTrack_presult__isset {
  _PassengerService_addTrack_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addTrack_presult__isset;

class PassengerService_addTrack_presult {
 public:


  virtual ~PassengerService_addTrack_presult() throw() {}

  Track* success;
  ServiceFailure servicefailure;

  _PassengerService_addTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmCity_args__isset {
  _PassengerService_rmCity_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmCity_args__isset;

class PassengerService_rmCity_args {
 public:

  PassengerService_rmCity_args() : id(0) {
  }

  virtual ~PassengerService_rmCity_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmCity_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmCity_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmCity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmCity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmCity_pargs {
 public:


  virtual ~PassengerService_rmCity_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmCity_result__isset {
  _PassengerService_rmCity_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmCity_result__isset;

class PassengerService_rmCity_result {
 public:

  PassengerService_rmCity_result() {
  }

  virtual ~PassengerService_rmCity_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmCity_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmCity_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmCity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmCity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmCity_presult__isset {
  _PassengerService_rmCity_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmCity_presult__isset;

class PassengerService_rmCity_presult {
 public:


  virtual ~PassengerService_rmCity_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmCity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmVehicle_args__isset {
  _PassengerService_rmVehicle_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmVehicle_args__isset;

class PassengerService_rmVehicle_args {
 public:

  PassengerService_rmVehicle_args() : id(0) {
  }

  virtual ~PassengerService_rmVehicle_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmVehicle_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmVehicle_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmVehicle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmVehicle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmVehicle_pargs {
 public:


  virtual ~PassengerService_rmVehicle_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmVehicle_result__isset {
  _PassengerService_rmVehicle_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmVehicle_result__isset;

class PassengerService_rmVehicle_result {
 public:

  PassengerService_rmVehicle_result() {
  }

  virtual ~PassengerService_rmVehicle_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmVehicle_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmVehicle_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmVehicle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmVehicle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmVehicle_presult__isset {
  _PassengerService_rmVehicle_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmVehicle_presult__isset;

class PassengerService_rmVehicle_presult {
 public:


  virtual ~PassengerService_rmVehicle_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmVehicle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmManager_args__isset {
  _PassengerService_rmManager_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmManager_args__isset;

class PassengerService_rmManager_args {
 public:

  PassengerService_rmManager_args() : id(0) {
  }

  virtual ~PassengerService_rmManager_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmManager_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmManager_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmManager_pargs {
 public:


  virtual ~PassengerService_rmManager_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmManager_result__isset {
  _PassengerService_rmManager_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmManager_result__isset;

class PassengerService_rmManager_result {
 public:

  PassengerService_rmManager_result() {
  }

  virtual ~PassengerService_rmManager_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmManager_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmManager_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmManager_presult__isset {
  _PassengerService_rmManager_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmManager_presult__isset;

class PassengerService_rmManager_presult {
 public:


  virtual ~PassengerService_rmManager_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmTariffPlan_args__isset {
  _PassengerService_rmTariffPlan_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmTariffPlan_args__isset;

class PassengerService_rmTariffPlan_args {
 public:

  PassengerService_rmTariffPlan_args() : id(0) {
  }

  virtual ~PassengerService_rmTariffPlan_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmTariffPlan_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmTariffPlan_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmTariffPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmTariffPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmTariffPlan_pargs {
 public:


  virtual ~PassengerService_rmTariffPlan_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmTariffPlan_result__isset {
  _PassengerService_rmTariffPlan_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmTariffPlan_result__isset;

class PassengerService_rmTariffPlan_result {
 public:

  PassengerService_rmTariffPlan_result() {
  }

  virtual ~PassengerService_rmTariffPlan_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmTariffPlan_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmTariffPlan_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmTariffPlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmTariffPlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmTariffPlan_presult__isset {
  _PassengerService_rmTariffPlan_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmTariffPlan_presult__isset;

class PassengerService_rmTariffPlan_presult {
 public:


  virtual ~PassengerService_rmTariffPlan_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmTariffPlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmRate_args__isset {
  _PassengerService_rmRate_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmRate_args__isset;

class PassengerService_rmRate_args {
 public:

  PassengerService_rmRate_args() : id(0) {
  }

  virtual ~PassengerService_rmRate_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmRate_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmRate_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmRate_pargs {
 public:


  virtual ~PassengerService_rmRate_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmRate_result__isset {
  _PassengerService_rmRate_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmRate_result__isset;

class PassengerService_rmRate_result {
 public:

  PassengerService_rmRate_result() {
  }

  virtual ~PassengerService_rmRate_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmRate_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmRate_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmRate_presult__isset {
  _PassengerService_rmRate_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmRate_presult__isset;

class PassengerService_rmRate_presult {
 public:


  virtual ~PassengerService_rmRate_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmServiceOrder_args__isset {
  _PassengerService_rmServiceOrder_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmServiceOrder_args__isset;

class PassengerService_rmServiceOrder_args {
 public:

  PassengerService_rmServiceOrder_args() : id(0) {
  }

  virtual ~PassengerService_rmServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmServiceOrder_pargs {
 public:


  virtual ~PassengerService_rmServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrder_result__isset {
  _PassengerService_rmServiceOrder_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrder_result__isset;

class PassengerService_rmServiceOrder_result {
 public:

  PassengerService_rmServiceOrder_result() {
  }

  virtual ~PassengerService_rmServiceOrder_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrder_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmServiceOrder_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrder_presult__isset {
  _PassengerService_rmServiceOrder_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrder_presult__isset;

class PassengerService_rmServiceOrder_presult {
 public:


  virtual ~PassengerService_rmServiceOrder_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmServiceOrderDecline_args__isset {
  _PassengerService_rmServiceOrderDecline_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmServiceOrderDecline_args__isset;

class PassengerService_rmServiceOrderDecline_args {
 public:

  PassengerService_rmServiceOrderDecline_args() : id(0) {
  }

  virtual ~PassengerService_rmServiceOrderDecline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmServiceOrderDecline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmServiceOrderDecline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrderDecline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrderDecline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmServiceOrderDecline_pargs {
 public:


  virtual ~PassengerService_rmServiceOrderDecline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrderDecline_result__isset {
  _PassengerService_rmServiceOrderDecline_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrderDecline_result__isset;

class PassengerService_rmServiceOrderDecline_result {
 public:

  PassengerService_rmServiceOrderDecline_result() {
  }

  virtual ~PassengerService_rmServiceOrderDecline_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrderDecline_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmServiceOrderDecline_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrderDecline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrderDecline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrderDecline_presult__isset {
  _PassengerService_rmServiceOrderDecline_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrderDecline_presult__isset;

class PassengerService_rmServiceOrderDecline_presult {
 public:


  virtual ~PassengerService_rmServiceOrderDecline_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrderDecline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmClaim_args__isset {
  _PassengerService_rmClaim_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmClaim_args__isset;

class PassengerService_rmClaim_args {
 public:

  PassengerService_rmClaim_args() : id(0) {
  }

  virtual ~PassengerService_rmClaim_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmClaim_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmClaim_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmClaim_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmClaim_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmClaim_pargs {
 public:


  virtual ~PassengerService_rmClaim_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmClaim_result__isset {
  _PassengerService_rmClaim_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmClaim_result__isset;

class PassengerService_rmClaim_result {
 public:

  PassengerService_rmClaim_result() {
  }

  virtual ~PassengerService_rmClaim_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmClaim_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmClaim_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmClaim_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmClaim_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmClaim_presult__isset {
  _PassengerService_rmClaim_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmClaim_presult__isset;

class PassengerService_rmClaim_presult {
 public:


  virtual ~PassengerService_rmClaim_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmClaim_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmTrack_args__isset {
  _PassengerService_rmTrack_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmTrack_args__isset;

class PassengerService_rmTrack_args {
 public:

  PassengerService_rmTrack_args() : id(0) {
  }

  virtual ~PassengerService_rmTrack_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmTrack_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmTrack_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmTrack_pargs {
 public:


  virtual ~PassengerService_rmTrack_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmTrack_result__isset {
  _PassengerService_rmTrack_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmTrack_result__isset;

class PassengerService_rmTrack_result {
 public:

  PassengerService_rmTrack_result() {
  }

  virtual ~PassengerService_rmTrack_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmTrack_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmTrack_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmTrack_presult__isset {
  _PassengerService_rmTrack_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmTrack_presult__isset;

class PassengerService_rmTrack_presult {
 public:


  virtual ~PassengerService_rmTrack_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmOldTracks_args__isset {
  _PassengerService_rmOldTracks_args__isset() : credentials(false), userdevice(false), olderthan(false) {}
  bool credentials;
  bool userdevice;
  bool olderthan;
} _PassengerService_rmOldTracks_args__isset;

class PassengerService_rmOldTracks_args {
 public:

  PassengerService_rmOldTracks_args() : olderthan(0) {
  }

  virtual ~PassengerService_rmOldTracks_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DATE olderthan;

  _PassengerService_rmOldTracks_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_olderthan(const DATE val) {
    olderthan = val;
  }

  bool operator == (const PassengerService_rmOldTracks_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(olderthan == rhs.olderthan))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmOldTracks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmOldTracks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmOldTracks_pargs {
 public:


  virtual ~PassengerService_rmOldTracks_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DATE* olderthan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmOldTracks_result__isset {
  _PassengerService_rmOldTracks_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmOldTracks_result__isset;

class PassengerService_rmOldTracks_result {
 public:

  PassengerService_rmOldTracks_result() {
  }

  virtual ~PassengerService_rmOldTracks_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmOldTracks_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmOldTracks_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmOldTracks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmOldTracks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmOldTracks_presult__isset {
  _PassengerService_rmOldTracks_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmOldTracks_presult__isset;

class PassengerService_rmOldTracks_presult {
 public:


  virtual ~PassengerService_rmOldTracks_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmOldTracks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findOrg_args__isset {
  _PassengerService_findOrg_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findOrg_args__isset;

class PassengerService_findOrg_args {
 public:

  PassengerService_findOrg_args() {
  }

  virtual ~PassengerService_findOrg_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Org search;
  RowRange rowrange;

  _PassengerService_findOrg_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Org& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findOrg_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findOrg_pargs {
 public:


  virtual ~PassengerService_findOrg_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Org* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrg_result__isset {
  _PassengerService_findOrg_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrg_result__isset;

class PassengerService_findOrg_result {
 public:

  PassengerService_findOrg_result() {
  }

  virtual ~PassengerService_findOrg_result() throw() {}

  Orgs success;
  ServiceFailure servicefailure;

  _PassengerService_findOrg_result__isset __isset;

  void __set_success(const Orgs& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findOrg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrg_presult__isset {
  _PassengerService_findOrg_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrg_presult__isset;

class PassengerService_findOrg_presult {
 public:


  virtual ~PassengerService_findOrg_presult() throw() {}

  Orgs* success;
  ServiceFailure servicefailure;

  _PassengerService_findOrg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findOrgByName_args__isset {
  _PassengerService_findOrgByName_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findOrgByName_args__isset;

class PassengerService_findOrgByName_args {
 public:

  PassengerService_findOrgByName_args() : name() {
  }

  virtual ~PassengerService_findOrgByName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findOrgByName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findOrgByName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findOrgByName_pargs {
 public:


  virtual ~PassengerService_findOrgByName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgByName_result__isset {
  _PassengerService_findOrgByName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgByName_result__isset;

class PassengerService_findOrgByName_result {
 public:

  PassengerService_findOrgByName_result() {
  }

  virtual ~PassengerService_findOrgByName_result() throw() {}

  Orgs success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgByName_result__isset __isset;

  void __set_success(const Orgs& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findOrgByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findOrgByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findOrgByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findOrgByName_presult__isset {
  _PassengerService_findOrgByName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findOrgByName_presult__isset;

class PassengerService_findOrgByName_presult {
 public:


  virtual ~PassengerService_findOrgByName_presult() throw() {}

  Orgs* success;
  ServiceFailure servicefailure;

  _PassengerService_findOrgByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findColor_args__isset {
  _PassengerService_findColor_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findColor_args__isset;

class PassengerService_findColor_args {
 public:

  PassengerService_findColor_args() : name() {
  }

  virtual ~PassengerService_findColor_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findColor_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findColor_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findColor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findColor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findColor_pargs {
 public:


  virtual ~PassengerService_findColor_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findColor_result__isset {
  _PassengerService_findColor_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findColor_result__isset;

class PassengerService_findColor_result {
 public:

  PassengerService_findColor_result() {
  }

  virtual ~PassengerService_findColor_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findColor_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findColor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findColor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findColor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findColor_presult__isset {
  _PassengerService_findColor_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findColor_presult__isset;

class PassengerService_findColor_presult {
 public:


  virtual ~PassengerService_findColor_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findColor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBrand_args__isset {
  _PassengerService_findBrand_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findBrand_args__isset;

class PassengerService_findBrand_args {
 public:

  PassengerService_findBrand_args() : name() {
  }

  virtual ~PassengerService_findBrand_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findBrand_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBrand_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBrand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBrand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBrand_pargs {
 public:


  virtual ~PassengerService_findBrand_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBrand_result__isset {
  _PassengerService_findBrand_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBrand_result__isset;

class PassengerService_findBrand_result {
 public:

  PassengerService_findBrand_result() {
  }

  virtual ~PassengerService_findBrand_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findBrand_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBrand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBrand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBrand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBrand_presult__isset {
  _PassengerService_findBrand_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBrand_presult__isset;

class PassengerService_findBrand_presult {
 public:


  virtual ~PassengerService_findBrand_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findBrand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findModel_args__isset {
  _PassengerService_findModel_args__isset() : credentials(false), userdevice(false), brandid(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool brandid;
  bool name;
  bool rowrange;
} _PassengerService_findModel_args__isset;

class PassengerService_findModel_args {
 public:

  PassengerService_findModel_args() : brandid(0), name() {
  }

  virtual ~PassengerService_findModel_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID brandid;
  STR name;
  RowRange rowrange;

  _PassengerService_findModel_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandid(const ID val) {
    brandid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findModel_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandid == rhs.brandid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findModel_pargs {
 public:


  virtual ~PassengerService_findModel_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* brandid;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModel_result__isset {
  _PassengerService_findModel_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModel_result__isset;

class PassengerService_findModel_result {
 public:

  PassengerService_findModel_result() {
  }

  virtual ~PassengerService_findModel_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findModel_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findModel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModel_presult__isset {
  _PassengerService_findModel_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModel_presult__isset;

class PassengerService_findModel_presult {
 public:


  virtual ~PassengerService_findModel_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findModel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findModelByBrandName_args__isset {
  _PassengerService_findModelByBrandName_args__isset() : credentials(false), userdevice(false), brandname(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool brandname;
  bool name;
  bool rowrange;
} _PassengerService_findModelByBrandName_args__isset;

class PassengerService_findModelByBrandName_args {
 public:

  PassengerService_findModelByBrandName_args() : brandname(), name() {
  }

  virtual ~PassengerService_findModelByBrandName_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR brandname;
  STR name;
  RowRange rowrange;

  _PassengerService_findModelByBrandName_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_brandname(const STR& val) {
    brandname = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findModelByBrandName_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(brandname == rhs.brandname))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModelByBrandName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModelByBrandName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findModelByBrandName_pargs {
 public:


  virtual ~PassengerService_findModelByBrandName_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* brandname;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModelByBrandName_result__isset {
  _PassengerService_findModelByBrandName_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModelByBrandName_result__isset;

class PassengerService_findModelByBrandName_result {
 public:

  PassengerService_findModelByBrandName_result() {
  }

  virtual ~PassengerService_findModelByBrandName_result() throw() {}

  DictEntries success;
  ServiceFailure servicefailure;

  _PassengerService_findModelByBrandName_result__isset __isset;

  void __set_success(const DictEntries& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findModelByBrandName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findModelByBrandName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findModelByBrandName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findModelByBrandName_presult__isset {
  _PassengerService_findModelByBrandName_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findModelByBrandName_presult__isset;

class PassengerService_findModelByBrandName_presult {
 public:


  virtual ~PassengerService_findModelByBrandName_presult() throw() {}

  DictEntries* success;
  ServiceFailure servicefailure;

  _PassengerService_findModelByBrandName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findCity_args__isset {
  _PassengerService_findCity_args__isset() : credentials(false), userdevice(false), name(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool name;
  bool rowrange;
} _PassengerService_findCity_args__isset;

class PassengerService_findCity_args {
 public:

  PassengerService_findCity_args() : name() {
  }

  virtual ~PassengerService_findCity_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  STR name;
  RowRange rowrange;

  _PassengerService_findCity_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findCity_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findCity_pargs {
 public:


  virtual ~PassengerService_findCity_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const STR* name;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCity_result__isset {
  _PassengerService_findCity_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCity_result__isset;

class PassengerService_findCity_result {
 public:

  PassengerService_findCity_result() {
  }

  virtual ~PassengerService_findCity_result() throw() {}

  Cities success;
  ServiceFailure servicefailure;

  _PassengerService_findCity_result__isset __isset;

  void __set_success(const Cities& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findCity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCity_presult__isset {
  _PassengerService_findCity_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCity_presult__isset;

class PassengerService_findCity_presult {
 public:


  virtual ~PassengerService_findCity_presult() throw() {}

  Cities* success;
  ServiceFailure servicefailure;

  _PassengerService_findCity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findManager_args__isset {
  _PassengerService_findManager_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findManager_args__isset;

class PassengerService_findManager_args {
 public:

  PassengerService_findManager_args() {
  }

  virtual ~PassengerService_findManager_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Manager search;
  RowRange rowrange;

  _PassengerService_findManager_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Manager& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findManager_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findManager_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findManager_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findManager_pargs {
 public:


  virtual ~PassengerService_findManager_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Manager* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findManager_result__isset {
  _PassengerService_findManager_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findManager_result__isset;

class PassengerService_findManager_result {
 public:

  PassengerService_findManager_result() {
  }

  virtual ~PassengerService_findManager_result() throw() {}

  Managers success;
  ServiceFailure servicefailure;

  _PassengerService_findManager_result__isset __isset;

  void __set_success(const Managers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findManager_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findManager_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findManager_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findManager_presult__isset {
  _PassengerService_findManager_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findManager_presult__isset;

class PassengerService_findManager_presult {
 public:


  virtual ~PassengerService_findManager_presult() throw() {}

  Managers* success;
  ServiceFailure servicefailure;

  _PassengerService_findManager_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDriver_args__isset {
  _PassengerService_findDriver_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDriver_args__isset;

class PassengerService_findDriver_args {
 public:

  PassengerService_findDriver_args() {
  }

  virtual ~PassengerService_findDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Driver search;
  RowRange rowrange;

  _PassengerService_findDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Driver& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDriver_pargs {
 public:


  virtual ~PassengerService_findDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Driver* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDriver_result__isset {
  _PassengerService_findDriver_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDriver_result__isset;

class PassengerService_findDriver_result {
 public:

  PassengerService_findDriver_result() {
  }

  virtual ~PassengerService_findDriver_result() throw() {}

  Drivers success;
  ServiceFailure servicefailure;

  _PassengerService_findDriver_result__isset __isset;

  void __set_success(const Drivers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDriver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDriver_presult__isset {
  _PassengerService_findDriver_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDriver_presult__isset;

class PassengerService_findDriver_presult {
 public:


  virtual ~PassengerService_findDriver_presult() throw() {}

  Drivers* success;
  ServiceFailure servicefailure;

  _PassengerService_findDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getDriverOnlineAvailable_args__isset {
  _PassengerService_getDriverOnlineAvailable_args__isset() : credentials(false), userdevice(false), cityid(false) {}
  bool credentials;
  bool userdevice;
  bool cityid;
} _PassengerService_getDriverOnlineAvailable_args__isset;

class PassengerService_getDriverOnlineAvailable_args {
 public:

  PassengerService_getDriverOnlineAvailable_args() : cityid(0) {
  }

  virtual ~PassengerService_getDriverOnlineAvailable_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Cityid cityid;

  _PassengerService_getDriverOnlineAvailable_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_cityid(const Cityid val) {
    cityid = val;
  }

  bool operator == (const PassengerService_getDriverOnlineAvailable_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriverOnlineAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriverOnlineAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDriverOnlineAvailable_pargs {
 public:


  virtual ~PassengerService_getDriverOnlineAvailable_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Cityid* cityid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriverOnlineAvailable_result__isset {
  _PassengerService_getDriverOnlineAvailable_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriverOnlineAvailable_result__isset;

class PassengerService_getDriverOnlineAvailable_result {
 public:

  PassengerService_getDriverOnlineAvailable_result() {
  }

  virtual ~PassengerService_getDriverOnlineAvailable_result() throw() {}

  DriverOnlineMap success;
  ServiceFailure servicefailure;

  _PassengerService_getDriverOnlineAvailable_result__isset __isset;

  void __set_success(const DriverOnlineMap& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDriverOnlineAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriverOnlineAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriverOnlineAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriverOnlineAvailable_presult__isset {
  _PassengerService_getDriverOnlineAvailable_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriverOnlineAvailable_presult__isset;

class PassengerService_getDriverOnlineAvailable_presult {
 public:


  virtual ~PassengerService_getDriverOnlineAvailable_presult() throw() {}

  DriverOnlineMap* success;
  ServiceFailure servicefailure;

  _PassengerService_getDriverOnlineAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getDriverAvailable_args__isset {
  _PassengerService_getDriverAvailable_args__isset() : credentials(false), userdevice(false), cityid(false) {}
  bool credentials;
  bool userdevice;
  bool cityid;
} _PassengerService_getDriverAvailable_args__isset;

class PassengerService_getDriverAvailable_args {
 public:

  PassengerService_getDriverAvailable_args() : cityid(0) {
  }

  virtual ~PassengerService_getDriverAvailable_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Cityid cityid;

  _PassengerService_getDriverAvailable_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_cityid(const Cityid val) {
    cityid = val;
  }

  bool operator == (const PassengerService_getDriverAvailable_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriverAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriverAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDriverAvailable_pargs {
 public:


  virtual ~PassengerService_getDriverAvailable_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Cityid* cityid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriverAvailable_result__isset {
  _PassengerService_getDriverAvailable_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriverAvailable_result__isset;

class PassengerService_getDriverAvailable_result {
 public:

  PassengerService_getDriverAvailable_result() {
  }

  virtual ~PassengerService_getDriverAvailable_result() throw() {}

  Drivers success;
  ServiceFailure servicefailure;

  _PassengerService_getDriverAvailable_result__isset __isset;

  void __set_success(const Drivers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDriverAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriverAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriverAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriverAvailable_presult__isset {
  _PassengerService_getDriverAvailable_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriverAvailable_presult__isset;

class PassengerService_getDriverAvailable_presult {
 public:


  virtual ~PassengerService_getDriverAvailable_presult() throw() {}

  Drivers* success;
  ServiceFailure servicefailure;

  _PassengerService_getDriverAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findCustomer_args__isset {
  _PassengerService_findCustomer_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findCustomer_args__isset;

class PassengerService_findCustomer_args {
 public:

  PassengerService_findCustomer_args() {
  }

  virtual ~PassengerService_findCustomer_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Customer search;
  RowRange rowrange;

  _PassengerService_findCustomer_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Customer& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findCustomer_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCustomer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCustomer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findCustomer_pargs {
 public:


  virtual ~PassengerService_findCustomer_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Customer* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCustomer_result__isset {
  _PassengerService_findCustomer_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCustomer_result__isset;

class PassengerService_findCustomer_result {
 public:

  PassengerService_findCustomer_result() {
  }

  virtual ~PassengerService_findCustomer_result() throw() {}

  Customers success;
  ServiceFailure servicefailure;

  _PassengerService_findCustomer_result__isset __isset;

  void __set_success(const Customers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findCustomer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCustomer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCustomer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCustomer_presult__isset {
  _PassengerService_findCustomer_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCustomer_presult__isset;

class PassengerService_findCustomer_presult {
 public:


  virtual ~PassengerService_findCustomer_presult() throw() {}

  Customers* success;
  ServiceFailure servicefailure;

  _PassengerService_findCustomer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findPassenger_args__isset {
  _PassengerService_findPassenger_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findPassenger_args__isset;

class PassengerService_findPassenger_args {
 public:

  PassengerService_findPassenger_args() {
  }

  virtual ~PassengerService_findPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Passenger search;
  RowRange rowrange;

  _PassengerService_findPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Passenger& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findPassenger_pargs {
 public:


  virtual ~PassengerService_findPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Passenger* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findPassenger_result__isset {
  _PassengerService_findPassenger_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findPassenger_result__isset;

class PassengerService_findPassenger_result {
 public:

  PassengerService_findPassenger_result() {
  }

  virtual ~PassengerService_findPassenger_result() throw() {}

  Passengers success;
  ServiceFailure servicefailure;

  _PassengerService_findPassenger_result__isset __isset;

  void __set_success(const Passengers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findPassenger_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findPassenger_presult__isset {
  _PassengerService_findPassenger_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findPassenger_presult__isset;

class PassengerService_findPassenger_presult {
 public:


  virtual ~PassengerService_findPassenger_presult() throw() {}

  Passengers* success;
  ServiceFailure servicefailure;

  _PassengerService_findPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findTariffPlan_args__isset {
  _PassengerService_findTariffPlan_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findTariffPlan_args__isset;

class PassengerService_findTariffPlan_args {
 public:

  PassengerService_findTariffPlan_args() {
  }

  virtual ~PassengerService_findTariffPlan_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  TariffPlan search;
  RowRange rowrange;

  _PassengerService_findTariffPlan_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const TariffPlan& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findTariffPlan_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findTariffPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findTariffPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findTariffPlan_pargs {
 public:


  virtual ~PassengerService_findTariffPlan_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const TariffPlan* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findTariffPlan_result__isset {
  _PassengerService_findTariffPlan_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findTariffPlan_result__isset;

class PassengerService_findTariffPlan_result {
 public:

  PassengerService_findTariffPlan_result() {
  }

  virtual ~PassengerService_findTariffPlan_result() throw() {}

  TariffPlans success;
  ServiceFailure servicefailure;

  _PassengerService_findTariffPlan_result__isset __isset;

  void __set_success(const TariffPlans& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findTariffPlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findTariffPlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findTariffPlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findTariffPlan_presult__isset {
  _PassengerService_findTariffPlan_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findTariffPlan_presult__isset;

class PassengerService_findTariffPlan_presult {
 public:


  virtual ~PassengerService_findTariffPlan_presult() throw() {}

  TariffPlans* success;
  ServiceFailure servicefailure;

  _PassengerService_findTariffPlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findRate_args__isset {
  _PassengerService_findRate_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findRate_args__isset;

class PassengerService_findRate_args {
 public:

  PassengerService_findRate_args() {
  }

  virtual ~PassengerService_findRate_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Rate search;
  RowRange rowrange;

  _PassengerService_findRate_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Rate& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findRate_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findRate_pargs {
 public:


  virtual ~PassengerService_findRate_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Rate* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findRate_result__isset {
  _PassengerService_findRate_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findRate_result__isset;

class PassengerService_findRate_result {
 public:

  PassengerService_findRate_result() {
  }

  virtual ~PassengerService_findRate_result() throw() {}

  Rates success;
  ServiceFailure servicefailure;

  _PassengerService_findRate_result__isset __isset;

  void __set_success(const Rates& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findRate_presult__isset {
  _PassengerService_findRate_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findRate_presult__isset;

class PassengerService_findRate_presult {
 public:


  virtual ~PassengerService_findRate_presult() throw() {}

  Rates* success;
  ServiceFailure servicefailure;

  _PassengerService_findRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findServiceOrder_args__isset {
  _PassengerService_findServiceOrder_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findServiceOrder_args__isset;

class PassengerService_findServiceOrder_args {
 public:

  PassengerService_findServiceOrder_args() {
  }

  virtual ~PassengerService_findServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrder search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const ServiceOrder& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findServiceOrder_pargs {
 public:


  virtual ~PassengerService_findServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrder* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrder_result__isset {
  _PassengerService_findServiceOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrder_result__isset;

class PassengerService_findServiceOrder_result {
 public:

  PassengerService_findServiceOrder_result() {
  }

  virtual ~PassengerService_findServiceOrder_result() throw() {}

  ServiceOrders success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrder_result__isset __isset;

  void __set_success(const ServiceOrders& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findServiceOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrder_presult__isset {
  _PassengerService_findServiceOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrder_presult__isset;

class PassengerService_findServiceOrder_presult {
 public:


  virtual ~PassengerService_findServiceOrder_presult() throw() {}

  ServiceOrders* success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findServiceOrderDecline_args__isset {
  _PassengerService_findServiceOrderDecline_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findServiceOrderDecline_args__isset;

class PassengerService_findServiceOrderDecline_args {
 public:

  PassengerService_findServiceOrderDecline_args() {
  }

  virtual ~PassengerService_findServiceOrderDecline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrderDecline search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findServiceOrderDecline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const ServiceOrderDecline& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findServiceOrderDecline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrderDecline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrderDecline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findServiceOrderDecline_pargs {
 public:


  virtual ~PassengerService_findServiceOrderDecline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrderDecline* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrderDecline_result__isset {
  _PassengerService_findServiceOrderDecline_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrderDecline_result__isset;

class PassengerService_findServiceOrderDecline_result {
 public:

  PassengerService_findServiceOrderDecline_result() {
  }

  virtual ~PassengerService_findServiceOrderDecline_result() throw() {}

  ServiceOrderDeclines success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrderDecline_result__isset __isset;

  void __set_success(const ServiceOrderDeclines& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findServiceOrderDecline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrderDecline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrderDecline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrderDecline_presult__isset {
  _PassengerService_findServiceOrderDecline_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrderDecline_presult__isset;

class PassengerService_findServiceOrderDecline_presult {
 public:


  virtual ~PassengerService_findServiceOrderDecline_presult() throw() {}

  ServiceOrderDeclines* success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrderDecline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findClaim_args__isset {
  _PassengerService_findClaim_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findClaim_args__isset;

class PassengerService_findClaim_args {
 public:

  PassengerService_findClaim_args() {
  }

  virtual ~PassengerService_findClaim_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Claim search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findClaim_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Claim& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findClaim_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findClaim_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findClaim_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findClaim_pargs {
 public:


  virtual ~PassengerService_findClaim_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Claim* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findClaim_result__isset {
  _PassengerService_findClaim_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findClaim_result__isset;

class PassengerService_findClaim_result {
 public:

  PassengerService_findClaim_result() {
  }

  virtual ~PassengerService_findClaim_result() throw() {}

  Claims success;
  ServiceFailure servicefailure;

  _PassengerService_findClaim_result__isset __isset;

  void __set_success(const Claims& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findClaim_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findClaim_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findClaim_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findClaim_presult__isset {
  _PassengerService_findClaim_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findClaim_presult__isset;

class PassengerService_findClaim_presult {
 public:


  virtual ~PassengerService_findClaim_presult() throw() {}

  Claims* success;
  ServiceFailure servicefailure;

  _PassengerService_findClaim_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findTrack_args__isset {
  _PassengerService_findTrack_args__isset() : credentials(false), userdevice(false), search(false), sheduletime(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool sheduletime;
  bool rowrange;
} _PassengerService_findTrack_args__isset;

class PassengerService_findTrack_args {
 public:

  PassengerService_findTrack_args() {
  }

  virtual ~PassengerService_findTrack_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Track search;
  DateRange sheduletime;
  RowRange rowrange;

  _PassengerService_findTrack_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Track& val) {
    search = val;
  }

  void __set_sheduletime(const DateRange& val) {
    sheduletime = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findTrack_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findTrack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findTrack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findTrack_pargs {
 public:


  virtual ~PassengerService_findTrack_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Track* search;
  const DateRange* sheduletime;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findTrack_result__isset {
  _PassengerService_findTrack_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findTrack_result__isset;

class PassengerService_findTrack_result {
 public:

  PassengerService_findTrack_result() {
  }

  virtual ~PassengerService_findTrack_result() throw() {}

  Tracks success;
  ServiceFailure servicefailure;

  _PassengerService_findTrack_result__isset __isset;

  void __set_success(const Tracks& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findTrack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findTrack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findTrack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findTrack_presult__isset {
  _PassengerService_findTrack_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findTrack_presult__isset;

class PassengerService_findTrack_presult {
 public:


  virtual ~PassengerService_findTrack_presult() throw() {}

  Tracks* success;
  ServiceFailure servicefailure;

  _PassengerService_findTrack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getEvents_args__isset {
  _PassengerService_getEvents_args__isset() : credentials(false), userdevice(false), startId(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool startId;
  bool rowrange;
} _PassengerService_getEvents_args__isset;

class PassengerService_getEvents_args {
 public:

  PassengerService_getEvents_args() : startId(0) {
  }

  virtual ~PassengerService_getEvents_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID startId;
  RowRange rowrange;

  _PassengerService_getEvents_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_startId(const ID val) {
    startId = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_getEvents_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(startId == rhs.startId))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getEvents_pargs {
 public:


  virtual ~PassengerService_getEvents_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* startId;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getEvents_result__isset {
  _PassengerService_getEvents_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getEvents_result__isset;

class PassengerService_getEvents_result {
 public:

  PassengerService_getEvents_result() {
  }

  virtual ~PassengerService_getEvents_result() throw() {}

  NotificationEvents success;
  ServiceFailure servicefailure;

  _PassengerService_getEvents_result__isset __isset;

  void __set_success(const NotificationEvents& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getEvents_presult__isset {
  _PassengerService_getEvents_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getEvents_presult__isset;

class PassengerService_getEvents_presult {
 public:


  virtual ~PassengerService_getEvents_presult() throw() {}

  NotificationEvents* success;
  ServiceFailure servicefailure;

  _PassengerService_getEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getOnline_args__isset {
  _PassengerService_getOnline_args__isset() : credentials(false), userdevice(false) {}
  bool credentials;
  bool userdevice;
} _PassengerService_getOnline_args__isset;

class PassengerService_getOnline_args {
 public:

  PassengerService_getOnline_args() {
  }

  virtual ~PassengerService_getOnline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;

  _PassengerService_getOnline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  bool operator == (const PassengerService_getOnline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getOnline_pargs {
 public:


  virtual ~PassengerService_getOnline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getOnline_result__isset {
  _PassengerService_getOnline_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getOnline_result__isset;

class PassengerService_getOnline_result {
 public:

  PassengerService_getOnline_result() : success(0) {
  }

  virtual ~PassengerService_getOnline_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_getOnline_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getOnline_presult__isset {
  _PassengerService_getOnline_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getOnline_presult__isset;

class PassengerService_getOnline_presult {
 public:


  virtual ~PassengerService_getOnline_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_getOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_setOnline_args__isset {
  _PassengerService_setOnline_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_setOnline_args__isset;

class PassengerService_setOnline_args {
 public:

  PassengerService_setOnline_args() : value(0) {
  }

  virtual ~PassengerService_setOnline_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  bool value;

  _PassengerService_setOnline_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const bool val) {
    value = val;
  }

  bool operator == (const PassengerService_setOnline_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_setOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_setOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_setOnline_pargs {
 public:


  virtual ~PassengerService_setOnline_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const bool* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_setOnline_result__isset {
  _PassengerService_setOnline_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_setOnline_result__isset;

class PassengerService_setOnline_result {
 public:

  PassengerService_setOnline_result() : success(0) {
  }

  virtual ~PassengerService_setOnline_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_setOnline_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_setOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_setOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_setOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_setOnline_presult__isset {
  _PassengerService_setOnline_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_setOnline_presult__isset;

class PassengerService_setOnline_presult {
 public:


  virtual ~PassengerService_setOnline_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_setOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_takeOrder_args__isset {
  _PassengerService_takeOrder_args__isset() : credentials(false), userdevice(false), serviceorderid(false), confirm(false), provisionminutes(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
  bool confirm;
  bool provisionminutes;
} _PassengerService_takeOrder_args__isset;

class PassengerService_takeOrder_args {
 public:

  PassengerService_takeOrder_args() : serviceorderid(0), confirm(0), provisionminutes(0) {
  }

  virtual ~PassengerService_takeOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;
  bool confirm;
  NUMBER32 provisionminutes;

  _PassengerService_takeOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  void __set_confirm(const bool val) {
    confirm = val;
  }

  void __set_provisionminutes(const NUMBER32 val) {
    provisionminutes = val;
  }

  bool operator == (const PassengerService_takeOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    if (!(confirm == rhs.confirm))
      return false;
    if (!(provisionminutes == rhs.provisionminutes))
      return false;
    return true;
  }
  bool operator != (const PassengerService_takeOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_takeOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_takeOrder_pargs {
 public:


  virtual ~PassengerService_takeOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;
  const bool* confirm;
  const NUMBER32* provisionminutes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_takeOrder_result__isset {
  _PassengerService_takeOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_takeOrder_result__isset;

class PassengerService_takeOrder_result {
 public:

  PassengerService_takeOrder_result() : success(0) {
  }

  virtual ~PassengerService_takeOrder_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_takeOrder_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_takeOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_takeOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_takeOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_takeOrder_presult__isset {
  _PassengerService_takeOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_takeOrder_presult__isset;

class PassengerService_takeOrder_presult {
 public:


  virtual ~PassengerService_takeOrder_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_takeOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_startWaiting_args__isset {
  _PassengerService_startWaiting_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_startWaiting_args__isset;

class PassengerService_startWaiting_args {
 public:

  PassengerService_startWaiting_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_startWaiting_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_startWaiting_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_startWaiting_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_startWaiting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_startWaiting_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_startWaiting_pargs {
 public:


  virtual ~PassengerService_startWaiting_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_startWaiting_result__isset {
  _PassengerService_startWaiting_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_startWaiting_result__isset;

class PassengerService_startWaiting_result {
 public:

  PassengerService_startWaiting_result() : success(0) {
  }

  virtual ~PassengerService_startWaiting_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_startWaiting_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_startWaiting_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_startWaiting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_startWaiting_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_startWaiting_presult__isset {
  _PassengerService_startWaiting_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_startWaiting_presult__isset;

class PassengerService_startWaiting_presult {
 public:


  virtual ~PassengerService_startWaiting_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_startWaiting_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_startDriving_args__isset {
  _PassengerService_startDriving_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_startDriving_args__isset;

class PassengerService_startDriving_args {
 public:

  PassengerService_startDriving_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_startDriving_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_startDriving_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_startDriving_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_startDriving_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_startDriving_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_startDriving_pargs {
 public:


  virtual ~PassengerService_startDriving_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_startDriving_result__isset {
  _PassengerService_startDriving_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_startDriving_result__isset;

class PassengerService_startDriving_result {
 public:

  PassengerService_startDriving_result() : success(0) {
  }

  virtual ~PassengerService_startDriving_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_startDriving_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_startDriving_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_startDriving_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_startDriving_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_startDriving_presult__isset {
  _PassengerService_startDriving_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_startDriving_presult__isset;

class PassengerService_startDriving_presult {
 public:


  virtual ~PassengerService_startDriving_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_startDriving_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_stopDriving_args__isset {
  _PassengerService_stopDriving_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_stopDriving_args__isset;

class PassengerService_stopDriving_args {
 public:

  PassengerService_stopDriving_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_stopDriving_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_stopDriving_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_stopDriving_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_stopDriving_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_stopDriving_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_stopDriving_pargs {
 public:


  virtual ~PassengerService_stopDriving_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_stopDriving_result__isset {
  _PassengerService_stopDriving_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_stopDriving_result__isset;

class PassengerService_stopDriving_result {
 public:

  PassengerService_stopDriving_result() : success(0) {
  }

  virtual ~PassengerService_stopDriving_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_stopDriving_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_stopDriving_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_stopDriving_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_stopDriving_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_stopDriving_presult__isset {
  _PassengerService_stopDriving_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_stopDriving_presult__isset;

class PassengerService_stopDriving_presult {
 public:


  virtual ~PassengerService_stopDriving_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_stopDriving_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_completeOrder_args__isset {
  _PassengerService_completeOrder_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_completeOrder_args__isset;

class PassengerService_completeOrder_args {
 public:

  PassengerService_completeOrder_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_completeOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_completeOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_completeOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_completeOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_completeOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_completeOrder_pargs {
 public:


  virtual ~PassengerService_completeOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_completeOrder_result__isset {
  _PassengerService_completeOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_completeOrder_result__isset;

class PassengerService_completeOrder_result {
 public:

  PassengerService_completeOrder_result() : success(0) {
  }

  virtual ~PassengerService_completeOrder_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_completeOrder_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_completeOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_completeOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_completeOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_completeOrder_presult__isset {
  _PassengerService_completeOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_completeOrder_presult__isset;

class PassengerService_completeOrder_presult {
 public:


  virtual ~PassengerService_completeOrder_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_completeOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_cancelOrder_args__isset {
  _PassengerService_cancelOrder_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_cancelOrder_args__isset;

class PassengerService_cancelOrder_args {
 public:

  PassengerService_cancelOrder_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_cancelOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_cancelOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_cancelOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_cancelOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_cancelOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_cancelOrder_pargs {
 public:


  virtual ~PassengerService_cancelOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_cancelOrder_result__isset {
  _PassengerService_cancelOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_cancelOrder_result__isset;

class PassengerService_cancelOrder_result {
 public:

  PassengerService_cancelOrder_result() : success(0) {
  }

  virtual ~PassengerService_cancelOrder_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_cancelOrder_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_cancelOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_cancelOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_cancelOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_cancelOrder_presult__isset {
  _PassengerService_cancelOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_cancelOrder_presult__isset;

class PassengerService_cancelOrder_presult {
 public:


  virtual ~PassengerService_cancelOrder_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_cancelOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_failOrder_args__isset {
  _PassengerService_failOrder_args__isset() : credentials(false), userdevice(false), serviceorderid(false) {}
  bool credentials;
  bool userdevice;
  bool serviceorderid;
} _PassengerService_failOrder_args__isset;

class PassengerService_failOrder_args {
 public:

  PassengerService_failOrder_args() : serviceorderid(0) {
  }

  virtual ~PassengerService_failOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID serviceorderid;

  _PassengerService_failOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const PassengerService_failOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const PassengerService_failOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_failOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_failOrder_pargs {
 public:


  virtual ~PassengerService_failOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* serviceorderid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_failOrder_result__isset {
  _PassengerService_failOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_failOrder_result__isset;

class PassengerService_failOrder_result {
 public:

  PassengerService_failOrder_result() : success(0) {
  }

  virtual ~PassengerService_failOrder_result() throw() {}

  bool success;
  ServiceFailure servicefailure;

  _PassengerService_failOrder_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_failOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_failOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_failOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_failOrder_presult__isset {
  _PassengerService_failOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_failOrder_presult__isset;

class PassengerService_failOrder_presult {
 public:


  virtual ~PassengerService_failOrder_presult() throw() {}

  bool* success;
  ServiceFailure servicefailure;

  _PassengerService_failOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_getDriverServiceOrder_args__isset {
  _PassengerService_getDriverServiceOrder_args__isset() : credentials(false), userdevice(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool rowrange;
} _PassengerService_getDriverServiceOrder_args__isset;

class PassengerService_getDriverServiceOrder_args {
 public:

  PassengerService_getDriverServiceOrder_args() {
  }

  virtual ~PassengerService_getDriverServiceOrder_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  RowRange rowrange;

  _PassengerService_getDriverServiceOrder_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_getDriverServiceOrder_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriverServiceOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriverServiceOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_getDriverServiceOrder_pargs {
 public:


  virtual ~PassengerService_getDriverServiceOrder_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriverServiceOrder_result__isset {
  _PassengerService_getDriverServiceOrder_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriverServiceOrder_result__isset;

class PassengerService_getDriverServiceOrder_result {
 public:

  PassengerService_getDriverServiceOrder_result() {
  }

  virtual ~PassengerService_getDriverServiceOrder_result() throw() {}

  ServiceOrders success;
  ServiceFailure servicefailure;

  _PassengerService_getDriverServiceOrder_result__isset __isset;

  void __set_success(const ServiceOrders& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_getDriverServiceOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_getDriverServiceOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_getDriverServiceOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_getDriverServiceOrder_presult__isset {
  _PassengerService_getDriverServiceOrder_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_getDriverServiceOrder_presult__isset;

class PassengerService_getDriverServiceOrder_presult {
 public:


  virtual ~PassengerService_getDriverServiceOrder_presult() throw() {}

  ServiceOrders* success;
  ServiceFailure servicefailure;

  _PassengerService_getDriverServiceOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findAutoPayment_args__isset {
  _PassengerService_findAutoPayment_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findAutoPayment_args__isset;

class PassengerService_findAutoPayment_args {
 public:

  PassengerService_findAutoPayment_args() {
  }

  virtual ~PassengerService_findAutoPayment_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  AutoPayment search;
  RowRange rowrange;

  _PassengerService_findAutoPayment_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const AutoPayment& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findAutoPayment_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findAutoPayment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findAutoPayment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findAutoPayment_pargs {
 public:


  virtual ~PassengerService_findAutoPayment_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const AutoPayment* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findAutoPayment_result__isset {
  _PassengerService_findAutoPayment_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findAutoPayment_result__isset;

class PassengerService_findAutoPayment_result {
 public:

  PassengerService_findAutoPayment_result() {
  }

  virtual ~PassengerService_findAutoPayment_result() throw() {}

  AutoPayments success;
  ServiceFailure servicefailure;

  _PassengerService_findAutoPayment_result__isset __isset;

  void __set_success(const AutoPayments& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findAutoPayment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findAutoPayment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findAutoPayment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findAutoPayment_presult__isset {
  _PassengerService_findAutoPayment_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findAutoPayment_presult__isset;

class PassengerService_findAutoPayment_presult {
 public:


  virtual ~PassengerService_findAutoPayment_presult() throw() {}

  AutoPayments* success;
  ServiceFailure servicefailure;

  _PassengerService_findAutoPayment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findBillAct_args__isset {
  _PassengerService_findBillAct_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findBillAct_args__isset;

class PassengerService_findBillAct_args {
 public:

  PassengerService_findBillAct_args() {
  }

  virtual ~PassengerService_findBillAct_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  BillAct search;
  RowRange rowrange;

  _PassengerService_findBillAct_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const BillAct& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findBillAct_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBillAct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBillAct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findBillAct_pargs {
 public:


  virtual ~PassengerService_findBillAct_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const BillAct* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBillAct_result__isset {
  _PassengerService_findBillAct_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBillAct_result__isset;

class PassengerService_findBillAct_result {
 public:

  PassengerService_findBillAct_result() {
  }

  virtual ~PassengerService_findBillAct_result() throw() {}

  BillActs success;
  ServiceFailure servicefailure;

  _PassengerService_findBillAct_result__isset __isset;

  void __set_success(const BillActs& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findBillAct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findBillAct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findBillAct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findBillAct_presult__isset {
  _PassengerService_findBillAct_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findBillAct_presult__isset;

class PassengerService_findBillAct_presult {
 public:


  virtual ~PassengerService_findBillAct_presult() throw() {}

  BillActs* success;
  ServiceFailure servicefailure;

  _PassengerService_findBillAct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDriverBlackList_args__isset {
  _PassengerService_findDriverBlackList_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDriverBlackList_args__isset;

class PassengerService_findDriverBlackList_args {
 public:

  PassengerService_findDriverBlackList_args() {
  }

  virtual ~PassengerService_findDriverBlackList_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DriverBlackList search;
  RowRange rowrange;

  _PassengerService_findDriverBlackList_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const DriverBlackList& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDriverBlackList_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDriverBlackList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDriverBlackList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDriverBlackList_pargs {
 public:


  virtual ~PassengerService_findDriverBlackList_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DriverBlackList* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDriverBlackList_result__isset {
  _PassengerService_findDriverBlackList_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDriverBlackList_result__isset;

class PassengerService_findDriverBlackList_result {
 public:

  PassengerService_findDriverBlackList_result() {
  }

  virtual ~PassengerService_findDriverBlackList_result() throw() {}

  DriverBlackLists success;
  ServiceFailure servicefailure;

  _PassengerService_findDriverBlackList_result__isset __isset;

  void __set_success(const DriverBlackLists& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDriverBlackList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDriverBlackList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDriverBlackList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDriverBlackList_presult__isset {
  _PassengerService_findDriverBlackList_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDriverBlackList_presult__isset;

class PassengerService_findDriverBlackList_presult {
 public:


  virtual ~PassengerService_findDriverBlackList_presult() throw() {}

  DriverBlackLists* success;
  ServiceFailure servicefailure;

  _PassengerService_findDriverBlackList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findDispatcher_args__isset {
  _PassengerService_findDispatcher_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findDispatcher_args__isset;

class PassengerService_findDispatcher_args {
 public:

  PassengerService_findDispatcher_args() {
  }

  virtual ~PassengerService_findDispatcher_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Dispatcher search;
  RowRange rowrange;

  _PassengerService_findDispatcher_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Dispatcher& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findDispatcher_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDispatcher_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDispatcher_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findDispatcher_pargs {
 public:


  virtual ~PassengerService_findDispatcher_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Dispatcher* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDispatcher_result__isset {
  _PassengerService_findDispatcher_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDispatcher_result__isset;

class PassengerService_findDispatcher_result {
 public:

  PassengerService_findDispatcher_result() {
  }

  virtual ~PassengerService_findDispatcher_result() throw() {}

  Dispatchers success;
  ServiceFailure servicefailure;

  _PassengerService_findDispatcher_result__isset __isset;

  void __set_success(const Dispatchers& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findDispatcher_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findDispatcher_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findDispatcher_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findDispatcher_presult__isset {
  _PassengerService_findDispatcher_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findDispatcher_presult__isset;

class PassengerService_findDispatcher_presult {
 public:


  virtual ~PassengerService_findDispatcher_presult() throw() {}

  Dispatchers* success;
  ServiceFailure servicefailure;

  _PassengerService_findDispatcher_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findNotification_args__isset {
  _PassengerService_findNotification_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findNotification_args__isset;

class PassengerService_findNotification_args {
 public:

  PassengerService_findNotification_args() {
  }

  virtual ~PassengerService_findNotification_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Notification search;
  RowRange rowrange;

  _PassengerService_findNotification_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Notification& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findNotification_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findNotification_pargs {
 public:


  virtual ~PassengerService_findNotification_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Notification* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findNotification_result__isset {
  _PassengerService_findNotification_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findNotification_result__isset;

class PassengerService_findNotification_result {
 public:

  PassengerService_findNotification_result() {
  }

  virtual ~PassengerService_findNotification_result() throw() {}

  Notifications success;
  ServiceFailure servicefailure;

  _PassengerService_findNotification_result__isset __isset;

  void __set_success(const Notifications& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findNotification_presult__isset {
  _PassengerService_findNotification_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findNotification_presult__isset;

class PassengerService_findNotification_presult {
 public:


  virtual ~PassengerService_findNotification_presult() throw() {}

  Notifications* success;
  ServiceFailure servicefailure;

  _PassengerService_findNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findShedule_args__isset {
  _PassengerService_findShedule_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findShedule_args__isset;

class PassengerService_findShedule_args {
 public:

  PassengerService_findShedule_args() {
  }

  virtual ~PassengerService_findShedule_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Shedule search;
  RowRange rowrange;

  _PassengerService_findShedule_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const Shedule& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findShedule_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findShedule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findShedule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findShedule_pargs {
 public:


  virtual ~PassengerService_findShedule_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Shedule* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findShedule_result__isset {
  _PassengerService_findShedule_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findShedule_result__isset;

class PassengerService_findShedule_result {
 public:

  PassengerService_findShedule_result() {
  }

  virtual ~PassengerService_findShedule_result() throw() {}

  Shedules success;
  ServiceFailure servicefailure;

  _PassengerService_findShedule_result__isset __isset;

  void __set_success(const Shedules& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findShedule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findShedule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findShedule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findShedule_presult__isset {
  _PassengerService_findShedule_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findShedule_presult__isset;

class PassengerService_findShedule_presult {
 public:


  virtual ~PassengerService_findShedule_presult() throw() {}

  Shedules* success;
  ServiceFailure servicefailure;

  _PassengerService_findShedule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findServiceOrderStop_args__isset {
  _PassengerService_findServiceOrderStop_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findServiceOrderStop_args__isset;

class PassengerService_findServiceOrderStop_args {
 public:

  PassengerService_findServiceOrderStop_args() {
  }

  virtual ~PassengerService_findServiceOrderStop_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrderStop search;
  RowRange rowrange;

  _PassengerService_findServiceOrderStop_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const ServiceOrderStop& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findServiceOrderStop_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrderStop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrderStop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findServiceOrderStop_pargs {
 public:


  virtual ~PassengerService_findServiceOrderStop_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrderStop* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrderStop_result__isset {
  _PassengerService_findServiceOrderStop_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrderStop_result__isset;

class PassengerService_findServiceOrderStop_result {
 public:

  PassengerService_findServiceOrderStop_result() {
  }

  virtual ~PassengerService_findServiceOrderStop_result() throw() {}

  ServiceOrderStops success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrderStop_result__isset __isset;

  void __set_success(const ServiceOrderStops& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findServiceOrderStop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findServiceOrderStop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findServiceOrderStop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findServiceOrderStop_presult__isset {
  _PassengerService_findServiceOrderStop_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findServiceOrderStop_presult__isset;

class PassengerService_findServiceOrderStop_presult {
 public:


  virtual ~PassengerService_findServiceOrderStop_presult() throw() {}

  ServiceOrderStops* success;
  ServiceFailure servicefailure;

  _PassengerService_findServiceOrderStop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_findCustomerStatistic_args__isset {
  _PassengerService_findCustomerStatistic_args__isset() : credentials(false), userdevice(false), search(false), rowrange(false) {}
  bool credentials;
  bool userdevice;
  bool search;
  bool rowrange;
} _PassengerService_findCustomerStatistic_args__isset;

class PassengerService_findCustomerStatistic_args {
 public:

  PassengerService_findCustomerStatistic_args() {
  }

  virtual ~PassengerService_findCustomerStatistic_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  CustomerStatistic search;
  RowRange rowrange;

  _PassengerService_findCustomerStatistic_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_search(const CustomerStatistic& val) {
    search = val;
  }

  void __set_rowrange(const RowRange& val) {
    rowrange = val;
  }

  bool operator == (const PassengerService_findCustomerStatistic_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(search == rhs.search))
      return false;
    if (!(rowrange == rhs.rowrange))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCustomerStatistic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCustomerStatistic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_findCustomerStatistic_pargs {
 public:


  virtual ~PassengerService_findCustomerStatistic_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const CustomerStatistic* search;
  const RowRange* rowrange;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCustomerStatistic_result__isset {
  _PassengerService_findCustomerStatistic_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCustomerStatistic_result__isset;

class PassengerService_findCustomerStatistic_result {
 public:

  PassengerService_findCustomerStatistic_result() {
  }

  virtual ~PassengerService_findCustomerStatistic_result() throw() {}

  CustomerStatistics success;
  ServiceFailure servicefailure;

  _PassengerService_findCustomerStatistic_result__isset __isset;

  void __set_success(const CustomerStatistics& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_findCustomerStatistic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_findCustomerStatistic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_findCustomerStatistic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_findCustomerStatistic_presult__isset {
  _PassengerService_findCustomerStatistic_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_findCustomerStatistic_presult__isset;

class PassengerService_findCustomerStatistic_presult {
 public:


  virtual ~PassengerService_findCustomerStatistic_presult() throw() {}

  CustomerStatistics* success;
  ServiceFailure servicefailure;

  _PassengerService_findCustomerStatistic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addAutoPayment_args__isset {
  _PassengerService_addAutoPayment_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addAutoPayment_args__isset;

class PassengerService_addAutoPayment_args {
 public:

  PassengerService_addAutoPayment_args() {
  }

  virtual ~PassengerService_addAutoPayment_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  AutoPayment value;

  _PassengerService_addAutoPayment_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const AutoPayment& val) {
    value = val;
  }

  bool operator == (const PassengerService_addAutoPayment_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addAutoPayment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addAutoPayment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addAutoPayment_pargs {
 public:


  virtual ~PassengerService_addAutoPayment_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const AutoPayment* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addAutoPayment_result__isset {
  _PassengerService_addAutoPayment_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addAutoPayment_result__isset;

class PassengerService_addAutoPayment_result {
 public:

  PassengerService_addAutoPayment_result() {
  }

  virtual ~PassengerService_addAutoPayment_result() throw() {}

  AutoPayment success;
  ServiceFailure servicefailure;

  _PassengerService_addAutoPayment_result__isset __isset;

  void __set_success(const AutoPayment& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addAutoPayment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addAutoPayment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addAutoPayment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addAutoPayment_presult__isset {
  _PassengerService_addAutoPayment_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addAutoPayment_presult__isset;

class PassengerService_addAutoPayment_presult {
 public:


  virtual ~PassengerService_addAutoPayment_presult() throw() {}

  AutoPayment* success;
  ServiceFailure servicefailure;

  _PassengerService_addAutoPayment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addBillAct_args__isset {
  _PassengerService_addBillAct_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addBillAct_args__isset;

class PassengerService_addBillAct_args {
 public:

  PassengerService_addBillAct_args() {
  }

  virtual ~PassengerService_addBillAct_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  BillAct value;

  _PassengerService_addBillAct_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const BillAct& val) {
    value = val;
  }

  bool operator == (const PassengerService_addBillAct_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addBillAct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addBillAct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addBillAct_pargs {
 public:


  virtual ~PassengerService_addBillAct_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const BillAct* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addBillAct_result__isset {
  _PassengerService_addBillAct_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addBillAct_result__isset;

class PassengerService_addBillAct_result {
 public:

  PassengerService_addBillAct_result() {
  }

  virtual ~PassengerService_addBillAct_result() throw() {}

  BillAct success;
  ServiceFailure servicefailure;

  _PassengerService_addBillAct_result__isset __isset;

  void __set_success(const BillAct& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addBillAct_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addBillAct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addBillAct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addBillAct_presult__isset {
  _PassengerService_addBillAct_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addBillAct_presult__isset;

class PassengerService_addBillAct_presult {
 public:


  virtual ~PassengerService_addBillAct_presult() throw() {}

  BillAct* success;
  ServiceFailure servicefailure;

  _PassengerService_addBillAct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addDriverBlackList_args__isset {
  _PassengerService_addDriverBlackList_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addDriverBlackList_args__isset;

class PassengerService_addDriverBlackList_args {
 public:

  PassengerService_addDriverBlackList_args() {
  }

  virtual ~PassengerService_addDriverBlackList_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  DriverBlackList value;

  _PassengerService_addDriverBlackList_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const DriverBlackList& val) {
    value = val;
  }

  bool operator == (const PassengerService_addDriverBlackList_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDriverBlackList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDriverBlackList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addDriverBlackList_pargs {
 public:


  virtual ~PassengerService_addDriverBlackList_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const DriverBlackList* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDriverBlackList_result__isset {
  _PassengerService_addDriverBlackList_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDriverBlackList_result__isset;

class PassengerService_addDriverBlackList_result {
 public:

  PassengerService_addDriverBlackList_result() {
  }

  virtual ~PassengerService_addDriverBlackList_result() throw() {}

  DriverBlackList success;
  ServiceFailure servicefailure;

  _PassengerService_addDriverBlackList_result__isset __isset;

  void __set_success(const DriverBlackList& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addDriverBlackList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addDriverBlackList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addDriverBlackList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addDriverBlackList_presult__isset {
  _PassengerService_addDriverBlackList_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addDriverBlackList_presult__isset;

class PassengerService_addDriverBlackList_presult {
 public:


  virtual ~PassengerService_addDriverBlackList_presult() throw() {}

  DriverBlackList* success;
  ServiceFailure servicefailure;

  _PassengerService_addDriverBlackList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addNotification_args__isset {
  _PassengerService_addNotification_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addNotification_args__isset;

class PassengerService_addNotification_args {
 public:

  PassengerService_addNotification_args() {
  }

  virtual ~PassengerService_addNotification_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Notification value;

  _PassengerService_addNotification_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Notification& val) {
    value = val;
  }

  bool operator == (const PassengerService_addNotification_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addNotification_pargs {
 public:


  virtual ~PassengerService_addNotification_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Notification* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addNotification_result__isset {
  _PassengerService_addNotification_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addNotification_result__isset;

class PassengerService_addNotification_result {
 public:

  PassengerService_addNotification_result() {
  }

  virtual ~PassengerService_addNotification_result() throw() {}

  Notification success;
  ServiceFailure servicefailure;

  _PassengerService_addNotification_result__isset __isset;

  void __set_success(const Notification& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addNotification_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addNotification_presult__isset {
  _PassengerService_addNotification_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addNotification_presult__isset;

class PassengerService_addNotification_presult {
 public:


  virtual ~PassengerService_addNotification_presult() throw() {}

  Notification* success;
  ServiceFailure servicefailure;

  _PassengerService_addNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addShedule_args__isset {
  _PassengerService_addShedule_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addShedule_args__isset;

class PassengerService_addShedule_args {
 public:

  PassengerService_addShedule_args() {
  }

  virtual ~PassengerService_addShedule_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  Shedule value;

  _PassengerService_addShedule_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const Shedule& val) {
    value = val;
  }

  bool operator == (const PassengerService_addShedule_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addShedule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addShedule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addShedule_pargs {
 public:


  virtual ~PassengerService_addShedule_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const Shedule* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addShedule_result__isset {
  _PassengerService_addShedule_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addShedule_result__isset;

class PassengerService_addShedule_result {
 public:

  PassengerService_addShedule_result() {
  }

  virtual ~PassengerService_addShedule_result() throw() {}

  Shedule success;
  ServiceFailure servicefailure;

  _PassengerService_addShedule_result__isset __isset;

  void __set_success(const Shedule& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addShedule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addShedule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addShedule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addShedule_presult__isset {
  _PassengerService_addShedule_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addShedule_presult__isset;

class PassengerService_addShedule_presult {
 public:


  virtual ~PassengerService_addShedule_presult() throw() {}

  Shedule* success;
  ServiceFailure servicefailure;

  _PassengerService_addShedule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addServiceOrderStop_args__isset {
  _PassengerService_addServiceOrderStop_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addServiceOrderStop_args__isset;

class PassengerService_addServiceOrderStop_args {
 public:

  PassengerService_addServiceOrderStop_args() {
  }

  virtual ~PassengerService_addServiceOrderStop_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ServiceOrderStop value;

  _PassengerService_addServiceOrderStop_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const ServiceOrderStop& val) {
    value = val;
  }

  bool operator == (const PassengerService_addServiceOrderStop_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrderStop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrderStop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addServiceOrderStop_pargs {
 public:


  virtual ~PassengerService_addServiceOrderStop_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ServiceOrderStop* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrderStop_result__isset {
  _PassengerService_addServiceOrderStop_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrderStop_result__isset;

class PassengerService_addServiceOrderStop_result {
 public:

  PassengerService_addServiceOrderStop_result() {
  }

  virtual ~PassengerService_addServiceOrderStop_result() throw() {}

  ServiceOrderStop success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrderStop_result__isset __isset;

  void __set_success(const ServiceOrderStop& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addServiceOrderStop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addServiceOrderStop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addServiceOrderStop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addServiceOrderStop_presult__isset {
  _PassengerService_addServiceOrderStop_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addServiceOrderStop_presult__isset;

class PassengerService_addServiceOrderStop_presult {
 public:


  virtual ~PassengerService_addServiceOrderStop_presult() throw() {}

  ServiceOrderStop* success;
  ServiceFailure servicefailure;

  _PassengerService_addServiceOrderStop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_addCustomerStatistic_args__isset {
  _PassengerService_addCustomerStatistic_args__isset() : credentials(false), userdevice(false), value(false) {}
  bool credentials;
  bool userdevice;
  bool value;
} _PassengerService_addCustomerStatistic_args__isset;

class PassengerService_addCustomerStatistic_args {
 public:

  PassengerService_addCustomerStatistic_args() {
  }

  virtual ~PassengerService_addCustomerStatistic_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  CustomerStatistic value;

  _PassengerService_addCustomerStatistic_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_value(const CustomerStatistic& val) {
    value = val;
  }

  bool operator == (const PassengerService_addCustomerStatistic_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCustomerStatistic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCustomerStatistic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_addCustomerStatistic_pargs {
 public:


  virtual ~PassengerService_addCustomerStatistic_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const CustomerStatistic* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCustomerStatistic_result__isset {
  _PassengerService_addCustomerStatistic_result__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCustomerStatistic_result__isset;

class PassengerService_addCustomerStatistic_result {
 public:

  PassengerService_addCustomerStatistic_result() {
  }

  virtual ~PassengerService_addCustomerStatistic_result() throw() {}

  CustomerStatistic success;
  ServiceFailure servicefailure;

  _PassengerService_addCustomerStatistic_result__isset __isset;

  void __set_success(const CustomerStatistic& val) {
    success = val;
  }

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_addCustomerStatistic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_addCustomerStatistic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_addCustomerStatistic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_addCustomerStatistic_presult__isset {
  _PassengerService_addCustomerStatistic_presult__isset() : success(false), servicefailure(false) {}
  bool success;
  bool servicefailure;
} _PassengerService_addCustomerStatistic_presult__isset;

class PassengerService_addCustomerStatistic_presult {
 public:


  virtual ~PassengerService_addCustomerStatistic_presult() throw() {}

  CustomerStatistic* success;
  ServiceFailure servicefailure;

  _PassengerService_addCustomerStatistic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmAutoPayment_args__isset {
  _PassengerService_rmAutoPayment_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmAutoPayment_args__isset;

class PassengerService_rmAutoPayment_args {
 public:

  PassengerService_rmAutoPayment_args() : id(0) {
  }

  virtual ~PassengerService_rmAutoPayment_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmAutoPayment_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmAutoPayment_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmAutoPayment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmAutoPayment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmAutoPayment_pargs {
 public:


  virtual ~PassengerService_rmAutoPayment_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmAutoPayment_result__isset {
  _PassengerService_rmAutoPayment_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmAutoPayment_result__isset;

class PassengerService_rmAutoPayment_result {
 public:

  PassengerService_rmAutoPayment_result() {
  }

  virtual ~PassengerService_rmAutoPayment_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmAutoPayment_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmAutoPayment_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmAutoPayment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmAutoPayment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmAutoPayment_presult__isset {
  _PassengerService_rmAutoPayment_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmAutoPayment_presult__isset;

class PassengerService_rmAutoPayment_presult {
 public:


  virtual ~PassengerService_rmAutoPayment_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmAutoPayment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmBank_args__isset {
  _PassengerService_rmBank_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmBank_args__isset;

class PassengerService_rmBank_args {
 public:

  PassengerService_rmBank_args() : id(0) {
  }

  virtual ~PassengerService_rmBank_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmBank_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmBank_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmBank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmBank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmBank_pargs {
 public:


  virtual ~PassengerService_rmBank_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmBank_result__isset {
  _PassengerService_rmBank_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmBank_result__isset;

class PassengerService_rmBank_result {
 public:

  PassengerService_rmBank_result() {
  }

  virtual ~PassengerService_rmBank_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmBank_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmBank_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmBank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmBank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmBank_presult__isset {
  _PassengerService_rmBank_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmBank_presult__isset;

class PassengerService_rmBank_presult {
 public:


  virtual ~PassengerService_rmBank_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmBank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmBillAct_args__isset {
  _PassengerService_rmBillAct_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmBillAct_args__isset;

class PassengerService_rmBillAct_args {
 public:

  PassengerService_rmBillAct_args() : id(0) {
  }

  virtual ~PassengerService_rmBillAct_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmBillAct_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmBillAct_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmBillAct_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmBillAct_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmBillAct_pargs {
 public:


  virtual ~PassengerService_rmBillAct_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmBillAct_result__isset {
  _PassengerService_rmBillAct_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmBillAct_result__isset;

class PassengerService_rmBillAct_result {
 public:

  PassengerService_rmBillAct_result() {
  }

  virtual ~PassengerService_rmBillAct_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmBillAct_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmBillAct_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmBillAct_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmBillAct_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmBillAct_presult__isset {
  _PassengerService_rmBillAct_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmBillAct_presult__isset;

class PassengerService_rmBillAct_presult {
 public:


  virtual ~PassengerService_rmBillAct_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmBillAct_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmVehicleBrand_args__isset {
  _PassengerService_rmVehicleBrand_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmVehicleBrand_args__isset;

class PassengerService_rmVehicleBrand_args {
 public:

  PassengerService_rmVehicleBrand_args() : id(0) {
  }

  virtual ~PassengerService_rmVehicleBrand_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmVehicleBrand_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmVehicleBrand_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmVehicleBrand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmVehicleBrand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmVehicleBrand_pargs {
 public:


  virtual ~PassengerService_rmVehicleBrand_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmVehicleBrand_result__isset {
  _PassengerService_rmVehicleBrand_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmVehicleBrand_result__isset;

class PassengerService_rmVehicleBrand_result {
 public:

  PassengerService_rmVehicleBrand_result() {
  }

  virtual ~PassengerService_rmVehicleBrand_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmVehicleBrand_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmVehicleBrand_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmVehicleBrand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmVehicleBrand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmVehicleBrand_presult__isset {
  _PassengerService_rmVehicleBrand_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmVehicleBrand_presult__isset;

class PassengerService_rmVehicleBrand_presult {
 public:


  virtual ~PassengerService_rmVehicleBrand_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmVehicleBrand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmVehicleColor_args__isset {
  _PassengerService_rmVehicleColor_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmVehicleColor_args__isset;

class PassengerService_rmVehicleColor_args {
 public:

  PassengerService_rmVehicleColor_args() : id(0) {
  }

  virtual ~PassengerService_rmVehicleColor_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmVehicleColor_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmVehicleColor_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmVehicleColor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmVehicleColor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmVehicleColor_pargs {
 public:


  virtual ~PassengerService_rmVehicleColor_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmVehicleColor_result__isset {
  _PassengerService_rmVehicleColor_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmVehicleColor_result__isset;

class PassengerService_rmVehicleColor_result {
 public:

  PassengerService_rmVehicleColor_result() {
  }

  virtual ~PassengerService_rmVehicleColor_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmVehicleColor_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmVehicleColor_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmVehicleColor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmVehicleColor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmVehicleColor_presult__isset {
  _PassengerService_rmVehicleColor_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmVehicleColor_presult__isset;

class PassengerService_rmVehicleColor_presult {
 public:


  virtual ~PassengerService_rmVehicleColor_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmVehicleColor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmDictEntry_args__isset {
  _PassengerService_rmDictEntry_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmDictEntry_args__isset;

class PassengerService_rmDictEntry_args {
 public:

  PassengerService_rmDictEntry_args() : id(0) {
  }

  virtual ~PassengerService_rmDictEntry_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmDictEntry_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmDictEntry_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDictEntry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDictEntry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmDictEntry_pargs {
 public:


  virtual ~PassengerService_rmDictEntry_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDictEntry_result__isset {
  _PassengerService_rmDictEntry_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDictEntry_result__isset;

class PassengerService_rmDictEntry_result {
 public:

  PassengerService_rmDictEntry_result() {
  }

  virtual ~PassengerService_rmDictEntry_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDictEntry_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmDictEntry_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDictEntry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDictEntry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDictEntry_presult__isset {
  _PassengerService_rmDictEntry_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDictEntry_presult__isset;

class PassengerService_rmDictEntry_presult {
 public:


  virtual ~PassengerService_rmDictEntry_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDictEntry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmDriver_args__isset {
  _PassengerService_rmDriver_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmDriver_args__isset;

class PassengerService_rmDriver_args {
 public:

  PassengerService_rmDriver_args() : id(0) {
  }

  virtual ~PassengerService_rmDriver_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmDriver_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmDriver_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDriver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDriver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmDriver_pargs {
 public:


  virtual ~PassengerService_rmDriver_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDriver_result__isset {
  _PassengerService_rmDriver_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDriver_result__isset;

class PassengerService_rmDriver_result {
 public:

  PassengerService_rmDriver_result() {
  }

  virtual ~PassengerService_rmDriver_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDriver_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmDriver_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDriver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDriver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDriver_presult__isset {
  _PassengerService_rmDriver_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDriver_presult__isset;

class PassengerService_rmDriver_presult {
 public:


  virtual ~PassengerService_rmDriver_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDriver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmDriverBlackList_args__isset {
  _PassengerService_rmDriverBlackList_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmDriverBlackList_args__isset;

class PassengerService_rmDriverBlackList_args {
 public:

  PassengerService_rmDriverBlackList_args() : id(0) {
  }

  virtual ~PassengerService_rmDriverBlackList_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmDriverBlackList_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmDriverBlackList_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDriverBlackList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDriverBlackList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmDriverBlackList_pargs {
 public:


  virtual ~PassengerService_rmDriverBlackList_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDriverBlackList_result__isset {
  _PassengerService_rmDriverBlackList_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDriverBlackList_result__isset;

class PassengerService_rmDriverBlackList_result {
 public:

  PassengerService_rmDriverBlackList_result() {
  }

  virtual ~PassengerService_rmDriverBlackList_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDriverBlackList_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmDriverBlackList_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDriverBlackList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDriverBlackList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDriverBlackList_presult__isset {
  _PassengerService_rmDriverBlackList_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDriverBlackList_presult__isset;

class PassengerService_rmDriverBlackList_presult {
 public:


  virtual ~PassengerService_rmDriverBlackList_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDriverBlackList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmPassenger_args__isset {
  _PassengerService_rmPassenger_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmPassenger_args__isset;

class PassengerService_rmPassenger_args {
 public:

  PassengerService_rmPassenger_args() : id(0) {
  }

  virtual ~PassengerService_rmPassenger_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmPassenger_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmPassenger_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmPassenger_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmPassenger_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmPassenger_pargs {
 public:


  virtual ~PassengerService_rmPassenger_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmPassenger_result__isset {
  _PassengerService_rmPassenger_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmPassenger_result__isset;

class PassengerService_rmPassenger_result {
 public:

  PassengerService_rmPassenger_result() {
  }

  virtual ~PassengerService_rmPassenger_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmPassenger_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmPassenger_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmPassenger_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmPassenger_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmPassenger_presult__isset {
  _PassengerService_rmPassenger_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmPassenger_presult__isset;

class PassengerService_rmPassenger_presult {
 public:


  virtual ~PassengerService_rmPassenger_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmPassenger_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmNotification_args__isset {
  _PassengerService_rmNotification_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmNotification_args__isset;

class PassengerService_rmNotification_args {
 public:

  PassengerService_rmNotification_args() : id(0) {
  }

  virtual ~PassengerService_rmNotification_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmNotification_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmNotification_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmNotification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmNotification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmNotification_pargs {
 public:


  virtual ~PassengerService_rmNotification_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmNotification_result__isset {
  _PassengerService_rmNotification_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmNotification_result__isset;

class PassengerService_rmNotification_result {
 public:

  PassengerService_rmNotification_result() {
  }

  virtual ~PassengerService_rmNotification_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmNotification_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmNotification_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmNotification_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmNotification_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmNotification_presult__isset {
  _PassengerService_rmNotification_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmNotification_presult__isset;

class PassengerService_rmNotification_presult {
 public:


  virtual ~PassengerService_rmNotification_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmNotification_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmCustomer_args__isset {
  _PassengerService_rmCustomer_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmCustomer_args__isset;

class PassengerService_rmCustomer_args {
 public:

  PassengerService_rmCustomer_args() : id(0) {
  }

  virtual ~PassengerService_rmCustomer_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmCustomer_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmCustomer_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmCustomer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmCustomer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmCustomer_pargs {
 public:


  virtual ~PassengerService_rmCustomer_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmCustomer_result__isset {
  _PassengerService_rmCustomer_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmCustomer_result__isset;

class PassengerService_rmCustomer_result {
 public:

  PassengerService_rmCustomer_result() {
  }

  virtual ~PassengerService_rmCustomer_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmCustomer_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmCustomer_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmCustomer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmCustomer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmCustomer_presult__isset {
  _PassengerService_rmCustomer_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmCustomer_presult__isset;

class PassengerService_rmCustomer_presult {
 public:


  virtual ~PassengerService_rmCustomer_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmCustomer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmDispatcher_args__isset {
  _PassengerService_rmDispatcher_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmDispatcher_args__isset;

class PassengerService_rmDispatcher_args {
 public:

  PassengerService_rmDispatcher_args() : id(0) {
  }

  virtual ~PassengerService_rmDispatcher_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmDispatcher_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmDispatcher_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDispatcher_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDispatcher_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmDispatcher_pargs {
 public:


  virtual ~PassengerService_rmDispatcher_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDispatcher_result__isset {
  _PassengerService_rmDispatcher_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDispatcher_result__isset;

class PassengerService_rmDispatcher_result {
 public:

  PassengerService_rmDispatcher_result() {
  }

  virtual ~PassengerService_rmDispatcher_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDispatcher_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmDispatcher_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmDispatcher_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmDispatcher_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmDispatcher_presult__isset {
  _PassengerService_rmDispatcher_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmDispatcher_presult__isset;

class PassengerService_rmDispatcher_presult {
 public:


  virtual ~PassengerService_rmDispatcher_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmDispatcher_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmShedule_args__isset {
  _PassengerService_rmShedule_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmShedule_args__isset;

class PassengerService_rmShedule_args {
 public:

  PassengerService_rmShedule_args() : id(0) {
  }

  virtual ~PassengerService_rmShedule_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmShedule_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmShedule_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmShedule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmShedule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmShedule_pargs {
 public:


  virtual ~PassengerService_rmShedule_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmShedule_result__isset {
  _PassengerService_rmShedule_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmShedule_result__isset;

class PassengerService_rmShedule_result {
 public:

  PassengerService_rmShedule_result() {
  }

  virtual ~PassengerService_rmShedule_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmShedule_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmShedule_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmShedule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmShedule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmShedule_presult__isset {
  _PassengerService_rmShedule_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmShedule_presult__isset;

class PassengerService_rmShedule_presult {
 public:


  virtual ~PassengerService_rmShedule_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmShedule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmServiceOrderStop_args__isset {
  _PassengerService_rmServiceOrderStop_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmServiceOrderStop_args__isset;

class PassengerService_rmServiceOrderStop_args {
 public:

  PassengerService_rmServiceOrderStop_args() : id(0) {
  }

  virtual ~PassengerService_rmServiceOrderStop_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmServiceOrderStop_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmServiceOrderStop_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrderStop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrderStop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmServiceOrderStop_pargs {
 public:


  virtual ~PassengerService_rmServiceOrderStop_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrderStop_result__isset {
  _PassengerService_rmServiceOrderStop_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrderStop_result__isset;

class PassengerService_rmServiceOrderStop_result {
 public:

  PassengerService_rmServiceOrderStop_result() {
  }

  virtual ~PassengerService_rmServiceOrderStop_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrderStop_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmServiceOrderStop_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmServiceOrderStop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmServiceOrderStop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmServiceOrderStop_presult__isset {
  _PassengerService_rmServiceOrderStop_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmServiceOrderStop_presult__isset;

class PassengerService_rmServiceOrderStop_presult {
 public:


  virtual ~PassengerService_rmServiceOrderStop_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmServiceOrderStop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PassengerService_rmCustomerStatistic_args__isset {
  _PassengerService_rmCustomerStatistic_args__isset() : credentials(false), userdevice(false), id(false) {}
  bool credentials;
  bool userdevice;
  bool id;
} _PassengerService_rmCustomerStatistic_args__isset;

class PassengerService_rmCustomerStatistic_args {
 public:

  PassengerService_rmCustomerStatistic_args() : id(0) {
  }

  virtual ~PassengerService_rmCustomerStatistic_args() throw() {}

  Credentials credentials;
  UserDevice userdevice;
  ID id;

  _PassengerService_rmCustomerStatistic_args__isset __isset;

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevice(const UserDevice& val) {
    userdevice = val;
  }

  void __set_id(const ID val) {
    id = val;
  }

  bool operator == (const PassengerService_rmCustomerStatistic_args & rhs) const
  {
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevice == rhs.userdevice))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmCustomerStatistic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmCustomerStatistic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PassengerService_rmCustomerStatistic_pargs {
 public:


  virtual ~PassengerService_rmCustomerStatistic_pargs() throw() {}

  const Credentials* credentials;
  const UserDevice* userdevice;
  const ID* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmCustomerStatistic_result__isset {
  _PassengerService_rmCustomerStatistic_result__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmCustomerStatistic_result__isset;

class PassengerService_rmCustomerStatistic_result {
 public:

  PassengerService_rmCustomerStatistic_result() {
  }

  virtual ~PassengerService_rmCustomerStatistic_result() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmCustomerStatistic_result__isset __isset;

  void __set_servicefailure(const ServiceFailure& val) {
    servicefailure = val;
  }

  bool operator == (const PassengerService_rmCustomerStatistic_result & rhs) const
  {
    if (!(servicefailure == rhs.servicefailure))
      return false;
    return true;
  }
  bool operator != (const PassengerService_rmCustomerStatistic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerService_rmCustomerStatistic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PassengerService_rmCustomerStatistic_presult__isset {
  _PassengerService_rmCustomerStatistic_presult__isset() : servicefailure(false) {}
  bool servicefailure;
} _PassengerService_rmCustomerStatistic_presult__isset;

class PassengerService_rmCustomerStatistic_presult {
 public:


  virtual ~PassengerService_rmCustomerStatistic_presult() throw() {}

  ServiceFailure servicefailure;

  _PassengerService_rmCustomerStatistic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PassengerServiceClient : virtual public PassengerServiceIf {
 public:
  PassengerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PassengerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDocument(Document& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getDocument(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getDocument(Document& _return);
  void getOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getOrg(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getOrg(Org& _return);
  void loginDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice);
  void send_loginDriver(const Credentials& credentials, const UserDevice& userdevice);
  void recv_loginDriver(Driver& _return);
  void loginPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice);
  void send_loginPassenger(const Credentials& credentials, const UserDevice& userdevice);
  void recv_loginPassenger(Passenger& _return);
  void findDictEntry(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange);
  void send_findDictEntry(const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange);
  void recv_findDictEntry(DictEntries& _return);
  void findDictTag(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange);
  void send_findDictTag(const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange);
  void recv_findDictTag(DictEntries& _return);
  void findBank(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange);
  void send_findBank(const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange);
  void recv_findBank(Banks& _return);
  void findBankByName(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findBankByName(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findBankByName(Banks& _return);
  void findOrgService(OrgServices& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange);
  void send_findOrgService(const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange);
  void recv_findOrgService(OrgServices& _return);
  void findVehicle(Vehicles& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void send_findVehicle(const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void recv_findVehicle(Vehicles& _return);
  void findVehicleid(Vehicleids& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void send_findVehicleid(const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange);
  void recv_findVehicleid(Vehicleids& _return);
  void addCity(City& _return, const Credentials& credentials, const UserDevice& userdevice, const City& value);
  void send_addCity(const Credentials& credentials, const UserDevice& userdevice, const City& value);
  void recv_addCity(City& _return);
  void addDictEntry(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value);
  void send_addDictEntry(const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value);
  void recv_addDictEntry(DictEntry& _return);
  void addBank(Bank& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& value);
  void send_addBank(const Credentials& credentials, const UserDevice& userdevice, const Bank& value);
  void recv_addBank(Bank& _return);
  void addOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& value);
  void send_addOrg(const Credentials& credentials, const UserDevice& userdevice, const Org& value);
  void recv_addOrg(Org& _return);
  void addOrgService(OrgService& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& value);
  void send_addOrgService(const Credentials& credentials, const UserDevice& userdevice, const OrgService& value);
  void recv_addOrgService(OrgService& _return);
  void addManager(Manager& _return, const Credentials& credentials, const UserDevice& userdevice, const Manager& value);
  void send_addManager(const Credentials& credentials, const UserDevice& userdevice, const Manager& value);
  void recv_addManager(Manager& _return);
  void addCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& value);
  void send_addCustomer(const Credentials& credentials, const UserDevice& userdevice, const Customer& value);
  void recv_addCustomer(Customer& _return);
  void addPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& value);
  void send_addPassenger(const Credentials& credentials, const UserDevice& userdevice, const Passenger& value);
  void recv_addPassenger(Passenger& _return);
  void addDispatcher(Dispatcher& _return, const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& value);
  void send_addDispatcher(const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& value);
  void recv_addDispatcher(Dispatcher& _return);
  void addDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& value);
  void send_addDriver(const Credentials& credentials, const UserDevice& userdevice, const Driver& value);
  void recv_addDriver(Driver& _return);
  void addVehicle(Vehicle& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& value);
  void send_addVehicle(const Credentials& credentials, const UserDevice& userdevice, const Vehicle& value);
  void recv_addVehicle(Vehicle& _return);
  void addVehicleColor(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value);
  void send_addVehicleColor(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value);
  void recv_addVehicleColor(DictEntry& _return);
  void addVehicleBrand(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name);
  void send_addVehicleBrand(const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name);
  void recv_addVehicleBrand(DictEntry& _return);
  void addVehicleModel(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year);
  void send_addVehicleModel(const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year);
  void recv_addVehicleModel(DictEntry& _return);
  void addVehicleModelByBrandName(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year);
  void send_addVehicleModelByBrandName(const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year);
  void recv_addVehicleModelByBrandName(DictEntry& _return);
  void addTariffPlan(TariffPlan& _return, const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& value);
  void send_addTariffPlan(const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& value);
  void recv_addTariffPlan(TariffPlan& _return);
  void addRate(Rate& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& value);
  void send_addRate(const Credentials& credentials, const UserDevice& userdevice, const Rate& value);
  void recv_addRate(Rate& _return);
  void addServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value);
  void send_addServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value);
  void recv_addServiceOrder(ServiceOrder& _return);
  void getServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_getServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void recv_getServiceOrder(ServiceOrder& _return);
  void getPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getPassenger(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getPassenger(Passenger& _return);
  void getCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getCustomer(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getCustomer(Customer& _return);
  void getDispatcher(Dispatcher& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getDispatcher(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getDispatcher(Dispatcher& _return);
  void getDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_getDriver(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_getDriver(Driver& _return);
  void addServiceOrderDecline(ServiceOrderDecline& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value);
  void send_addServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value);
  void recv_addServiceOrderDecline(ServiceOrderDecline& _return);
  void addClaim(Claim& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& value);
  void send_addClaim(const Credentials& credentials, const UserDevice& userdevice, const Claim& value);
  void recv_addClaim(Claim& _return);
  void addTrack(Track& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& value);
  void send_addTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& value);
  void recv_addTrack(Track& _return);
  void rmCity(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmCity(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmCity();
  void rmVehicle(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmVehicle(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmVehicle();
  void rmManager(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmManager(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmManager();
  void rmTariffPlan(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmTariffPlan(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmTariffPlan();
  void rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmRate();
  void rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmServiceOrder();
  void rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmServiceOrderDecline();
  void rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmClaim();
  void rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmTrack();
  void rmOldTracks(const Credentials& credentials, const UserDevice& userdevice, const DATE olderthan);
  void send_rmOldTracks(const Credentials& credentials, const UserDevice& userdevice, const DATE olderthan);
  void recv_rmOldTracks();
  void findOrg(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange);
  void send_findOrg(const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange);
  void recv_findOrg(Orgs& _return);
  void findOrgByName(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findOrgByName(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findOrgByName(Orgs& _return);
  void findColor(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findColor(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findColor(DictEntries& _return);
  void findBrand(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findBrand(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findBrand(DictEntries& _return);
  void findModel(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange);
  void send_findModel(const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange);
  void recv_findModel(DictEntries& _return);
  void findModelByBrandName(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange);
  void send_findModelByBrandName(const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange);
  void recv_findModelByBrandName(DictEntries& _return);
  void findCity(Cities& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void send_findCity(const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange);
  void recv_findCity(Cities& _return);
  void findManager(Managers& _return, const Credentials& credentials, const UserDevice& userdevice, const Manager& search, const RowRange& rowrange);
  void send_findManager(const Credentials& credentials, const UserDevice& userdevice, const Manager& search, const RowRange& rowrange);
  void recv_findManager(Managers& _return);
  void findDriver(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange);
  void send_findDriver(const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange);
  void recv_findDriver(Drivers& _return);
  void getDriverOnlineAvailable(DriverOnlineMap& _return, const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid);
  void send_getDriverOnlineAvailable(const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid);
  void recv_getDriverOnlineAvailable(DriverOnlineMap& _return);
  void getDriverAvailable(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid);
  void send_getDriverAvailable(const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid);
  void recv_getDriverAvailable(Drivers& _return);
  void findCustomer(Customers& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange);
  void send_findCustomer(const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange);
  void recv_findCustomer(Customers& _return);
  void findPassenger(Passengers& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange);
  void send_findPassenger(const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange);
  void recv_findPassenger(Passengers& _return);
  void findTariffPlan(TariffPlans& _return, const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& search, const RowRange& rowrange);
  void send_findTariffPlan(const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& search, const RowRange& rowrange);
  void recv_findTariffPlan(TariffPlans& _return);
  void findRate(Rates& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange);
  void send_findRate(const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange);
  void recv_findRate(Rates& _return);
  void findServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findServiceOrder(ServiceOrders& _return);
  void findServiceOrderDecline(ServiceOrderDeclines& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findServiceOrderDecline(ServiceOrderDeclines& _return);
  void findClaim(Claims& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findClaim(const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findClaim(Claims& _return);
  void findTrack(Tracks& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange);
  void send_findTrack(const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange);
  void recv_findTrack(Tracks& _return);
  void getEvents(NotificationEvents& _return, const Credentials& credentials, const UserDevice& userdevice, const ID startId, const RowRange& rowrange);
  void send_getEvents(const Credentials& credentials, const UserDevice& userdevice, const ID startId, const RowRange& rowrange);
  void recv_getEvents(NotificationEvents& _return);
  bool getOnline(const Credentials& credentials, const UserDevice& userdevice);
  void send_getOnline(const Credentials& credentials, const UserDevice& userdevice);
  bool recv_getOnline();
  bool setOnline(const Credentials& credentials, const UserDevice& userdevice, const bool value);
  void send_setOnline(const Credentials& credentials, const UserDevice& userdevice, const bool value);
  bool recv_setOnline();
  bool takeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid, const bool confirm, const NUMBER32 provisionminutes);
  void send_takeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid, const bool confirm, const NUMBER32 provisionminutes);
  bool recv_takeOrder();
  bool startWaiting(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_startWaiting(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  bool recv_startWaiting();
  bool startDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_startDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  bool recv_startDriving();
  bool stopDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_stopDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  bool recv_stopDriving();
  bool completeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_completeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  bool recv_completeOrder();
  bool cancelOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_cancelOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  bool recv_cancelOrder();
  bool failOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  void send_failOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid);
  bool recv_failOrder();
  void getDriverServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const RowRange& rowrange);
  void send_getDriverServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const RowRange& rowrange);
  void recv_getDriverServiceOrder(ServiceOrders& _return);
  void findAutoPayment(AutoPayments& _return, const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& search, const RowRange& rowrange);
  void send_findAutoPayment(const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& search, const RowRange& rowrange);
  void recv_findAutoPayment(AutoPayments& _return);
  void findBillAct(BillActs& _return, const Credentials& credentials, const UserDevice& userdevice, const BillAct& search, const RowRange& rowrange);
  void send_findBillAct(const Credentials& credentials, const UserDevice& userdevice, const BillAct& search, const RowRange& rowrange);
  void recv_findBillAct(BillActs& _return);
  void findDriverBlackList(DriverBlackLists& _return, const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& search, const RowRange& rowrange);
  void send_findDriverBlackList(const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& search, const RowRange& rowrange);
  void recv_findDriverBlackList(DriverBlackLists& _return);
  void findDispatcher(Dispatchers& _return, const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& search, const RowRange& rowrange);
  void send_findDispatcher(const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& search, const RowRange& rowrange);
  void recv_findDispatcher(Dispatchers& _return);
  void findNotification(Notifications& _return, const Credentials& credentials, const UserDevice& userdevice, const Notification& search, const RowRange& rowrange);
  void send_findNotification(const Credentials& credentials, const UserDevice& userdevice, const Notification& search, const RowRange& rowrange);
  void recv_findNotification(Notifications& _return);
  void findShedule(Shedules& _return, const Credentials& credentials, const UserDevice& userdevice, const Shedule& search, const RowRange& rowrange);
  void send_findShedule(const Credentials& credentials, const UserDevice& userdevice, const Shedule& search, const RowRange& rowrange);
  void recv_findShedule(Shedules& _return);
  void findServiceOrderStop(ServiceOrderStops& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& search, const RowRange& rowrange);
  void send_findServiceOrderStop(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& search, const RowRange& rowrange);
  void recv_findServiceOrderStop(ServiceOrderStops& _return);
  void findCustomerStatistic(CustomerStatistics& _return, const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& search, const RowRange& rowrange);
  void send_findCustomerStatistic(const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& search, const RowRange& rowrange);
  void recv_findCustomerStatistic(CustomerStatistics& _return);
  void addAutoPayment(AutoPayment& _return, const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& value);
  void send_addAutoPayment(const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& value);
  void recv_addAutoPayment(AutoPayment& _return);
  void addBillAct(BillAct& _return, const Credentials& credentials, const UserDevice& userdevice, const BillAct& value);
  void send_addBillAct(const Credentials& credentials, const UserDevice& userdevice, const BillAct& value);
  void recv_addBillAct(BillAct& _return);
  void addDriverBlackList(DriverBlackList& _return, const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& value);
  void send_addDriverBlackList(const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& value);
  void recv_addDriverBlackList(DriverBlackList& _return);
  void addNotification(Notification& _return, const Credentials& credentials, const UserDevice& userdevice, const Notification& value);
  void send_addNotification(const Credentials& credentials, const UserDevice& userdevice, const Notification& value);
  void recv_addNotification(Notification& _return);
  void addShedule(Shedule& _return, const Credentials& credentials, const UserDevice& userdevice, const Shedule& value);
  void send_addShedule(const Credentials& credentials, const UserDevice& userdevice, const Shedule& value);
  void recv_addShedule(Shedule& _return);
  void addServiceOrderStop(ServiceOrderStop& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& value);
  void send_addServiceOrderStop(const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& value);
  void recv_addServiceOrderStop(ServiceOrderStop& _return);
  void addCustomerStatistic(CustomerStatistic& _return, const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& value);
  void send_addCustomerStatistic(const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& value);
  void recv_addCustomerStatistic(CustomerStatistic& _return);
  void rmAutoPayment(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmAutoPayment(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmAutoPayment();
  void rmBank(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmBank(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmBank();
  void rmBillAct(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmBillAct(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmBillAct();
  void rmVehicleBrand(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmVehicleBrand(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmVehicleBrand();
  void rmVehicleColor(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmVehicleColor(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmVehicleColor();
  void rmDictEntry(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmDictEntry(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmDictEntry();
  void rmDriver(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmDriver(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmDriver();
  void rmDriverBlackList(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmDriverBlackList(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmDriverBlackList();
  void rmPassenger(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmPassenger(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmPassenger();
  void rmNotification(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmNotification(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmNotification();
  void rmCustomer(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmCustomer(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmCustomer();
  void rmDispatcher(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmDispatcher(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmDispatcher();
  void rmShedule(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmShedule(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmShedule();
  void rmServiceOrderStop(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmServiceOrderStop(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmServiceOrderStop();
  void rmCustomerStatistic(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void send_rmCustomerStatistic(const Credentials& credentials, const UserDevice& userdevice, const ID id);
  void recv_rmCustomerStatistic();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PassengerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PassengerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PassengerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDocument(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDictEntry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDictTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBankByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findOrgService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findVehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findVehicleid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDictEntry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addBank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addOrg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addOrgService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCustomer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDispatcher(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleColor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleBrand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addVehicleModelByBrandName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addTariffPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCustomer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDispatcher(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addServiceOrderDecline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addClaim(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmCity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmVehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmTariffPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmServiceOrderDecline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmClaim(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmOldTracks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findOrg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findOrgByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findColor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBrand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findModel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findModelByBrandName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findCity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findManager(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDriverOnlineAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDriverAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findCustomer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findTariffPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findServiceOrderDecline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findClaim(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findTrack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_takeOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startWaiting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startDriving(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopDriving(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_completeOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_failOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDriverServiceOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findAutoPayment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findBillAct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDriverBlackList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findDispatcher(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findShedule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findServiceOrderStop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_findCustomerStatistic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addAutoPayment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addBillAct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDriverBlackList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addShedule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addServiceOrderStop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addCustomerStatistic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmAutoPayment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmBank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmBillAct(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmVehicleBrand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmVehicleColor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmDictEntry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmDriver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmDriverBlackList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmPassenger(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmNotification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmCustomer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmDispatcher(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmShedule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmServiceOrderStop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmCustomerStatistic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PassengerServiceProcessor(boost::shared_ptr<PassengerServiceIf> iface) :
    iface_(iface) {
    processMap_["getDocument"] = &PassengerServiceProcessor::process_getDocument;
    processMap_["getOrg"] = &PassengerServiceProcessor::process_getOrg;
    processMap_["loginDriver"] = &PassengerServiceProcessor::process_loginDriver;
    processMap_["loginPassenger"] = &PassengerServiceProcessor::process_loginPassenger;
    processMap_["findDictEntry"] = &PassengerServiceProcessor::process_findDictEntry;
    processMap_["findDictTag"] = &PassengerServiceProcessor::process_findDictTag;
    processMap_["findBank"] = &PassengerServiceProcessor::process_findBank;
    processMap_["findBankByName"] = &PassengerServiceProcessor::process_findBankByName;
    processMap_["findOrgService"] = &PassengerServiceProcessor::process_findOrgService;
    processMap_["findVehicle"] = &PassengerServiceProcessor::process_findVehicle;
    processMap_["findVehicleid"] = &PassengerServiceProcessor::process_findVehicleid;
    processMap_["addCity"] = &PassengerServiceProcessor::process_addCity;
    processMap_["addDictEntry"] = &PassengerServiceProcessor::process_addDictEntry;
    processMap_["addBank"] = &PassengerServiceProcessor::process_addBank;
    processMap_["addOrg"] = &PassengerServiceProcessor::process_addOrg;
    processMap_["addOrgService"] = &PassengerServiceProcessor::process_addOrgService;
    processMap_["addManager"] = &PassengerServiceProcessor::process_addManager;
    processMap_["addCustomer"] = &PassengerServiceProcessor::process_addCustomer;
    processMap_["addPassenger"] = &PassengerServiceProcessor::process_addPassenger;
    processMap_["addDispatcher"] = &PassengerServiceProcessor::process_addDispatcher;
    processMap_["addDriver"] = &PassengerServiceProcessor::process_addDriver;
    processMap_["addVehicle"] = &PassengerServiceProcessor::process_addVehicle;
    processMap_["addVehicleColor"] = &PassengerServiceProcessor::process_addVehicleColor;
    processMap_["addVehicleBrand"] = &PassengerServiceProcessor::process_addVehicleBrand;
    processMap_["addVehicleModel"] = &PassengerServiceProcessor::process_addVehicleModel;
    processMap_["addVehicleModelByBrandName"] = &PassengerServiceProcessor::process_addVehicleModelByBrandName;
    processMap_["addTariffPlan"] = &PassengerServiceProcessor::process_addTariffPlan;
    processMap_["addRate"] = &PassengerServiceProcessor::process_addRate;
    processMap_["addServiceOrder"] = &PassengerServiceProcessor::process_addServiceOrder;
    processMap_["getServiceOrder"] = &PassengerServiceProcessor::process_getServiceOrder;
    processMap_["getPassenger"] = &PassengerServiceProcessor::process_getPassenger;
    processMap_["getCustomer"] = &PassengerServiceProcessor::process_getCustomer;
    processMap_["getDispatcher"] = &PassengerServiceProcessor::process_getDispatcher;
    processMap_["getDriver"] = &PassengerServiceProcessor::process_getDriver;
    processMap_["addServiceOrderDecline"] = &PassengerServiceProcessor::process_addServiceOrderDecline;
    processMap_["addClaim"] = &PassengerServiceProcessor::process_addClaim;
    processMap_["addTrack"] = &PassengerServiceProcessor::process_addTrack;
    processMap_["rmCity"] = &PassengerServiceProcessor::process_rmCity;
    processMap_["rmVehicle"] = &PassengerServiceProcessor::process_rmVehicle;
    processMap_["rmManager"] = &PassengerServiceProcessor::process_rmManager;
    processMap_["rmTariffPlan"] = &PassengerServiceProcessor::process_rmTariffPlan;
    processMap_["rmRate"] = &PassengerServiceProcessor::process_rmRate;
    processMap_["rmServiceOrder"] = &PassengerServiceProcessor::process_rmServiceOrder;
    processMap_["rmServiceOrderDecline"] = &PassengerServiceProcessor::process_rmServiceOrderDecline;
    processMap_["rmClaim"] = &PassengerServiceProcessor::process_rmClaim;
    processMap_["rmTrack"] = &PassengerServiceProcessor::process_rmTrack;
    processMap_["rmOldTracks"] = &PassengerServiceProcessor::process_rmOldTracks;
    processMap_["findOrg"] = &PassengerServiceProcessor::process_findOrg;
    processMap_["findOrgByName"] = &PassengerServiceProcessor::process_findOrgByName;
    processMap_["findColor"] = &PassengerServiceProcessor::process_findColor;
    processMap_["findBrand"] = &PassengerServiceProcessor::process_findBrand;
    processMap_["findModel"] = &PassengerServiceProcessor::process_findModel;
    processMap_["findModelByBrandName"] = &PassengerServiceProcessor::process_findModelByBrandName;
    processMap_["findCity"] = &PassengerServiceProcessor::process_findCity;
    processMap_["findManager"] = &PassengerServiceProcessor::process_findManager;
    processMap_["findDriver"] = &PassengerServiceProcessor::process_findDriver;
    processMap_["getDriverOnlineAvailable"] = &PassengerServiceProcessor::process_getDriverOnlineAvailable;
    processMap_["getDriverAvailable"] = &PassengerServiceProcessor::process_getDriverAvailable;
    processMap_["findCustomer"] = &PassengerServiceProcessor::process_findCustomer;
    processMap_["findPassenger"] = &PassengerServiceProcessor::process_findPassenger;
    processMap_["findTariffPlan"] = &PassengerServiceProcessor::process_findTariffPlan;
    processMap_["findRate"] = &PassengerServiceProcessor::process_findRate;
    processMap_["findServiceOrder"] = &PassengerServiceProcessor::process_findServiceOrder;
    processMap_["findServiceOrderDecline"] = &PassengerServiceProcessor::process_findServiceOrderDecline;
    processMap_["findClaim"] = &PassengerServiceProcessor::process_findClaim;
    processMap_["findTrack"] = &PassengerServiceProcessor::process_findTrack;
    processMap_["getEvents"] = &PassengerServiceProcessor::process_getEvents;
    processMap_["getOnline"] = &PassengerServiceProcessor::process_getOnline;
    processMap_["setOnline"] = &PassengerServiceProcessor::process_setOnline;
    processMap_["takeOrder"] = &PassengerServiceProcessor::process_takeOrder;
    processMap_["startWaiting"] = &PassengerServiceProcessor::process_startWaiting;
    processMap_["startDriving"] = &PassengerServiceProcessor::process_startDriving;
    processMap_["stopDriving"] = &PassengerServiceProcessor::process_stopDriving;
    processMap_["completeOrder"] = &PassengerServiceProcessor::process_completeOrder;
    processMap_["cancelOrder"] = &PassengerServiceProcessor::process_cancelOrder;
    processMap_["failOrder"] = &PassengerServiceProcessor::process_failOrder;
    processMap_["getDriverServiceOrder"] = &PassengerServiceProcessor::process_getDriverServiceOrder;
    processMap_["findAutoPayment"] = &PassengerServiceProcessor::process_findAutoPayment;
    processMap_["findBillAct"] = &PassengerServiceProcessor::process_findBillAct;
    processMap_["findDriverBlackList"] = &PassengerServiceProcessor::process_findDriverBlackList;
    processMap_["findDispatcher"] = &PassengerServiceProcessor::process_findDispatcher;
    processMap_["findNotification"] = &PassengerServiceProcessor::process_findNotification;
    processMap_["findShedule"] = &PassengerServiceProcessor::process_findShedule;
    processMap_["findServiceOrderStop"] = &PassengerServiceProcessor::process_findServiceOrderStop;
    processMap_["findCustomerStatistic"] = &PassengerServiceProcessor::process_findCustomerStatistic;
    processMap_["addAutoPayment"] = &PassengerServiceProcessor::process_addAutoPayment;
    processMap_["addBillAct"] = &PassengerServiceProcessor::process_addBillAct;
    processMap_["addDriverBlackList"] = &PassengerServiceProcessor::process_addDriverBlackList;
    processMap_["addNotification"] = &PassengerServiceProcessor::process_addNotification;
    processMap_["addShedule"] = &PassengerServiceProcessor::process_addShedule;
    processMap_["addServiceOrderStop"] = &PassengerServiceProcessor::process_addServiceOrderStop;
    processMap_["addCustomerStatistic"] = &PassengerServiceProcessor::process_addCustomerStatistic;
    processMap_["rmAutoPayment"] = &PassengerServiceProcessor::process_rmAutoPayment;
    processMap_["rmBank"] = &PassengerServiceProcessor::process_rmBank;
    processMap_["rmBillAct"] = &PassengerServiceProcessor::process_rmBillAct;
    processMap_["rmVehicleBrand"] = &PassengerServiceProcessor::process_rmVehicleBrand;
    processMap_["rmVehicleColor"] = &PassengerServiceProcessor::process_rmVehicleColor;
    processMap_["rmDictEntry"] = &PassengerServiceProcessor::process_rmDictEntry;
    processMap_["rmDriver"] = &PassengerServiceProcessor::process_rmDriver;
    processMap_["rmDriverBlackList"] = &PassengerServiceProcessor::process_rmDriverBlackList;
    processMap_["rmPassenger"] = &PassengerServiceProcessor::process_rmPassenger;
    processMap_["rmNotification"] = &PassengerServiceProcessor::process_rmNotification;
    processMap_["rmCustomer"] = &PassengerServiceProcessor::process_rmCustomer;
    processMap_["rmDispatcher"] = &PassengerServiceProcessor::process_rmDispatcher;
    processMap_["rmShedule"] = &PassengerServiceProcessor::process_rmShedule;
    processMap_["rmServiceOrderStop"] = &PassengerServiceProcessor::process_rmServiceOrderStop;
    processMap_["rmCustomerStatistic"] = &PassengerServiceProcessor::process_rmCustomerStatistic;
  }

  virtual ~PassengerServiceProcessor() {}
};

class PassengerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PassengerServiceProcessorFactory(const ::boost::shared_ptr< PassengerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PassengerServiceIfFactory > handlerFactory_;
};

class PassengerServiceMultiface : virtual public PassengerServiceIf {
 public:
  PassengerServiceMultiface(std::vector<boost::shared_ptr<PassengerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PassengerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PassengerServiceIf> > ifaces_;
  PassengerServiceMultiface() {}
  void add(boost::shared_ptr<PassengerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDocument(Document& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDocument(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getDocument(_return, credentials, userdevice, id);
    return;
  }

  void getOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrg(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getOrg(_return, credentials, userdevice, id);
    return;
  }

  void loginDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginDriver(_return, credentials, userdevice);
    }
    ifaces_[i]->loginDriver(_return, credentials, userdevice);
    return;
  }

  void loginPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginPassenger(_return, credentials, userdevice);
    }
    ifaces_[i]->loginPassenger(_return, credentials, userdevice);
    return;
  }

  void findDictEntry(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDictEntry(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDictEntry(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findDictTag(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const DictTag::type search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDictTag(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDictTag(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findBank(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBank(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findBank(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findBankByName(Banks& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBankByName(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findBankByName(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findOrgService(OrgServices& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findOrgService(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findOrgService(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findVehicle(Vehicles& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findVehicle(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findVehicle(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findVehicleid(Vehicleids& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findVehicleid(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findVehicleid(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void addCity(City& _return, const Credentials& credentials, const UserDevice& userdevice, const City& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCity(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addCity(_return, credentials, userdevice, value);
    return;
  }

  void addDictEntry(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const DictEntry& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDictEntry(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addDictEntry(_return, credentials, userdevice, value);
    return;
  }

  void addBank(Bank& _return, const Credentials& credentials, const UserDevice& userdevice, const Bank& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addBank(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addBank(_return, credentials, userdevice, value);
    return;
  }

  void addOrg(Org& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addOrg(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addOrg(_return, credentials, userdevice, value);
    return;
  }

  void addOrgService(OrgService& _return, const Credentials& credentials, const UserDevice& userdevice, const OrgService& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addOrgService(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addOrgService(_return, credentials, userdevice, value);
    return;
  }

  void addManager(Manager& _return, const Credentials& credentials, const UserDevice& userdevice, const Manager& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addManager(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addManager(_return, credentials, userdevice, value);
    return;
  }

  void addCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCustomer(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addCustomer(_return, credentials, userdevice, value);
    return;
  }

  void addPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addPassenger(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addPassenger(_return, credentials, userdevice, value);
    return;
  }

  void addDispatcher(Dispatcher& _return, const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDispatcher(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addDispatcher(_return, credentials, userdevice, value);
    return;
  }

  void addDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDriver(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addDriver(_return, credentials, userdevice, value);
    return;
  }

  void addVehicle(Vehicle& _return, const Credentials& credentials, const UserDevice& userdevice, const Vehicle& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicle(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addVehicle(_return, credentials, userdevice, value);
    return;
  }

  void addVehicleColor(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const NUMBER32 value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleColor(_return, credentials, userdevice, name, value);
    }
    ifaces_[i]->addVehicleColor(_return, credentials, userdevice, name, value);
    return;
  }

  void addVehicleBrand(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const VehicleCategory::type category, const STR& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleBrand(_return, credentials, userdevice, category, name);
    }
    ifaces_[i]->addVehicleBrand(_return, credentials, userdevice, category, name);
    return;
  }

  void addVehicleModel(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const NUMBER32 year) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleModel(_return, credentials, userdevice, brandid, name, year);
    }
    ifaces_[i]->addVehicleModel(_return, credentials, userdevice, brandid, name, year);
    return;
  }

  void addVehicleModelByBrandName(DictEntry& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const NUMBER32 year) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addVehicleModelByBrandName(_return, credentials, userdevice, brandname, name, year);
    }
    ifaces_[i]->addVehicleModelByBrandName(_return, credentials, userdevice, brandname, name, year);
    return;
  }

  void addTariffPlan(TariffPlan& _return, const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addTariffPlan(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addTariffPlan(_return, credentials, userdevice, value);
    return;
  }

  void addRate(Rate& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRate(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addRate(_return, credentials, userdevice, value);
    return;
  }

  void addServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addServiceOrder(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addServiceOrder(_return, credentials, userdevice, value);
    return;
  }

  void getServiceOrder(ServiceOrder& _return, const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceOrder(_return, credentials, userdevice, serviceorderid);
    }
    ifaces_[i]->getServiceOrder(_return, credentials, userdevice, serviceorderid);
    return;
  }

  void getPassenger(Passenger& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPassenger(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getPassenger(_return, credentials, userdevice, id);
    return;
  }

  void getCustomer(Customer& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCustomer(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getCustomer(_return, credentials, userdevice, id);
    return;
  }

  void getDispatcher(Dispatcher& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDispatcher(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getDispatcher(_return, credentials, userdevice, id);
    return;
  }

  void getDriver(Driver& _return, const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDriver(_return, credentials, userdevice, id);
    }
    ifaces_[i]->getDriver(_return, credentials, userdevice, id);
    return;
  }

  void addServiceOrderDecline(ServiceOrderDecline& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addServiceOrderDecline(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addServiceOrderDecline(_return, credentials, userdevice, value);
    return;
  }

  void addClaim(Claim& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addClaim(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addClaim(_return, credentials, userdevice, value);
    return;
  }

  void addTrack(Track& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addTrack(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addTrack(_return, credentials, userdevice, value);
    return;
  }

  void rmCity(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmCity(credentials, userdevice, id);
    }
    ifaces_[i]->rmCity(credentials, userdevice, id);
  }

  void rmVehicle(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmVehicle(credentials, userdevice, id);
    }
    ifaces_[i]->rmVehicle(credentials, userdevice, id);
  }

  void rmManager(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmManager(credentials, userdevice, id);
    }
    ifaces_[i]->rmManager(credentials, userdevice, id);
  }

  void rmTariffPlan(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmTariffPlan(credentials, userdevice, id);
    }
    ifaces_[i]->rmTariffPlan(credentials, userdevice, id);
  }

  void rmRate(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmRate(credentials, userdevice, id);
    }
    ifaces_[i]->rmRate(credentials, userdevice, id);
  }

  void rmServiceOrder(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmServiceOrder(credentials, userdevice, id);
    }
    ifaces_[i]->rmServiceOrder(credentials, userdevice, id);
  }

  void rmServiceOrderDecline(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmServiceOrderDecline(credentials, userdevice, id);
    }
    ifaces_[i]->rmServiceOrderDecline(credentials, userdevice, id);
  }

  void rmClaim(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmClaim(credentials, userdevice, id);
    }
    ifaces_[i]->rmClaim(credentials, userdevice, id);
  }

  void rmTrack(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmTrack(credentials, userdevice, id);
    }
    ifaces_[i]->rmTrack(credentials, userdevice, id);
  }

  void rmOldTracks(const Credentials& credentials, const UserDevice& userdevice, const DATE olderthan) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmOldTracks(credentials, userdevice, olderthan);
    }
    ifaces_[i]->rmOldTracks(credentials, userdevice, olderthan);
  }

  void findOrg(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const Org& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findOrg(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findOrg(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findOrgByName(Orgs& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findOrgByName(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findOrgByName(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findColor(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findColor(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findColor(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findBrand(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBrand(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findBrand(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findModel(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const ID brandid, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findModel(_return, credentials, userdevice, brandid, name, rowrange);
    }
    ifaces_[i]->findModel(_return, credentials, userdevice, brandid, name, rowrange);
    return;
  }

  void findModelByBrandName(DictEntries& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& brandname, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findModelByBrandName(_return, credentials, userdevice, brandname, name, rowrange);
    }
    ifaces_[i]->findModelByBrandName(_return, credentials, userdevice, brandname, name, rowrange);
    return;
  }

  void findCity(Cities& _return, const Credentials& credentials, const UserDevice& userdevice, const STR& name, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findCity(_return, credentials, userdevice, name, rowrange);
    }
    ifaces_[i]->findCity(_return, credentials, userdevice, name, rowrange);
    return;
  }

  void findManager(Managers& _return, const Credentials& credentials, const UserDevice& userdevice, const Manager& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findManager(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findManager(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findDriver(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Driver& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDriver(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDriver(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void getDriverOnlineAvailable(DriverOnlineMap& _return, const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDriverOnlineAvailable(_return, credentials, userdevice, cityid);
    }
    ifaces_[i]->getDriverOnlineAvailable(_return, credentials, userdevice, cityid);
    return;
  }

  void getDriverAvailable(Drivers& _return, const Credentials& credentials, const UserDevice& userdevice, const Cityid cityid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDriverAvailable(_return, credentials, userdevice, cityid);
    }
    ifaces_[i]->getDriverAvailable(_return, credentials, userdevice, cityid);
    return;
  }

  void findCustomer(Customers& _return, const Credentials& credentials, const UserDevice& userdevice, const Customer& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findCustomer(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findCustomer(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findPassenger(Passengers& _return, const Credentials& credentials, const UserDevice& userdevice, const Passenger& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findPassenger(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findPassenger(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findTariffPlan(TariffPlans& _return, const Credentials& credentials, const UserDevice& userdevice, const TariffPlan& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findTariffPlan(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findTariffPlan(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findRate(Rates& _return, const Credentials& credentials, const UserDevice& userdevice, const Rate& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findRate(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findRate(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrder& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findServiceOrder(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findServiceOrder(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void findServiceOrderDecline(ServiceOrderDeclines& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderDecline& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findServiceOrderDecline(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findServiceOrderDecline(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void findClaim(Claims& _return, const Credentials& credentials, const UserDevice& userdevice, const Claim& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findClaim(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findClaim(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void findTrack(Tracks& _return, const Credentials& credentials, const UserDevice& userdevice, const Track& search, const DateRange& sheduletime, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findTrack(_return, credentials, userdevice, search, sheduletime, rowrange);
    }
    ifaces_[i]->findTrack(_return, credentials, userdevice, search, sheduletime, rowrange);
    return;
  }

  void getEvents(NotificationEvents& _return, const Credentials& credentials, const UserDevice& userdevice, const ID startId, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEvents(_return, credentials, userdevice, startId, rowrange);
    }
    ifaces_[i]->getEvents(_return, credentials, userdevice, startId, rowrange);
    return;
  }

  bool getOnline(const Credentials& credentials, const UserDevice& userdevice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOnline(credentials, userdevice);
    }
    return ifaces_[i]->getOnline(credentials, userdevice);
  }

  bool setOnline(const Credentials& credentials, const UserDevice& userdevice, const bool value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setOnline(credentials, userdevice, value);
    }
    return ifaces_[i]->setOnline(credentials, userdevice, value);
  }

  bool takeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid, const bool confirm, const NUMBER32 provisionminutes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->takeOrder(credentials, userdevice, serviceorderid, confirm, provisionminutes);
    }
    return ifaces_[i]->takeOrder(credentials, userdevice, serviceorderid, confirm, provisionminutes);
  }

  bool startWaiting(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startWaiting(credentials, userdevice, serviceorderid);
    }
    return ifaces_[i]->startWaiting(credentials, userdevice, serviceorderid);
  }

  bool startDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startDriving(credentials, userdevice, serviceorderid);
    }
    return ifaces_[i]->startDriving(credentials, userdevice, serviceorderid);
  }

  bool stopDriving(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopDriving(credentials, userdevice, serviceorderid);
    }
    return ifaces_[i]->stopDriving(credentials, userdevice, serviceorderid);
  }

  bool completeOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->completeOrder(credentials, userdevice, serviceorderid);
    }
    return ifaces_[i]->completeOrder(credentials, userdevice, serviceorderid);
  }

  bool cancelOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelOrder(credentials, userdevice, serviceorderid);
    }
    return ifaces_[i]->cancelOrder(credentials, userdevice, serviceorderid);
  }

  bool failOrder(const Credentials& credentials, const UserDevice& userdevice, const ID serviceorderid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->failOrder(credentials, userdevice, serviceorderid);
    }
    return ifaces_[i]->failOrder(credentials, userdevice, serviceorderid);
  }

  void getDriverServiceOrder(ServiceOrders& _return, const Credentials& credentials, const UserDevice& userdevice, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDriverServiceOrder(_return, credentials, userdevice, rowrange);
    }
    ifaces_[i]->getDriverServiceOrder(_return, credentials, userdevice, rowrange);
    return;
  }

  void findAutoPayment(AutoPayments& _return, const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findAutoPayment(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findAutoPayment(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findBillAct(BillActs& _return, const Credentials& credentials, const UserDevice& userdevice, const BillAct& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findBillAct(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findBillAct(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findDriverBlackList(DriverBlackLists& _return, const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDriverBlackList(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDriverBlackList(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findDispatcher(Dispatchers& _return, const Credentials& credentials, const UserDevice& userdevice, const Dispatcher& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findDispatcher(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findDispatcher(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findNotification(Notifications& _return, const Credentials& credentials, const UserDevice& userdevice, const Notification& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findNotification(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findNotification(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findShedule(Shedules& _return, const Credentials& credentials, const UserDevice& userdevice, const Shedule& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findShedule(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findShedule(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findServiceOrderStop(ServiceOrderStops& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findServiceOrderStop(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findServiceOrderStop(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void findCustomerStatistic(CustomerStatistics& _return, const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& search, const RowRange& rowrange) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findCustomerStatistic(_return, credentials, userdevice, search, rowrange);
    }
    ifaces_[i]->findCustomerStatistic(_return, credentials, userdevice, search, rowrange);
    return;
  }

  void addAutoPayment(AutoPayment& _return, const Credentials& credentials, const UserDevice& userdevice, const AutoPayment& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addAutoPayment(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addAutoPayment(_return, credentials, userdevice, value);
    return;
  }

  void addBillAct(BillAct& _return, const Credentials& credentials, const UserDevice& userdevice, const BillAct& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addBillAct(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addBillAct(_return, credentials, userdevice, value);
    return;
  }

  void addDriverBlackList(DriverBlackList& _return, const Credentials& credentials, const UserDevice& userdevice, const DriverBlackList& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDriverBlackList(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addDriverBlackList(_return, credentials, userdevice, value);
    return;
  }

  void addNotification(Notification& _return, const Credentials& credentials, const UserDevice& userdevice, const Notification& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addNotification(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addNotification(_return, credentials, userdevice, value);
    return;
  }

  void addShedule(Shedule& _return, const Credentials& credentials, const UserDevice& userdevice, const Shedule& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addShedule(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addShedule(_return, credentials, userdevice, value);
    return;
  }

  void addServiceOrderStop(ServiceOrderStop& _return, const Credentials& credentials, const UserDevice& userdevice, const ServiceOrderStop& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addServiceOrderStop(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addServiceOrderStop(_return, credentials, userdevice, value);
    return;
  }

  void addCustomerStatistic(CustomerStatistic& _return, const Credentials& credentials, const UserDevice& userdevice, const CustomerStatistic& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addCustomerStatistic(_return, credentials, userdevice, value);
    }
    ifaces_[i]->addCustomerStatistic(_return, credentials, userdevice, value);
    return;
  }

  void rmAutoPayment(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmAutoPayment(credentials, userdevice, id);
    }
    ifaces_[i]->rmAutoPayment(credentials, userdevice, id);
  }

  void rmBank(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmBank(credentials, userdevice, id);
    }
    ifaces_[i]->rmBank(credentials, userdevice, id);
  }

  void rmBillAct(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmBillAct(credentials, userdevice, id);
    }
    ifaces_[i]->rmBillAct(credentials, userdevice, id);
  }

  void rmVehicleBrand(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmVehicleBrand(credentials, userdevice, id);
    }
    ifaces_[i]->rmVehicleBrand(credentials, userdevice, id);
  }

  void rmVehicleColor(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmVehicleColor(credentials, userdevice, id);
    }
    ifaces_[i]->rmVehicleColor(credentials, userdevice, id);
  }

  void rmDictEntry(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmDictEntry(credentials, userdevice, id);
    }
    ifaces_[i]->rmDictEntry(credentials, userdevice, id);
  }

  void rmDriver(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmDriver(credentials, userdevice, id);
    }
    ifaces_[i]->rmDriver(credentials, userdevice, id);
  }

  void rmDriverBlackList(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmDriverBlackList(credentials, userdevice, id);
    }
    ifaces_[i]->rmDriverBlackList(credentials, userdevice, id);
  }

  void rmPassenger(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmPassenger(credentials, userdevice, id);
    }
    ifaces_[i]->rmPassenger(credentials, userdevice, id);
  }

  void rmNotification(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmNotification(credentials, userdevice, id);
    }
    ifaces_[i]->rmNotification(credentials, userdevice, id);
  }

  void rmCustomer(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmCustomer(credentials, userdevice, id);
    }
    ifaces_[i]->rmCustomer(credentials, userdevice, id);
  }

  void rmDispatcher(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmDispatcher(credentials, userdevice, id);
    }
    ifaces_[i]->rmDispatcher(credentials, userdevice, id);
  }

  void rmShedule(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmShedule(credentials, userdevice, id);
    }
    ifaces_[i]->rmShedule(credentials, userdevice, id);
  }

  void rmServiceOrderStop(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmServiceOrderStop(credentials, userdevice, id);
    }
    ifaces_[i]->rmServiceOrderStop(credentials, userdevice, id);
  }

  void rmCustomerStatistic(const Credentials& credentials, const UserDevice& userdevice, const ID id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmCustomerStatistic(credentials, userdevice, id);
    }
    ifaces_[i]->rmCustomerStatistic(credentials, userdevice, id);
  }

};

} // namespace

#endif
