/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef taxi_TYPES_H
#define taxi_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace taxi {

struct Month {
  enum type {
    JAN = 0,
    FEB = 1,
    MAR = 2,
    APR = 3,
    MAY = 4,
    JUN = 5,
    JUL = 6,
    AUG = 7,
    SEP = 8,
    OCT = 9,
    NOV = 10,
    DEC = 11
  };
};

extern const std::map<int, const char*> _Month_VALUES_TO_NAMES;

struct OrgBuilding {
  enum type {
    OFFICEMAIN = 0,
    FACILITY = 1
  };
};

extern const std::map<int, const char*> _OrgBuilding_VALUES_TO_NAMES;

struct OrgServiceDept {
  enum type {
    CUSTOMER = 0,
    DRIVER = 1,
    OTHER = 2
  };
};

extern const std::map<int, const char*> _OrgServiceDept_VALUES_TO_NAMES;

struct OrgRole {
  enum type {
    ORGGUEST = 0,
    ORGSERVICE = 1,
    ORGTAXI = 2,
    ORGCUSTOMER = 3,
    ORGBANK = 4,
    ORGPROCESSOR = 5
  };
};

extern const std::map<int, const char*> _OrgRole_VALUES_TO_NAMES;

struct TaxiServiceRole {
  enum type {
    TS_DISPATCH = 0,
    TS_CARPOOL = 1
  };
};

extern const std::map<int, const char*> _TaxiServiceRole_VALUES_TO_NAMES;

struct PersonRole {
  enum type {
    ADMIN = 0,
    MANAGER = 1,
    CUSTOMER = 2,
    DISPATCHER = 3,
    DRIVER = 4,
    MASTER = 5,
    OPERATOR = 6,
    PASSENGER = 7,
    GUEST = 8,
    NOTAUTHORIZED = 9
  };
};

extern const std::map<int, const char*> _PersonRole_VALUES_TO_NAMES;

struct OrgPosition {
  enum type {
    SELFEMP = 0,
    EMP = 1,
    CHIEF = 2,
    ACCT = 3,
    MGR = 4
  };
};

extern const std::map<int, const char*> _OrgPosition_VALUES_TO_NAMES;

struct OrderRole {
  enum type {
    ORDER_FOR = 0,
    ORDER_BY = 1
  };
};

extern const std::map<int, const char*> _OrderRole_VALUES_TO_NAMES;

struct CrewRole {
  enum type {
    CREW_DRIVER = 0,
    CREW_LOADER = 1
  };
};

extern const std::map<int, const char*> _CrewRole_VALUES_TO_NAMES;

struct OrgAddressType {
  enum type {
    OA_REPORT = 0,
    OA_LEGAL = 1,
    OA_REAL = 2
  };
};

extern const std::map<int, const char*> _OrgAddressType_VALUES_TO_NAMES;

struct DeviceType {
  enum type {
    UNKNOWN = 0,
    ANDROID = 1,
    IOS = 2,
    JAVAME = 3,
    MOBILEBROWSER = 4,
    DESKTOPBROWSER = 5,
    APPSERVICE = 6
  };
};

extern const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES;

struct EmployeeStatus {
  enum type {
    ACTIVE = 1,
    INACTIVE = 2,
    DELETED = 3
  };
};

extern const std::map<int, const char*> _EmployeeStatus_VALUES_TO_NAMES;

struct VehicleStatus {
  enum type {
    ACTIVE = 1,
    INACTIVE = 2
  };
};

extern const std::map<int, const char*> _VehicleStatus_VALUES_TO_NAMES;

struct DocumentType {
  enum type {
    PASSPORT = 1,
    DRIVERLICENSE = 2,
    ACT = 3,
    BILL = 4,
    RECEIPT = 5,
    WAYBILL = 6,
    ENTLICENSE = 7,
    PAYMENTRECEIPT = 8
  };
};

extern const std::map<int, const char*> _DocumentType_VALUES_TO_NAMES;

struct CanOrder {
  enum type {
    EVERYTHING = 1,
    NOTHING = 2,
    ONLYROUTE = 3
  };
};

extern const std::map<int, const char*> _CanOrder_VALUES_TO_NAMES;

struct CabClass {
  enum type {
    ECONOMY = 1,
    COMFORT = 2,
    PREMIUM = 3
  };
};

extern const std::map<int, const char*> _CabClass_VALUES_TO_NAMES;

struct OrderTimeType {
  enum type {
    URGENT = 1,
    SPECIFIEDTIME = 2,
    EVERYDAY = 3
  };
};

extern const std::map<int, const char*> _OrderTimeType_VALUES_TO_NAMES;

struct OrderFeature {
  enum type {
    CHILDSEAT = 1,
    LOADER = 2
  };
};

extern const std::map<int, const char*> _OrderFeature_VALUES_TO_NAMES;

struct OrderStage {
  enum type {
    ORDERACCEPT = 1,
    ORDERDECLINED = 2,
    ORDERASSIGN = 3,
    ORDERASSIGNED = 4,
    ORDERCONFIRMED = 5,
    ORDERDRIVING = 6,
    ORDERWAITING = 7,
    ORDERTRANSPORTING = 8,
    ORDERSTOP = 9,
    ORDERCOMPLETE = 10,
    ORDERCANCELLED = 11,
    ORDERFAILED = 12
  };
};

extern const std::map<int, const char*> _OrderStage_VALUES_TO_NAMES;

struct PaymentState {
  enum type {
    READY = 0,
    PAID = 1,
    UNPAID = 2
  };
};

extern const std::map<int, const char*> _PaymentState_VALUES_TO_NAMES;

struct ClaimState {
  enum type {
    CLAIMNO = 0,
    CLAIM = 1,
    CLAIMCLOSED = 2
  };
};

extern const std::map<int, const char*> _ClaimState_VALUES_TO_NAMES;

struct TaxType {
  enum type {
    TAXORG = 1,
    TAXPERSON = 2,
    TAXFARMER = 3,
    TAXLAWYER = 4,
    TAXNOTARY = 5
  };
};

extern const std::map<int, const char*> _TaxType_VALUES_TO_NAMES;

struct OrgType {
  enum type {
    ORGGOV = 1,
    ORGCOMM = 2,
    ORGENTERPRISE = 3,
    ORGFARMER = 4,
    ORGOTHER = 5
  };
};

extern const std::map<int, const char*> _OrgType_VALUES_TO_NAMES;

struct OrderType {
  enum type {
    TAXI = 1,
    COURIER = 2
  };
};

extern const std::map<int, const char*> _OrderType_VALUES_TO_NAMES;

struct VehicleType {
  enum type {
    CAR = 1,
    COURIER = 2
  };
};

extern const std::map<int, const char*> _VehicleType_VALUES_TO_NAMES;

struct VehicleClass {
  enum type {
    VEHICLE_SMALL1 = 1,
    VEHICLE_SMALL2 = 2,
    VEHICLE_MIDDLE1 = 3,
    VEHICLE_MIDDLE2 = 4,
    VEHICLE_MIDDLE3 = 5,
    VEHICLE_SUPER = 6,
    VEHICLE_CROSS = 7,
    VEHICLE_VAN = 8,
    VEHICLE_COUPE = 9
  };
};

extern const std::map<int, const char*> _VehicleClass_VALUES_TO_NAMES;

struct VehicleCategory {
  enum type {
    VEHICLE_CAR = 1,
    VEHICLE_BIKE = 2,
    VEHICLE_SPEC = 3,
    VEHICLE_TRAILER = 4,
    VEHICLE_TRUCK = 5,
    VEHICLE_BUS = 6
  };
};

extern const std::map<int, const char*> _VehicleCategory_VALUES_TO_NAMES;

struct StopType {
  enum type {
    STOP_WAIT = 1,
    STOP_PICKUP = 2,
    STOP_THROW = 3,
    STOP_LOAD = 4,
    STOP_UNLOAD = 5
  };
};

extern const std::map<int, const char*> _StopType_VALUES_TO_NAMES;

struct DeclineOrderCause {
  enum type {
    DECLINE_BY_DRIVER = 0,
    DECLINE_BY_SERVICE = 1,
    DECLINE_BY_PASSENGER = 2
  };
};

extern const std::map<int, const char*> _DeclineOrderCause_VALUES_TO_NAMES;

struct BankRole {
  enum type {
    BANK_ACCOUNT = 0
  };
};

extern const std::map<int, const char*> _BankRole_VALUES_TO_NAMES;

struct ErrorType {
  enum type {
    ERR_FATAL = 0,
    ERR_BACKEND = 1,
    ERR_NOT_FOUND = 2,
    ERR_APP = 3,
    ERR_TOKEN_EXPIRED = 4,
    ERR_LOGIN = 5
  };
};

extern const std::map<int, const char*> _ErrorType_VALUES_TO_NAMES;

struct DictTag {
  enum type {
    TAG_VEHICLE_COLOR = 1,
    TAG_VEHICLE_BRAND = 2,
    TAG_VEHICLE_MODEL = 3
  };
};

extern const std::map<int, const char*> _DictTag_VALUES_TO_NAMES;

struct ServiceObject {
  enum type {
    SO_Unknown = 0,
    SO_AutoPayment = 1,
    SO_Bank = 2,
    SO_BillAct = 3,
    SO_City = 4,
    SO_Claim = 5,
    SO_Credentials = 6,
    SO_Customer = 7,
    SO_CustomerStatistic = 8,
    SO_DateRange = 9,
    SO_Dept = 10,
    SO_DictEntry = 11,
    SO_Dispatcher = 12,
    SO_Document = 13,
    SO_Driver = 14,
    SO_DriverBlackList = 15,
    SO_GeoLocation = 16,
    SO_Location = 17,
    SO_Manager = 18,
    SO_Notification = 19,
    SO_NotificationEvent = 20,
    SO_Org = 21,
    SO_OrgService = 22,
    SO_Passenger = 23,
    SO_PassengerLimit = 24,
    SO_PassengerUsage = 25,
    SO_Payload = 26,
    SO_Payment = 27,
    SO_Person = 28,
    SO_Rate = 29,
    SO_RowRange = 30,
    SO_ServiceObjectAction = 31,
    SO_ServiceOrder = 32,
    SO_ServiceOrderDecline = 33,
    SO_ServiceOrderStop = 34,
    SO_Shedule = 35,
    SO_SheduleDays = 36,
    SO_SheduleStop = 37,
    SO_TariffPlan = 38,
    SO_Track = 39,
    SO_UserDevice = 40,
    SO_Vehicle = 41
  };
};

extern const std::map<int, const char*> _ServiceObject_VALUES_TO_NAMES;

struct ServiceAction {
  enum type {
    ACT_GET = 0,
    ACT_ADD = 1,
    ACT_EDIT = 2,
    ACT_RM = 3,
    ACT_DO = 4
  };
};

extern const std::map<int, const char*> _ServiceAction_VALUES_TO_NAMES;

typedef std::string BLOB;

typedef int64_t DATE;

typedef int64_t ID;

typedef int32_t TAG;

typedef int32_t NUMBER32;

typedef double GEO;

typedef std::string STR;

typedef std::string LINK;

typedef std::string MAILTO;

typedef std::string FAX;

typedef std::string TEL;

typedef double CURR;

typedef std::map<OrgAddressType::type, STR>  OrgAddress;

typedef std::set<OrderFeature::type>  OrderFeatures;

typedef std::vector<class City>  Cities;

typedef ID Cityid;

typedef std::vector<Cityid>  Cityids;

typedef std::vector<class DictEntry>  DictEntries;

typedef std::map<Month::type, class PassengerLimit>  PassengerLimitMonth;

typedef std::map<Month::type, class PassengerUsage>  PassengerUsageMonth;

typedef std::map<NUMBER32, class PassengerUsage>  PassengerUsageYear;

typedef std::vector<class UserDevice>  UserDevices;

typedef std::map<ServiceAction::type, bool>  ServiceActionPermit;

typedef std::map<ServiceObject::type, ServiceActionPermit>  ServiceObjectActionPermit;

typedef ID Personid;

typedef std::map<OrgPosition::type, class Person>  OrgPositionPerson;

typedef std::vector<class Person>  OrderStopPersons;

typedef ID Bankid;

typedef std::map<BankRole::type, Bankid>  OrgBank;

typedef std::vector<Bankid>  Bankids;

typedef std::vector<class Bank>  Banks;

typedef std::map<OrgBuilding::type, class Location>  OrgLocation;

typedef ID Orgid;

typedef std::vector<class Org>  Orgs;

typedef std::vector<class Org>  Orgids;

typedef std::map<OrgServiceDept::type, Orgid>  OrgServiceDepts;

typedef std::vector<class OrgService>  OrgServices;

typedef ID OrgServiceid;

typedef std::map<TaxiServiceRole::type, OrgServiceid>  RoleOrgService;

typedef std::vector<class Customer>  Customers;

typedef ID Customerid;

typedef std::vector<Customerid>  Customerids;

typedef ID Passengerid;

typedef std::vector<class Passenger>  Passengers;

typedef std::vector<Passengerid>  Passengerids;

typedef ID Vehicleid;

typedef std::vector<Vehicleid>  Vehicleids;

typedef std::vector<class Vehicle>  Vehicles;

typedef ID Documentid;

typedef std::map<DocumentType::type, Documentid>  DocumentMap;

typedef ID Managerid;

typedef std::vector<class Manager>  Managers;

typedef std::vector<Managerid>  Managerids;

typedef ID Driverid;

typedef std::vector<class Driver>  Drivers;

typedef std::vector<Driverid>  Driverids;

typedef std::map<Driverid, class DriverOnline>  DriverOnlineMap;

typedef std::map<Cityid, DriverOnlineMap>  CityDriverOnlineMap;

typedef std::vector<class DriverOnline>  DriverOnlines;

typedef std::map<CrewRole::type, Driverid>  Crew;

typedef ID Serviceorderid;

typedef ID ServiceOrderStopid;

typedef std::vector<ServiceOrderStopid>  ServiceOrderStopids;

typedef std::vector<class ServiceOrderStop>  ServiceOrderStops;

typedef ID ServiceOrderid;

typedef std::vector<ServiceOrderid>  ServiceOrderids;

typedef std::vector<class ServiceOrder>  ServiceOrders;

typedef ID ServiceOrderDeclineid;

typedef std::vector<ServiceOrderDeclineid>  ServiceOrderDeclineids;

typedef std::vector<class ServiceOrderDecline>  ServiceOrderDeclines;

typedef ID Claimid;

typedef std::vector<Claimid>  Claimids;

typedef std::vector<class Claim>  Claims;

typedef ID Trackid;

typedef std::vector<Trackid>  Trackids;

typedef std::vector<class Track>  Tracks;

typedef ID TariffPlanid;

typedef std::vector<class TariffPlan>  TariffPlans;

typedef std::vector<TariffPlanid>  TariffPlanids;

typedef ID Rateid;

typedef std::vector<class Rate>  Rates;

typedef std::vector<Rateid>  Rateids;

typedef std::vector<class NotificationEvent>  NotificationEvents;

typedef struct _RowRange__isset {
  _RowRange__isset() : start(false), len(false) {}
  bool start;
  bool len;
} _RowRange__isset;

class RowRange {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  RowRange() : start(0), len(0) {
  }

  virtual ~RowRange() throw() {}

  ID start;
  NUMBER32 len;

  _RowRange__isset __isset;

  void __set_start(const ID val) {
    start = val;
  }

  void __set_len(const NUMBER32 val) {
    len = val;
  }

  bool operator == (const RowRange & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(len == rhs.len))
      return false;
    return true;
  }
  bool operator != (const RowRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RowRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RowRange &a, RowRange &b);

typedef struct _DateRange__isset {
  _DateRange__isset() : start(false), finish(false) {}
  bool start;
  bool finish;
} _DateRange__isset;

class DateRange {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  DateRange() : start(0), finish(0) {
  }

  virtual ~DateRange() throw() {}

  DATE start;
  DATE finish;

  _DateRange__isset __isset;

  void __set_start(const DATE val) {
    start = val;
  }

  void __set_finish(const DATE val) {
    finish = val;
  }

  bool operator == (const DateRange & rhs) const
  {
    if (!(start == rhs.start))
      return false;
    if (!(finish == rhs.finish))
      return false;
    return true;
  }
  bool operator != (const DateRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DateRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DateRange &a, DateRange &b);

typedef struct _City__isset {
  _City__isset() : id(false), areaid(false), tag(false), name(false), notes(false) {}
  bool id;
  bool areaid;
  bool tag;
  bool name;
  bool notes;
} _City__isset;

class City {
 public:

  static const char* ascii_fingerprint; // = "FBA07522786D76D54E312388051DF258";
  static const uint8_t binary_fingerprint[16]; // = {0xFB,0xA0,0x75,0x22,0x78,0x6D,0x76,0xD5,0x4E,0x31,0x23,0x88,0x05,0x1D,0xF2,0x58};

  City() : id(0), areaid(0), tag(0), name(), notes() {
  }

  virtual ~City() throw() {}

  ID id;
  ID areaid;
  NUMBER32 tag;
  STR name;
  STR notes;

  _City__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_areaid(const ID val) {
    areaid = val;
  }

  void __set_tag(const NUMBER32 val) {
    tag = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  bool operator == (const City & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(areaid == rhs.areaid))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(notes == rhs.notes))
      return false;
    return true;
  }
  bool operator != (const City &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const City & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(City &a, City &b);

typedef struct _DictEntry__isset {
  _DictEntry__isset() : id(false), parent(false), tag(false), idx(false), strvalue(false), intvalue(false) {}
  bool id;
  bool parent;
  bool tag;
  bool idx;
  bool strvalue;
  bool intvalue;
} _DictEntry__isset;

class DictEntry {
 public:

  static const char* ascii_fingerprint; // = "CF5B3C32719FCC1D55CA4013F1B9D877";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x5B,0x3C,0x32,0x71,0x9F,0xCC,0x1D,0x55,0xCA,0x40,0x13,0xF1,0xB9,0xD8,0x77};

  DictEntry() : id(0), parent(0), tag((DictTag::type)0), idx(0), strvalue(), intvalue(0) {
  }

  virtual ~DictEntry() throw() {}

  ID id;
  ID parent;
  DictTag::type tag;
  NUMBER32 idx;
  STR strvalue;
  int64_t intvalue;

  _DictEntry__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_parent(const ID val) {
    parent = val;
  }

  void __set_tag(const DictTag::type val) {
    tag = val;
  }

  void __set_idx(const NUMBER32 val) {
    idx = val;
  }

  void __set_strvalue(const STR& val) {
    strvalue = val;
  }

  void __set_intvalue(const int64_t val) {
    intvalue = val;
  }

  bool operator == (const DictEntry & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(parent == rhs.parent))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(idx == rhs.idx))
      return false;
    if (!(strvalue == rhs.strvalue))
      return false;
    if (!(intvalue == rhs.intvalue))
      return false;
    return true;
  }
  bool operator != (const DictEntry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DictEntry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DictEntry &a, DictEntry &b);

typedef struct _PassengerLimit__isset {
  _PassengerLimit__isset() : id(false), tripcount(false), minutescount(false), moneycount(false) {}
  bool id;
  bool tripcount;
  bool minutescount;
  bool moneycount;
} _PassengerLimit__isset;

class PassengerLimit {
 public:

  static const char* ascii_fingerprint; // = "BE3A22B351B833B7BB1F7D4167460373";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x3A,0x22,0xB3,0x51,0xB8,0x33,0xB7,0xBB,0x1F,0x7D,0x41,0x67,0x46,0x03,0x73};

  PassengerLimit() : id(0), tripcount(0), minutescount(0), moneycount(0) {
  }

  virtual ~PassengerLimit() throw() {}

  ID id;
  NUMBER32 tripcount;
  NUMBER32 minutescount;
  NUMBER32 moneycount;

  _PassengerLimit__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_tripcount(const NUMBER32 val) {
    tripcount = val;
  }

  void __set_minutescount(const NUMBER32 val) {
    minutescount = val;
  }

  void __set_moneycount(const NUMBER32 val) {
    moneycount = val;
  }

  bool operator == (const PassengerLimit & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tripcount == rhs.tripcount))
      return false;
    if (!(minutescount == rhs.minutescount))
      return false;
    if (!(moneycount == rhs.moneycount))
      return false;
    return true;
  }
  bool operator != (const PassengerLimit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerLimit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PassengerLimit &a, PassengerLimit &b);

typedef struct _Payload__isset {
  _Payload__isset() : passengercount(false), baggagecount(false), baggageweight(false), baggagewidth(false), baggageheight(false), papercount(false), stopcount(false) {}
  bool passengercount;
  bool baggagecount;
  bool baggageweight;
  bool baggagewidth;
  bool baggageheight;
  bool papercount;
  bool stopcount;
} _Payload__isset;

class Payload {
 public:

  static const char* ascii_fingerprint; // = "458493A9F4060F6499357D68C4F331E2";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x84,0x93,0xA9,0xF4,0x06,0x0F,0x64,0x99,0x35,0x7D,0x68,0xC4,0xF3,0x31,0xE2};

  Payload() : passengercount(0), baggagecount(0), baggageweight(0), baggagewidth(0), baggageheight(0), papercount(0), stopcount(0) {
  }

  virtual ~Payload() throw() {}

  NUMBER32 passengercount;
  NUMBER32 baggagecount;
  NUMBER32 baggageweight;
  NUMBER32 baggagewidth;
  NUMBER32 baggageheight;
  NUMBER32 papercount;
  NUMBER32 stopcount;

  _Payload__isset __isset;

  void __set_passengercount(const NUMBER32 val) {
    passengercount = val;
  }

  void __set_baggagecount(const NUMBER32 val) {
    baggagecount = val;
  }

  void __set_baggageweight(const NUMBER32 val) {
    baggageweight = val;
  }

  void __set_baggagewidth(const NUMBER32 val) {
    baggagewidth = val;
  }

  void __set_baggageheight(const NUMBER32 val) {
    baggageheight = val;
  }

  void __set_papercount(const NUMBER32 val) {
    papercount = val;
  }

  void __set_stopcount(const NUMBER32 val) {
    stopcount = val;
  }

  bool operator == (const Payload & rhs) const
  {
    if (!(passengercount == rhs.passengercount))
      return false;
    if (!(baggagecount == rhs.baggagecount))
      return false;
    if (!(baggageweight == rhs.baggageweight))
      return false;
    if (!(baggagewidth == rhs.baggagewidth))
      return false;
    if (!(baggageheight == rhs.baggageheight))
      return false;
    if (!(papercount == rhs.papercount))
      return false;
    if (!(stopcount == rhs.stopcount))
      return false;
    return true;
  }
  bool operator != (const Payload &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Payload & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Payload &a, Payload &b);

typedef struct _PassengerUsage__isset {
  _PassengerUsage__isset() : id(false), tripcount(false), minutescount(false), moneycount(false), payload(false) {}
  bool id;
  bool tripcount;
  bool minutescount;
  bool moneycount;
  bool payload;
} _PassengerUsage__isset;

class PassengerUsage {
 public:

  static const char* ascii_fingerprint; // = "502EEF414E009AF05EE5F2C58C515C77";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x2E,0xEF,0x41,0x4E,0x00,0x9A,0xF0,0x5E,0xE5,0xF2,0xC5,0x8C,0x51,0x5C,0x77};

  PassengerUsage() : id(0), tripcount(0), minutescount(0), moneycount(0) {
  }

  virtual ~PassengerUsage() throw() {}

  ID id;
  NUMBER32 tripcount;
  NUMBER32 minutescount;
  NUMBER32 moneycount;
  Payload payload;

  _PassengerUsage__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_tripcount(const NUMBER32 val) {
    tripcount = val;
  }

  void __set_minutescount(const NUMBER32 val) {
    minutescount = val;
  }

  void __set_moneycount(const NUMBER32 val) {
    moneycount = val;
  }

  void __set_payload(const Payload& val) {
    payload = val;
  }

  bool operator == (const PassengerUsage & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tripcount == rhs.tripcount))
      return false;
    if (!(minutescount == rhs.minutescount))
      return false;
    if (!(moneycount == rhs.moneycount))
      return false;
    if (!(payload == rhs.payload))
      return false;
    return true;
  }
  bool operator != (const PassengerUsage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PassengerUsage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PassengerUsage &a, PassengerUsage &b);

typedef struct _GeoLocation__isset {
  _GeoLocation__isset() : latitude(false), longitude(false) {}
  bool latitude;
  bool longitude;
} _GeoLocation__isset;

class GeoLocation {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  GeoLocation() : latitude(0), longitude(0) {
  }

  virtual ~GeoLocation() throw() {}

  GEO latitude;
  GEO longitude;

  _GeoLocation__isset __isset;

  void __set_latitude(const GEO val) {
    latitude = val;
  }

  void __set_longitude(const GEO val) {
    longitude = val;
  }

  bool operator == (const GeoLocation & rhs) const
  {
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    return true;
  }
  bool operator != (const GeoLocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GeoLocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GeoLocation &a, GeoLocation &b);

typedef struct _UserDevice__isset {
  _UserDevice__isset() : devicetype(false), model(false), imei(false), line1(false), line2(false), hasGSMorCDMA(false), hasGPS(false), isGPS(false), geolocation(false) {}
  bool devicetype;
  bool model;
  bool imei;
  bool line1;
  bool line2;
  bool hasGSMorCDMA;
  bool hasGPS;
  bool isGPS;
  bool geolocation;
} _UserDevice__isset;

class UserDevice {
 public:

  static const char* ascii_fingerprint; // = "8F192A3F14BF2889CD29F3AABD117D07";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x19,0x2A,0x3F,0x14,0xBF,0x28,0x89,0xCD,0x29,0xF3,0xAA,0xBD,0x11,0x7D,0x07};

  UserDevice() : devicetype((DeviceType::type)0), model(), imei(), line1(), line2(), hasGSMorCDMA(0), hasGPS(0), isGPS(0) {
  }

  virtual ~UserDevice() throw() {}

  DeviceType::type devicetype;
  STR model;
  STR imei;
  STR line1;
  STR line2;
  bool hasGSMorCDMA;
  bool hasGPS;
  bool isGPS;
  GeoLocation geolocation;

  _UserDevice__isset __isset;

  void __set_devicetype(const DeviceType::type val) {
    devicetype = val;
  }

  void __set_model(const STR& val) {
    model = val;
  }

  void __set_imei(const STR& val) {
    imei = val;
  }

  void __set_line1(const STR& val) {
    line1 = val;
  }

  void __set_line2(const STR& val) {
    line2 = val;
  }

  void __set_hasGSMorCDMA(const bool val) {
    hasGSMorCDMA = val;
  }

  void __set_hasGPS(const bool val) {
    hasGPS = val;
  }

  void __set_isGPS(const bool val) {
    isGPS = val;
  }

  void __set_geolocation(const GeoLocation& val) {
    geolocation = val;
  }

  bool operator == (const UserDevice & rhs) const
  {
    if (!(devicetype == rhs.devicetype))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(imei == rhs.imei))
      return false;
    if (!(line1 == rhs.line1))
      return false;
    if (!(line2 == rhs.line2))
      return false;
    if (!(hasGSMorCDMA == rhs.hasGSMorCDMA))
      return false;
    if (!(hasGPS == rhs.hasGPS))
      return false;
    if (!(isGPS == rhs.isGPS))
      return false;
    if (!(geolocation == rhs.geolocation))
      return false;
    return true;
  }
  bool operator != (const UserDevice &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserDevice & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserDevice &a, UserDevice &b);

typedef struct _Credentials__isset {
  _Credentials__isset() : phone(false), personrole(true), token(false), password(false), serviceaction(false), serviceobject(false), islogged(false), timelogon(false), gcmregistrationid(false) {}
  bool phone;
  bool personrole;
  bool token;
  bool password;
  bool serviceaction;
  bool serviceobject;
  bool islogged;
  bool timelogon;
  bool gcmregistrationid;
} _Credentials__isset;

class Credentials {
 public:

  static const char* ascii_fingerprint; // = "684BC8000C9CE6200A124244DB017859";
  static const uint8_t binary_fingerprint[16]; // = {0x68,0x4B,0xC8,0x00,0x0C,0x9C,0xE6,0x20,0x0A,0x12,0x42,0x44,0xDB,0x01,0x78,0x59};

  Credentials() : phone(), personrole((PersonRole::type)9), token(), password(), serviceaction((ServiceAction::type)0), serviceobject((ServiceObject::type)0), islogged(0), timelogon(0), gcmregistrationid() {
    personrole = (PersonRole::type)9;

  }

  virtual ~Credentials() throw() {}

  STR phone;
  PersonRole::type personrole;
  STR token;
  STR password;
  ServiceAction::type serviceaction;
  ServiceObject::type serviceobject;
  bool islogged;
  DATE timelogon;
  STR gcmregistrationid;

  _Credentials__isset __isset;

  void __set_phone(const STR& val) {
    phone = val;
  }

  void __set_personrole(const PersonRole::type val) {
    personrole = val;
  }

  void __set_token(const STR& val) {
    token = val;
  }

  void __set_password(const STR& val) {
    password = val;
  }

  void __set_serviceaction(const ServiceAction::type val) {
    serviceaction = val;
  }

  void __set_serviceobject(const ServiceObject::type val) {
    serviceobject = val;
  }

  void __set_islogged(const bool val) {
    islogged = val;
  }

  void __set_timelogon(const DATE val) {
    timelogon = val;
  }

  void __set_gcmregistrationid(const STR& val) {
    gcmregistrationid = val;
  }

  bool operator == (const Credentials & rhs) const
  {
    if (!(phone == rhs.phone))
      return false;
    if (!(personrole == rhs.personrole))
      return false;
    if (!(token == rhs.token))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(serviceaction == rhs.serviceaction))
      return false;
    if (!(serviceobject == rhs.serviceobject))
      return false;
    if (!(islogged == rhs.islogged))
      return false;
    if (!(timelogon == rhs.timelogon))
      return false;
    if (!(gcmregistrationid == rhs.gcmregistrationid))
      return false;
    return true;
  }
  bool operator != (const Credentials &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Credentials & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Credentials &a, Credentials &b);

typedef struct _Person__isset {
  _Person__isset() : id(false), credentials(false), userdevices(false), tag(false), firstname(false), lastname(false), middlename(false), prefix(false), birthdate(false), deparment(false), position(false), note(false), phone1(false), phone2(false), fax(false), email(false), photo(false) {}
  bool id;
  bool credentials;
  bool userdevices;
  bool tag;
  bool firstname;
  bool lastname;
  bool middlename;
  bool prefix;
  bool birthdate;
  bool deparment;
  bool position;
  bool note;
  bool phone1;
  bool phone2;
  bool fax;
  bool email;
  bool photo;
} _Person__isset;

class Person {
 public:

  static const char* ascii_fingerprint; // = "3B04270E07C9E2932F428DF1D2BB083B";
  static const uint8_t binary_fingerprint[16]; // = {0x3B,0x04,0x27,0x0E,0x07,0xC9,0xE2,0x93,0x2F,0x42,0x8D,0xF1,0xD2,0xBB,0x08,0x3B};

  Person() : id(0), tag(0), firstname(), lastname(), middlename(), prefix(), birthdate(0), deparment(), position(), note(), phone1(), phone2(), fax(), email(), photo() {
  }

  virtual ~Person() throw() {}

  ID id;
  Credentials credentials;
  UserDevices userdevices;
  TAG tag;
  STR firstname;
  STR lastname;
  STR middlename;
  STR prefix;
  DATE birthdate;
  STR deparment;
  STR position;
  STR note;
  TEL phone1;
  TEL phone2;
  FAX fax;
  MAILTO email;
  LINK photo;

  _Person__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_credentials(const Credentials& val) {
    credentials = val;
  }

  void __set_userdevices(const UserDevices& val) {
    userdevices = val;
  }

  void __set_tag(const TAG val) {
    tag = val;
  }

  void __set_firstname(const STR& val) {
    firstname = val;
  }

  void __set_lastname(const STR& val) {
    lastname = val;
  }

  void __set_middlename(const STR& val) {
    middlename = val;
  }

  void __set_prefix(const STR& val) {
    prefix = val;
  }

  void __set_birthdate(const DATE val) {
    birthdate = val;
  }

  void __set_deparment(const STR& val) {
    deparment = val;
  }

  void __set_position(const STR& val) {
    position = val;
  }

  void __set_note(const STR& val) {
    note = val;
  }

  void __set_phone1(const TEL& val) {
    phone1 = val;
  }

  void __set_phone2(const TEL& val) {
    phone2 = val;
  }

  void __set_fax(const FAX& val) {
    fax = val;
  }

  void __set_email(const MAILTO& val) {
    email = val;
  }

  void __set_photo(const LINK& val) {
    photo = val;
  }

  bool operator == (const Person & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(credentials == rhs.credentials))
      return false;
    if (!(userdevices == rhs.userdevices))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(firstname == rhs.firstname))
      return false;
    if (!(lastname == rhs.lastname))
      return false;
    if (!(middlename == rhs.middlename))
      return false;
    if (!(prefix == rhs.prefix))
      return false;
    if (!(birthdate == rhs.birthdate))
      return false;
    if (!(deparment == rhs.deparment))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(phone1 == rhs.phone1))
      return false;
    if (!(phone2 == rhs.phone2))
      return false;
    if (!(fax == rhs.fax))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(photo == rhs.photo))
      return false;
    return true;
  }
  bool operator != (const Person &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Person & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Person &a, Person &b);

typedef struct _Bank__isset {
  _Bank__isset() : id(false), bik(false), name(false) {}
  bool id;
  bool bik;
  bool name;
} _Bank__isset;

class Bank {
 public:

  static const char* ascii_fingerprint; // = "BC9C141275D96A1BDFC4A1F500B2DCBE";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

  Bank() : id(0), bik(), name() {
  }

  virtual ~Bank() throw() {}

  ID id;
  STR bik;
  STR name;

  _Bank__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_bik(const STR& val) {
    bik = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  bool operator == (const Bank & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(bik == rhs.bik))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Bank &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bank & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Bank &a, Bank &b);

typedef struct _Location__isset {
  _Location__isset() : location(false), name(false), city(false), address(false) {}
  bool location;
  bool name;
  bool city;
  bool address;
} _Location__isset;

class Location {
 public:

  static const char* ascii_fingerprint; // = "6F34E66C4D0511BF6D9C27F7722E3B11";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x34,0xE6,0x6C,0x4D,0x05,0x11,0xBF,0x6D,0x9C,0x27,0xF7,0x72,0x2E,0x3B,0x11};

  Location() : name(), city(), address() {
  }

  virtual ~Location() throw() {}

  GeoLocation location;
  STR name;
  STR city;
  STR address;

  _Location__isset __isset;

  void __set_location(const GeoLocation& val) {
    location = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_city(const STR& val) {
    city = val;
  }

  void __set_address(const STR& val) {
    address = val;
  }

  bool operator == (const Location & rhs) const
  {
    if (!(location == rhs.location))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(city == rhs.city))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Location &a, Location &b);

typedef struct _Org__isset {
  _Org__isset() : id(false), orgrole(false), orgtype(false), start(false), tag(false), name(false), fullname(false), shortname(false), inn(false), kpp(false), ogrn(false), orgaddress(false), phone(false), email(false), employee(false), bank(false), currentaccount(false), correspondentaccount(false), orglocation(false), description(false), note(false) {}
  bool id;
  bool orgrole;
  bool orgtype;
  bool start;
  bool tag;
  bool name;
  bool fullname;
  bool shortname;
  bool inn;
  bool kpp;
  bool ogrn;
  bool orgaddress;
  bool phone;
  bool email;
  bool employee;
  bool bank;
  bool currentaccount;
  bool correspondentaccount;
  bool orglocation;
  bool description;
  bool note;
} _Org__isset;

class Org {
 public:

  static const char* ascii_fingerprint; // = "07C10FC5C0FA75835EB0467B9D341709";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xC1,0x0F,0xC5,0xC0,0xFA,0x75,0x83,0x5E,0xB0,0x46,0x7B,0x9D,0x34,0x17,0x09};

  Org() : id(0), orgrole((OrgRole::type)0), orgtype((OrgType::type)0), start(0), tag(0), name(), fullname(), shortname(), inn(), kpp(), ogrn(), phone(), email(), currentaccount(), correspondentaccount(), description(), note() {
  }

  virtual ~Org() throw() {}

  ID id;
  OrgRole::type orgrole;
  OrgType::type orgtype;
  DATE start;
  NUMBER32 tag;
  STR name;
  STR fullname;
  STR shortname;
  STR inn;
  STR kpp;
  STR ogrn;
  OrgAddress orgaddress;
  TEL phone;
  MAILTO email;
  OrgPositionPerson employee;
  OrgBank bank;
  STR currentaccount;
  STR correspondentaccount;
  OrgLocation orglocation;
  STR description;
  STR note;

  _Org__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_orgrole(const OrgRole::type val) {
    orgrole = val;
  }

  void __set_orgtype(const OrgType::type val) {
    orgtype = val;
  }

  void __set_start(const DATE val) {
    start = val;
  }

  void __set_tag(const NUMBER32 val) {
    tag = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_fullname(const STR& val) {
    fullname = val;
  }

  void __set_shortname(const STR& val) {
    shortname = val;
  }

  void __set_inn(const STR& val) {
    inn = val;
  }

  void __set_kpp(const STR& val) {
    kpp = val;
  }

  void __set_ogrn(const STR& val) {
    ogrn = val;
  }

  void __set_orgaddress(const OrgAddress& val) {
    orgaddress = val;
  }

  void __set_phone(const TEL& val) {
    phone = val;
  }

  void __set_email(const MAILTO& val) {
    email = val;
  }

  void __set_employee(const OrgPositionPerson& val) {
    employee = val;
  }

  void __set_bank(const OrgBank& val) {
    bank = val;
  }

  void __set_currentaccount(const STR& val) {
    currentaccount = val;
  }

  void __set_correspondentaccount(const STR& val) {
    correspondentaccount = val;
  }

  void __set_orglocation(const OrgLocation& val) {
    orglocation = val;
  }

  void __set_description(const STR& val) {
    description = val;
  }

  void __set_note(const STR& val) {
    note = val;
  }

  bool operator == (const Org & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(orgrole == rhs.orgrole))
      return false;
    if (!(orgtype == rhs.orgtype))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(fullname == rhs.fullname))
      return false;
    if (!(shortname == rhs.shortname))
      return false;
    if (!(inn == rhs.inn))
      return false;
    if (!(kpp == rhs.kpp))
      return false;
    if (!(ogrn == rhs.ogrn))
      return false;
    if (!(orgaddress == rhs.orgaddress))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(employee == rhs.employee))
      return false;
    if (!(bank == rhs.bank))
      return false;
    if (!(currentaccount == rhs.currentaccount))
      return false;
    if (!(correspondentaccount == rhs.correspondentaccount))
      return false;
    if (!(orglocation == rhs.orglocation))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(note == rhs.note))
      return false;
    return true;
  }
  bool operator != (const Org &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Org & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Org &a, Org &b);

typedef struct _Dept__isset {
  _Dept__isset() : id(false), orgid(false), name(false), fullname(false), shortname(false), orgaddress(false), phone(false), email(false), employee(false), bank(false), currentaccount(false), correspondentaccount(false), orglocation(false), description(false), note(false) {}
  bool id;
  bool orgid;
  bool name;
  bool fullname;
  bool shortname;
  bool orgaddress;
  bool phone;
  bool email;
  bool employee;
  bool bank;
  bool currentaccount;
  bool correspondentaccount;
  bool orglocation;
  bool description;
  bool note;
} _Dept__isset;

class Dept {
 public:

  static const char* ascii_fingerprint; // = "F2E14EB18887CA74A043E9D92A17325D";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0xE1,0x4E,0xB1,0x88,0x87,0xCA,0x74,0xA0,0x43,0xE9,0xD9,0x2A,0x17,0x32,0x5D};

  Dept() : id(0), orgid(0), name(), fullname(), shortname(), phone(), email(), currentaccount(), correspondentaccount(), description(), note() {
  }

  virtual ~Dept() throw() {}

  ID id;
  Orgid orgid;
  STR name;
  STR fullname;
  STR shortname;
  OrgAddress orgaddress;
  TEL phone;
  MAILTO email;
  OrgPositionPerson employee;
  OrgBank bank;
  STR currentaccount;
  STR correspondentaccount;
  OrgLocation orglocation;
  STR description;
  STR note;

  _Dept__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_orgid(const Orgid val) {
    orgid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_fullname(const STR& val) {
    fullname = val;
  }

  void __set_shortname(const STR& val) {
    shortname = val;
  }

  void __set_orgaddress(const OrgAddress& val) {
    orgaddress = val;
  }

  void __set_phone(const TEL& val) {
    phone = val;
  }

  void __set_email(const MAILTO& val) {
    email = val;
  }

  void __set_employee(const OrgPositionPerson& val) {
    employee = val;
  }

  void __set_bank(const OrgBank& val) {
    bank = val;
  }

  void __set_currentaccount(const STR& val) {
    currentaccount = val;
  }

  void __set_correspondentaccount(const STR& val) {
    correspondentaccount = val;
  }

  void __set_orglocation(const OrgLocation& val) {
    orglocation = val;
  }

  void __set_description(const STR& val) {
    description = val;
  }

  void __set_note(const STR& val) {
    note = val;
  }

  bool operator == (const Dept & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(orgid == rhs.orgid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(fullname == rhs.fullname))
      return false;
    if (!(shortname == rhs.shortname))
      return false;
    if (!(orgaddress == rhs.orgaddress))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(employee == rhs.employee))
      return false;
    if (!(bank == rhs.bank))
      return false;
    if (!(currentaccount == rhs.currentaccount))
      return false;
    if (!(correspondentaccount == rhs.correspondentaccount))
      return false;
    if (!(orglocation == rhs.orglocation))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(note == rhs.note))
      return false;
    return true;
  }
  bool operator != (const Dept &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dept & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Dept &a, Dept &b);

typedef struct _OrgService__isset {
  _OrgService__isset() : id(false), organization(false), name(false), orglocation(false) {}
  bool id;
  bool organization;
  bool name;
  bool orglocation;
} _OrgService__isset;

class OrgService {
 public:

  static const char* ascii_fingerprint; // = "5662A507D84993840D9801F5EBFA74EC";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x62,0xA5,0x07,0xD8,0x49,0x93,0x84,0x0D,0x98,0x01,0xF5,0xEB,0xFA,0x74,0xEC};

  OrgService() : id(0), name() {
  }

  virtual ~OrgService() throw() {}

  ID id;
  OrgServiceDepts organization;
  STR name;
  OrgLocation orglocation;

  _OrgService__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_organization(const OrgServiceDepts& val) {
    organization = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_orglocation(const OrgLocation& val) {
    orglocation = val;
  }

  bool operator == (const OrgService & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(organization == rhs.organization))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(orglocation == rhs.orglocation))
      return false;
    return true;
  }
  bool operator != (const OrgService &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrgService & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OrgService &a, OrgService &b);

typedef struct _Customer__isset {
  _Customer__isset() : id(false), cityid(false), nickname(false), tag(false), organization(false), taxtype(false), active(false), enabled(false), tariffplanid(false), haspreferreddriver(false), preferreddriverid(false), hascredit(false), hascreditlimit(false), creditlimit(false) {}
  bool id;
  bool cityid;
  bool nickname;
  bool tag;
  bool organization;
  bool taxtype;
  bool active;
  bool enabled;
  bool tariffplanid;
  bool haspreferreddriver;
  bool preferreddriverid;
  bool hascredit;
  bool hascreditlimit;
  bool creditlimit;
} _Customer__isset;

class Customer {
 public:

  static const char* ascii_fingerprint; // = "A89703D16EB7229B25F0633089F66747";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x97,0x03,0xD1,0x6E,0xB7,0x22,0x9B,0x25,0xF0,0x63,0x30,0x89,0xF6,0x67,0x47};

  Customer() : id(0), cityid(0), nickname(), tag(0), taxtype((TaxType::type)0), active(0), enabled(0), tariffplanid(0), haspreferreddriver(0), preferreddriverid(0), hascredit(0), hascreditlimit(0), creditlimit(0) {
  }

  virtual ~Customer() throw() {}

  ID id;
  ID cityid;
  STR nickname;
  TAG tag;
  OrgServiceDepts organization;
  TaxType::type taxtype;
  bool active;
  bool enabled;
  ID tariffplanid;
  bool haspreferreddriver;
  ID preferreddriverid;
  bool hascredit;
  bool hascreditlimit;
  CURR creditlimit;

  _Customer__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_nickname(const STR& val) {
    nickname = val;
  }

  void __set_tag(const TAG val) {
    tag = val;
  }

  void __set_organization(const OrgServiceDepts& val) {
    organization = val;
  }

  void __set_taxtype(const TaxType::type val) {
    taxtype = val;
  }

  void __set_active(const bool val) {
    active = val;
  }

  void __set_enabled(const bool val) {
    enabled = val;
  }

  void __set_tariffplanid(const ID val) {
    tariffplanid = val;
  }

  void __set_haspreferreddriver(const bool val) {
    haspreferreddriver = val;
  }

  void __set_preferreddriverid(const ID val) {
    preferreddriverid = val;
  }

  void __set_hascredit(const bool val) {
    hascredit = val;
  }

  void __set_hascreditlimit(const bool val) {
    hascreditlimit = val;
  }

  void __set_creditlimit(const CURR val) {
    creditlimit = val;
  }

  bool operator == (const Customer & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(organization == rhs.organization))
      return false;
    if (!(taxtype == rhs.taxtype))
      return false;
    if (!(active == rhs.active))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    if (!(tariffplanid == rhs.tariffplanid))
      return false;
    if (!(haspreferreddriver == rhs.haspreferreddriver))
      return false;
    if (!(preferreddriverid == rhs.preferreddriverid))
      return false;
    if (!(hascredit == rhs.hascredit))
      return false;
    if (!(hascreditlimit == rhs.hascreditlimit))
      return false;
    if (!(creditlimit == rhs.creditlimit))
      return false;
    return true;
  }
  bool operator != (const Customer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Customer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Customer &a, Customer &b);

typedef struct _CustomerStatistic__isset {
  _CustomerStatistic__isset() : id(false), cityid(false), customerid(false), tag(false), enabled(false), currentbalance(false), usagemonth(false), usageyear(false) {}
  bool id;
  bool cityid;
  bool customerid;
  bool tag;
  bool enabled;
  bool currentbalance;
  bool usagemonth;
  bool usageyear;
} _CustomerStatistic__isset;

class CustomerStatistic {
 public:

  static const char* ascii_fingerprint; // = "6A3FF2FF06BF66D6AB8BB7501E6465D2";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x3F,0xF2,0xFF,0x06,0xBF,0x66,0xD6,0xAB,0x8B,0xB7,0x50,0x1E,0x64,0x65,0xD2};

  CustomerStatistic() : id(0), cityid(0), customerid(0), tag(0), enabled(0), currentbalance(0) {
  }

  virtual ~CustomerStatistic() throw() {}

  ID id;
  ID cityid;
  ID customerid;
  TAG tag;
  bool enabled;
  CURR currentbalance;
  PassengerUsageMonth usagemonth;
  PassengerUsageYear usageyear;

  _CustomerStatistic__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_customerid(const ID val) {
    customerid = val;
  }

  void __set_tag(const TAG val) {
    tag = val;
  }

  void __set_enabled(const bool val) {
    enabled = val;
  }

  void __set_currentbalance(const CURR val) {
    currentbalance = val;
  }

  void __set_usagemonth(const PassengerUsageMonth& val) {
    usagemonth = val;
  }

  void __set_usageyear(const PassengerUsageYear& val) {
    usageyear = val;
  }

  bool operator == (const CustomerStatistic & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(customerid == rhs.customerid))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    if (!(currentbalance == rhs.currentbalance))
      return false;
    if (!(usagemonth == rhs.usagemonth))
      return false;
    if (!(usageyear == rhs.usageyear))
      return false;
    return true;
  }
  bool operator != (const CustomerStatistic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CustomerStatistic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CustomerStatistic &a, CustomerStatistic &b);

typedef struct _Passenger__isset {
  _Passenger__isset() : id(false), cityid(false), customerid(false), tag(false), isoperator(false), isvip(false), status(false), person(false), canorder(false), passengerlimitmonth(false), passengerusagemonth(false) {}
  bool id;
  bool cityid;
  bool customerid;
  bool tag;
  bool isoperator;
  bool isvip;
  bool status;
  bool person;
  bool canorder;
  bool passengerlimitmonth;
  bool passengerusagemonth;
} _Passenger__isset;

class Passenger {
 public:

  static const char* ascii_fingerprint; // = "E98402372B6E55C03BA3D61157E6AFC2";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x84,0x02,0x37,0x2B,0x6E,0x55,0xC0,0x3B,0xA3,0xD6,0x11,0x57,0xE6,0xAF,0xC2};

  Passenger() : id(0), cityid(0), customerid(0), tag(0), isoperator(0), isvip(0), status((EmployeeStatus::type)0), canorder((CanOrder::type)0) {
  }

  virtual ~Passenger() throw() {}

  ID id;
  ID cityid;
  ID customerid;
  NUMBER32 tag;
  bool isoperator;
  bool isvip;
  EmployeeStatus::type status;
  Person person;
  CanOrder::type canorder;
  PassengerLimitMonth passengerlimitmonth;
  PassengerUsageMonth passengerusagemonth;

  _Passenger__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_customerid(const ID val) {
    customerid = val;
  }

  void __set_tag(const NUMBER32 val) {
    tag = val;
  }

  void __set_isoperator(const bool val) {
    isoperator = val;
  }

  void __set_isvip(const bool val) {
    isvip = val;
  }

  void __set_status(const EmployeeStatus::type val) {
    status = val;
  }

  void __set_person(const Person& val) {
    person = val;
  }

  void __set_canorder(const CanOrder::type val) {
    canorder = val;
  }

  void __set_passengerlimitmonth(const PassengerLimitMonth& val) {
    passengerlimitmonth = val;
  }

  void __set_passengerusagemonth(const PassengerUsageMonth& val) {
    passengerusagemonth = val;
  }

  bool operator == (const Passenger & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(customerid == rhs.customerid))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(isoperator == rhs.isoperator))
      return false;
    if (!(isvip == rhs.isvip))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(person == rhs.person))
      return false;
    if (!(canorder == rhs.canorder))
      return false;
    if (!(passengerlimitmonth == rhs.passengerlimitmonth))
      return false;
    if (!(passengerusagemonth == rhs.passengerusagemonth))
      return false;
    return true;
  }
  bool operator != (const Passenger &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Passenger & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Passenger &a, Passenger &b);

typedef struct _Vehicle__isset {
  _Vehicle__isset() : id(false), vehicletype(true), vehiclecategory(false), vehicleclass(false), vehiclestatus(false), vehiclebrandid(false), vehiclemodel(false), color(false), year(false), plate(false), platenumber(false), technicalcondition(false), passengercount(false), childseat(false), checkers(false), stickers(false), lantern(false), photo(false), vin(false) {}
  bool id;
  bool vehicletype;
  bool vehiclecategory;
  bool vehicleclass;
  bool vehiclestatus;
  bool vehiclebrandid;
  bool vehiclemodel;
  bool color;
  bool year;
  bool plate;
  bool platenumber;
  bool technicalcondition;
  bool passengercount;
  bool childseat;
  bool checkers;
  bool stickers;
  bool lantern;
  bool photo;
  bool vin;
} _Vehicle__isset;

class Vehicle {
 public:

  static const char* ascii_fingerprint; // = "529D5AB19CB951DE81DB3B0A4DE5AD9E";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x9D,0x5A,0xB1,0x9C,0xB9,0x51,0xDE,0x81,0xDB,0x3B,0x0A,0x4D,0xE5,0xAD,0x9E};

  Vehicle() : id(0), vehicletype((VehicleType::type)1), vehiclecategory((VehicleCategory::type)0), vehicleclass((VehicleClass::type)0), vehiclestatus((VehicleStatus::type)0), vehiclebrandid(0), vehiclemodel(0), color(0), year(0), plate(), platenumber(0), technicalcondition(), passengercount(0), childseat(0), checkers(0), stickers(0), lantern(0), photo(), vin() {
    vehicletype = (VehicleType::type)1;

  }

  virtual ~Vehicle() throw() {}

  ID id;
  VehicleType::type vehicletype;
  VehicleCategory::type vehiclecategory;
  VehicleClass::type vehicleclass;
  VehicleStatus::type vehiclestatus;
  ID vehiclebrandid;
  ID vehiclemodel;
  ID color;
  NUMBER32 year;
  STR plate;
  NUMBER32 platenumber;
  STR technicalcondition;
  NUMBER32 passengercount;
  bool childseat;
  bool checkers;
  bool stickers;
  bool lantern;
  LINK photo;
  STR vin;

  _Vehicle__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_vehicletype(const VehicleType::type val) {
    vehicletype = val;
  }

  void __set_vehiclecategory(const VehicleCategory::type val) {
    vehiclecategory = val;
  }

  void __set_vehicleclass(const VehicleClass::type val) {
    vehicleclass = val;
  }

  void __set_vehiclestatus(const VehicleStatus::type val) {
    vehiclestatus = val;
  }

  void __set_vehiclebrandid(const ID val) {
    vehiclebrandid = val;
  }

  void __set_vehiclemodel(const ID val) {
    vehiclemodel = val;
  }

  void __set_color(const ID val) {
    color = val;
  }

  void __set_year(const NUMBER32 val) {
    year = val;
  }

  void __set_plate(const STR& val) {
    plate = val;
  }

  void __set_platenumber(const NUMBER32 val) {
    platenumber = val;
  }

  void __set_technicalcondition(const STR& val) {
    technicalcondition = val;
  }

  void __set_passengercount(const NUMBER32 val) {
    passengercount = val;
  }

  void __set_childseat(const bool val) {
    childseat = val;
  }

  void __set_checkers(const bool val) {
    checkers = val;
  }

  void __set_stickers(const bool val) {
    stickers = val;
  }

  void __set_lantern(const bool val) {
    lantern = val;
  }

  void __set_photo(const LINK& val) {
    photo = val;
  }

  void __set_vin(const STR& val) {
    vin = val;
  }

  bool operator == (const Vehicle & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(vehicletype == rhs.vehicletype))
      return false;
    if (!(vehiclecategory == rhs.vehiclecategory))
      return false;
    if (!(vehicleclass == rhs.vehicleclass))
      return false;
    if (!(vehiclestatus == rhs.vehiclestatus))
      return false;
    if (!(vehiclebrandid == rhs.vehiclebrandid))
      return false;
    if (!(vehiclemodel == rhs.vehiclemodel))
      return false;
    if (!(color == rhs.color))
      return false;
    if (!(year == rhs.year))
      return false;
    if (!(plate == rhs.plate))
      return false;
    if (!(platenumber == rhs.platenumber))
      return false;
    if (!(technicalcondition == rhs.technicalcondition))
      return false;
    if (!(passengercount == rhs.passengercount))
      return false;
    if (!(childseat == rhs.childseat))
      return false;
    if (!(checkers == rhs.checkers))
      return false;
    if (!(stickers == rhs.stickers))
      return false;
    if (!(lantern == rhs.lantern))
      return false;
    if (!(photo == rhs.photo))
      return false;
    if (!(vin == rhs.vin))
      return false;
    return true;
  }
  bool operator != (const Vehicle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Vehicle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Vehicle &a, Vehicle &b);

typedef struct _Document__isset {
  _Document__isset() : id(false), ser(false), number(false), issuer(false), issued(false), validity(false), category(false), expirience(false) {}
  bool id;
  bool ser;
  bool number;
  bool issuer;
  bool issued;
  bool validity;
  bool category;
  bool expirience;
} _Document__isset;

class Document {
 public:

  static const char* ascii_fingerprint; // = "030F9860BF6DA7CBB4ED66E5DC14E7C5";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x0F,0x98,0x60,0xBF,0x6D,0xA7,0xCB,0xB4,0xED,0x66,0xE5,0xDC,0x14,0xE7,0xC5};

  Document() : id(0), ser(), number(), issuer(), issued(0), validity(0), category(), expirience(0) {
  }

  virtual ~Document() throw() {}

  ID id;
  STR ser;
  STR number;
  STR issuer;
  DATE issued;
  DATE validity;
  STR category;
  NUMBER32 expirience;

  _Document__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_ser(const STR& val) {
    ser = val;
  }

  void __set_number(const STR& val) {
    number = val;
  }

  void __set_issuer(const STR& val) {
    issuer = val;
  }

  void __set_issued(const DATE val) {
    issued = val;
  }

  void __set_validity(const DATE val) {
    validity = val;
  }

  void __set_category(const STR& val) {
    category = val;
  }

  void __set_expirience(const NUMBER32 val) {
    expirience = val;
  }

  bool operator == (const Document & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ser == rhs.ser))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(issuer == rhs.issuer))
      return false;
    if (!(issued == rhs.issued))
      return false;
    if (!(validity == rhs.validity))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(expirience == rhs.expirience))
      return false;
    return true;
  }
  bool operator != (const Document &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Document & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Document &a, Document &b);

typedef struct _Manager__isset {
  _Manager__isset() : id(false), cityid(false), svc(false), status(false), person(false), license(false), nickname(false), online(false), isadmin(false) {}
  bool id;
  bool cityid;
  bool svc;
  bool status;
  bool person;
  bool license;
  bool nickname;
  bool online;
  bool isadmin;
} _Manager__isset;

class Manager {
 public:

  static const char* ascii_fingerprint; // = "B7D7482E144326613E7C934CED8C3FC2";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0xD7,0x48,0x2E,0x14,0x43,0x26,0x61,0x3E,0x7C,0x93,0x4C,0xED,0x8C,0x3F,0xC2};

  Manager() : id(0), cityid(0), status((EmployeeStatus::type)0), nickname(), online(0), isadmin(0) {
  }

  virtual ~Manager() throw() {}

  ID id;
  ID cityid;
  RoleOrgService svc;
  EmployeeStatus::type status;
  Person person;
  DocumentMap license;
  STR nickname;
  bool online;
  bool isadmin;

  _Manager__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_svc(const RoleOrgService& val) {
    svc = val;
  }

  void __set_status(const EmployeeStatus::type val) {
    status = val;
  }

  void __set_person(const Person& val) {
    person = val;
  }

  void __set_license(const DocumentMap& val) {
    license = val;
  }

  void __set_nickname(const STR& val) {
    nickname = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  void __set_isadmin(const bool val) {
    isadmin = val;
  }

  bool operator == (const Manager & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(svc == rhs.svc))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(person == rhs.person))
      return false;
    if (!(license == rhs.license))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(online == rhs.online))
      return false;
    if (!(isadmin == rhs.isadmin))
      return false;
    return true;
  }
  bool operator != (const Manager &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Manager & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Manager &a, Manager &b);

typedef struct _Driver__isset {
  _Driver__isset() : id(false), cityid(false), svc(false), geolocation(false), updated(false), serviceorderid(false), status(false), person(false), license(false), nickname(false), callsign(false), cabclass(false), rating(false), online(false), ismaster(false), vehicleids(false) {}
  bool id;
  bool cityid;
  bool svc;
  bool geolocation;
  bool updated;
  bool serviceorderid;
  bool status;
  bool person;
  bool license;
  bool nickname;
  bool callsign;
  bool cabclass;
  bool rating;
  bool online;
  bool ismaster;
  bool vehicleids;
} _Driver__isset;

class Driver {
 public:

  static const char* ascii_fingerprint; // = "72B5CF832BE537B6085D76F835E22C64";
  static const uint8_t binary_fingerprint[16]; // = {0x72,0xB5,0xCF,0x83,0x2B,0xE5,0x37,0xB6,0x08,0x5D,0x76,0xF8,0x35,0xE2,0x2C,0x64};

  Driver() : id(0), cityid(0), updated(0), serviceorderid(0), status((EmployeeStatus::type)0), nickname(), callsign(0), cabclass((CabClass::type)0), rating(0), online(0), ismaster(0) {
  }

  virtual ~Driver() throw() {}

  ID id;
  ID cityid;
  RoleOrgService svc;
  GeoLocation geolocation;
  DATE updated;
  ID serviceorderid;
  EmployeeStatus::type status;
  Person person;
  DocumentMap license;
  STR nickname;
  NUMBER32 callsign;
  CabClass::type cabclass;
  NUMBER32 rating;
  bool online;
  bool ismaster;
  Vehicleids vehicleids;

  _Driver__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_svc(const RoleOrgService& val) {
    svc = val;
  }

  void __set_geolocation(const GeoLocation& val) {
    geolocation = val;
  }

  void __set_updated(const DATE val) {
    updated = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  void __set_status(const EmployeeStatus::type val) {
    status = val;
  }

  void __set_person(const Person& val) {
    person = val;
  }

  void __set_license(const DocumentMap& val) {
    license = val;
  }

  void __set_nickname(const STR& val) {
    nickname = val;
  }

  void __set_callsign(const NUMBER32 val) {
    callsign = val;
  }

  void __set_cabclass(const CabClass::type val) {
    cabclass = val;
  }

  void __set_rating(const NUMBER32 val) {
    rating = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  void __set_ismaster(const bool val) {
    ismaster = val;
  }

  void __set_vehicleids(const Vehicleids& val) {
    vehicleids = val;
  }

  bool operator == (const Driver & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(svc == rhs.svc))
      return false;
    if (!(geolocation == rhs.geolocation))
      return false;
    if (!(updated == rhs.updated))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(person == rhs.person))
      return false;
    if (!(license == rhs.license))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(callsign == rhs.callsign))
      return false;
    if (!(cabclass == rhs.cabclass))
      return false;
    if (!(rating == rhs.rating))
      return false;
    if (!(online == rhs.online))
      return false;
    if (!(ismaster == rhs.ismaster))
      return false;
    if (!(vehicleids == rhs.vehicleids))
      return false;
    return true;
  }
  bool operator != (const Driver &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Driver & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Driver &a, Driver &b);

typedef struct _DriverOnline__isset {
  _DriverOnline__isset() : driverid(false), geolocation(false), serviceorderid(false) {}
  bool driverid;
  bool geolocation;
  bool serviceorderid;
} _DriverOnline__isset;

class DriverOnline {
 public:

  static const char* ascii_fingerprint; // = "4BE74BEBDA7C66F60B478AC4F511ACFD";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xE7,0x4B,0xEB,0xDA,0x7C,0x66,0xF6,0x0B,0x47,0x8A,0xC4,0xF5,0x11,0xAC,0xFD};

  DriverOnline() : driverid(0), serviceorderid(0) {
  }

  virtual ~DriverOnline() throw() {}

  Driverid driverid;
  GeoLocation geolocation;
  ID serviceorderid;

  _DriverOnline__isset __isset;

  void __set_driverid(const Driverid val) {
    driverid = val;
  }

  void __set_geolocation(const GeoLocation& val) {
    geolocation = val;
  }

  void __set_serviceorderid(const ID val) {
    serviceorderid = val;
  }

  bool operator == (const DriverOnline & rhs) const
  {
    if (!(driverid == rhs.driverid))
      return false;
    if (!(geolocation == rhs.geolocation))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    return true;
  }
  bool operator != (const DriverOnline &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DriverOnline & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DriverOnline &a, DriverOnline &b);

typedef struct _Dispatcher__isset {
  _Dispatcher__isset() : id(false), svc(false), status(false), person(false), license(false), nickname(false), online(false) {}
  bool id;
  bool svc;
  bool status;
  bool person;
  bool license;
  bool nickname;
  bool online;
} _Dispatcher__isset;

class Dispatcher {
 public:

  static const char* ascii_fingerprint; // = "747CBE9A1F50E8316A0693AF697D6B3F";
  static const uint8_t binary_fingerprint[16]; // = {0x74,0x7C,0xBE,0x9A,0x1F,0x50,0xE8,0x31,0x6A,0x06,0x93,0xAF,0x69,0x7D,0x6B,0x3F};

  Dispatcher() : id(0), status((EmployeeStatus::type)0), nickname(), online(0) {
  }

  virtual ~Dispatcher() throw() {}

  ID id;
  RoleOrgService svc;
  EmployeeStatus::type status;
  Person person;
  DocumentMap license;
  STR nickname;
  bool online;

  _Dispatcher__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_svc(const RoleOrgService& val) {
    svc = val;
  }

  void __set_status(const EmployeeStatus::type val) {
    status = val;
  }

  void __set_person(const Person& val) {
    person = val;
  }

  void __set_license(const DocumentMap& val) {
    license = val;
  }

  void __set_nickname(const STR& val) {
    nickname = val;
  }

  void __set_online(const bool val) {
    online = val;
  }

  bool operator == (const Dispatcher & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(svc == rhs.svc))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(person == rhs.person))
      return false;
    if (!(license == rhs.license))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(online == rhs.online))
      return false;
    return true;
  }
  bool operator != (const Dispatcher &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Dispatcher & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Dispatcher &a, Dispatcher &b);

typedef struct _ServiceOrderStop__isset {
  _ServiceOrderStop__isset() : id(false), serviceorderid(false), stopno(false), stoptype(false), pickuppersons(false), payload(false), stage(false), created(false), assigned(false), started(false), arrived(false), finished(false), notes(false) {}
  bool id;
  bool serviceorderid;
  bool stopno;
  bool stoptype;
  bool pickuppersons;
  bool payload;
  bool stage;
  bool created;
  bool assigned;
  bool started;
  bool arrived;
  bool finished;
  bool notes;
} _ServiceOrderStop__isset;

class ServiceOrderStop {
 public:

  static const char* ascii_fingerprint; // = "391C5DBB859D6635C569D441D94DA0EB";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0x1C,0x5D,0xBB,0x85,0x9D,0x66,0x35,0xC5,0x69,0xD4,0x41,0xD9,0x4D,0xA0,0xEB};

  ServiceOrderStop() : id(0), serviceorderid(0), stopno(0), stoptype((StopType::type)0), stage((OrderStage::type)0), created(0), assigned(0), started(0), arrived(0), finished(0), notes() {
  }

  virtual ~ServiceOrderStop() throw() {}

  ID id;
  Serviceorderid serviceorderid;
  NUMBER32 stopno;
  StopType::type stoptype;
  OrderStopPersons pickuppersons;
  Payload payload;
  OrderStage::type stage;
  DATE created;
  DATE assigned;
  DATE started;
  DATE arrived;
  DATE finished;
  STR notes;

  _ServiceOrderStop__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_serviceorderid(const Serviceorderid val) {
    serviceorderid = val;
  }

  void __set_stopno(const NUMBER32 val) {
    stopno = val;
  }

  void __set_stoptype(const StopType::type val) {
    stoptype = val;
  }

  void __set_pickuppersons(const OrderStopPersons& val) {
    pickuppersons = val;
  }

  void __set_payload(const Payload& val) {
    payload = val;
  }

  void __set_stage(const OrderStage::type val) {
    stage = val;
  }

  void __set_created(const DATE val) {
    created = val;
  }

  void __set_assigned(const DATE val) {
    assigned = val;
  }

  void __set_started(const DATE val) {
    started = val;
  }

  void __set_arrived(const DATE val) {
    arrived = val;
  }

  void __set_finished(const DATE val) {
    finished = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  bool operator == (const ServiceOrderStop & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    if (!(stopno == rhs.stopno))
      return false;
    if (!(stoptype == rhs.stoptype))
      return false;
    if (!(pickuppersons == rhs.pickuppersons))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(stage == rhs.stage))
      return false;
    if (!(created == rhs.created))
      return false;
    if (!(assigned == rhs.assigned))
      return false;
    if (!(started == rhs.started))
      return false;
    if (!(arrived == rhs.arrived))
      return false;
    if (!(finished == rhs.finished))
      return false;
    if (!(notes == rhs.notes))
      return false;
    return true;
  }
  bool operator != (const ServiceOrderStop &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceOrderStop & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceOrderStop &a, ServiceOrderStop &b);

typedef struct _ServiceOrder__isset {
  _ServiceOrder__isset() : id(false), cityid(false), tag(false), ordertype(false), ordertimetype(false), orderfeatures(false), svc(false), dispatcherid(false), initator(false), passengers(false), stops(false), payload(false), stage(false), crew(false), created(false), sheduletime(false), assigned(false), started(false), arrived(false), finished(false), locstart(false), locfinish(false), totaltimefiscal(false), totaltimeactual(false), sumfiscal(false), sumactual(false), cabclass(false), paymentstate(false), claimstate(false), hasstops(false), notes(false) {}
  bool id;
  bool cityid;
  bool tag;
  bool ordertype;
  bool ordertimetype;
  bool orderfeatures;
  bool svc;
  bool dispatcherid;
  bool initator;
  bool passengers;
  bool stops;
  bool payload;
  bool stage;
  bool crew;
  bool created;
  bool sheduletime;
  bool assigned;
  bool started;
  bool arrived;
  bool finished;
  bool locstart;
  bool locfinish;
  bool totaltimefiscal;
  bool totaltimeactual;
  bool sumfiscal;
  bool sumactual;
  bool cabclass;
  bool paymentstate;
  bool claimstate;
  bool hasstops;
  bool notes;
} _ServiceOrder__isset;

class ServiceOrder {
 public:

  static const char* ascii_fingerprint; // = "3FBEA8EED8AD0B3CB9C7C4AD58A39D04";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0xBE,0xA8,0xEE,0xD8,0xAD,0x0B,0x3C,0xB9,0xC7,0xC4,0xAD,0x58,0xA3,0x9D,0x04};

  ServiceOrder() : id(0), cityid(0), tag(0), ordertype((OrderType::type)0), ordertimetype((OrderTimeType::type)0), dispatcherid(0), initator(0), stage((OrderStage::type)0), created(0), sheduletime(0), assigned(0), started(0), arrived(0), finished(0), totaltimefiscal(0), totaltimeactual(0), sumfiscal(0), sumactual(0), cabclass((CabClass::type)0), paymentstate((PaymentState::type)0), claimstate((ClaimState::type)0), hasstops(0), notes() {
  }

  virtual ~ServiceOrder() throw() {}

  ID id;
  ID cityid;
  NUMBER32 tag;
  OrderType::type ordertype;
  OrderTimeType::type ordertimetype;
  OrderFeatures orderfeatures;
  RoleOrgService svc;
  ID dispatcherid;
  Personid initator;
  Passengerids passengers;
  ServiceOrderStopids stops;
  Payload payload;
  OrderStage::type stage;
  Crew crew;
  DATE created;
  DATE sheduletime;
  DATE assigned;
  DATE started;
  DATE arrived;
  DATE finished;
  Location locstart;
  Location locfinish;
  NUMBER32 totaltimefiscal;
  NUMBER32 totaltimeactual;
  CURR sumfiscal;
  CURR sumactual;
  CabClass::type cabclass;
  PaymentState::type paymentstate;
  ClaimState::type claimstate;
  bool hasstops;
  STR notes;

  _ServiceOrder__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_tag(const NUMBER32 val) {
    tag = val;
  }

  void __set_ordertype(const OrderType::type val) {
    ordertype = val;
  }

  void __set_ordertimetype(const OrderTimeType::type val) {
    ordertimetype = val;
  }

  void __set_orderfeatures(const OrderFeatures& val) {
    orderfeatures = val;
  }

  void __set_svc(const RoleOrgService& val) {
    svc = val;
  }

  void __set_dispatcherid(const ID val) {
    dispatcherid = val;
  }

  void __set_initator(const Personid val) {
    initator = val;
  }

  void __set_passengers(const Passengerids& val) {
    passengers = val;
  }

  void __set_stops(const ServiceOrderStopids& val) {
    stops = val;
  }

  void __set_payload(const Payload& val) {
    payload = val;
  }

  void __set_stage(const OrderStage::type val) {
    stage = val;
  }

  void __set_crew(const Crew& val) {
    crew = val;
  }

  void __set_created(const DATE val) {
    created = val;
  }

  void __set_sheduletime(const DATE val) {
    sheduletime = val;
  }

  void __set_assigned(const DATE val) {
    assigned = val;
  }

  void __set_started(const DATE val) {
    started = val;
  }

  void __set_arrived(const DATE val) {
    arrived = val;
  }

  void __set_finished(const DATE val) {
    finished = val;
  }

  void __set_locstart(const Location& val) {
    locstart = val;
  }

  void __set_locfinish(const Location& val) {
    locfinish = val;
  }

  void __set_totaltimefiscal(const NUMBER32 val) {
    totaltimefiscal = val;
  }

  void __set_totaltimeactual(const NUMBER32 val) {
    totaltimeactual = val;
  }

  void __set_sumfiscal(const CURR val) {
    sumfiscal = val;
  }

  void __set_sumactual(const CURR val) {
    sumactual = val;
  }

  void __set_cabclass(const CabClass::type val) {
    cabclass = val;
  }

  void __set_paymentstate(const PaymentState::type val) {
    paymentstate = val;
  }

  void __set_claimstate(const ClaimState::type val) {
    claimstate = val;
  }

  void __set_hasstops(const bool val) {
    hasstops = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  bool operator == (const ServiceOrder & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(ordertype == rhs.ordertype))
      return false;
    if (!(ordertimetype == rhs.ordertimetype))
      return false;
    if (!(orderfeatures == rhs.orderfeatures))
      return false;
    if (!(svc == rhs.svc))
      return false;
    if (!(dispatcherid == rhs.dispatcherid))
      return false;
    if (!(initator == rhs.initator))
      return false;
    if (!(passengers == rhs.passengers))
      return false;
    if (!(stops == rhs.stops))
      return false;
    if (!(payload == rhs.payload))
      return false;
    if (!(stage == rhs.stage))
      return false;
    if (!(crew == rhs.crew))
      return false;
    if (!(created == rhs.created))
      return false;
    if (!(sheduletime == rhs.sheduletime))
      return false;
    if (!(assigned == rhs.assigned))
      return false;
    if (!(started == rhs.started))
      return false;
    if (!(arrived == rhs.arrived))
      return false;
    if (!(finished == rhs.finished))
      return false;
    if (!(locstart == rhs.locstart))
      return false;
    if (!(locfinish == rhs.locfinish))
      return false;
    if (!(totaltimefiscal == rhs.totaltimefiscal))
      return false;
    if (!(totaltimeactual == rhs.totaltimeactual))
      return false;
    if (!(sumfiscal == rhs.sumfiscal))
      return false;
    if (!(sumactual == rhs.sumactual))
      return false;
    if (!(cabclass == rhs.cabclass))
      return false;
    if (!(paymentstate == rhs.paymentstate))
      return false;
    if (!(claimstate == rhs.claimstate))
      return false;
    if (!(hasstops == rhs.hasstops))
      return false;
    if (!(notes == rhs.notes))
      return false;
    return true;
  }
  bool operator != (const ServiceOrder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceOrder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceOrder &a, ServiceOrder &b);

typedef struct _ServiceOrderDecline__isset {
  _ServiceOrderDecline__isset() : id(false), serviceorderid(false), declinetime(false), driverid(false), cause(false), notes(false) {}
  bool id;
  bool serviceorderid;
  bool declinetime;
  bool driverid;
  bool cause;
  bool notes;
} _ServiceOrderDecline__isset;

class ServiceOrderDecline {
 public:

  static const char* ascii_fingerprint; // = "5BC9B99EA481D3519FBE8AA202B01F9E";
  static const uint8_t binary_fingerprint[16]; // = {0x5B,0xC9,0xB9,0x9E,0xA4,0x81,0xD3,0x51,0x9F,0xBE,0x8A,0xA2,0x02,0xB0,0x1F,0x9E};

  ServiceOrderDecline() : id(0), serviceorderid(0), declinetime(0), driverid(0), cause((DeclineOrderCause::type)0), notes() {
  }

  virtual ~ServiceOrderDecline() throw() {}

  ID id;
  Serviceorderid serviceorderid;
  DATE declinetime;
  Driverid driverid;
  DeclineOrderCause::type cause;
  STR notes;

  _ServiceOrderDecline__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_serviceorderid(const Serviceorderid val) {
    serviceorderid = val;
  }

  void __set_declinetime(const DATE val) {
    declinetime = val;
  }

  void __set_driverid(const Driverid val) {
    driverid = val;
  }

  void __set_cause(const DeclineOrderCause::type val) {
    cause = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  bool operator == (const ServiceOrderDecline & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    if (!(declinetime == rhs.declinetime))
      return false;
    if (!(driverid == rhs.driverid))
      return false;
    if (!(cause == rhs.cause))
      return false;
    if (!(notes == rhs.notes))
      return false;
    return true;
  }
  bool operator != (const ServiceOrderDecline &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceOrderDecline & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceOrderDecline &a, ServiceOrderDecline &b);

typedef struct _Claim__isset {
  _Claim__isset() : id(false), serviceorderid(false), personrole(false), driverid(false), claimtime(false), notes(false) {}
  bool id;
  bool serviceorderid;
  bool personrole;
  bool driverid;
  bool claimtime;
  bool notes;
} _Claim__isset;

class Claim {
 public:

  static const char* ascii_fingerprint; // = "06C27127ED88B5CC24A1B92200F50BC2";
  static const uint8_t binary_fingerprint[16]; // = {0x06,0xC2,0x71,0x27,0xED,0x88,0xB5,0xCC,0x24,0xA1,0xB9,0x22,0x00,0xF5,0x0B,0xC2};

  Claim() : id(0), serviceorderid(0), personrole((PersonRole::type)0), driverid(0), claimtime(0), notes() {
  }

  virtual ~Claim() throw() {}

  ID id;
  Serviceorderid serviceorderid;
  PersonRole::type personrole;
  Driverid driverid;
  DATE claimtime;
  STR notes;

  _Claim__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_serviceorderid(const Serviceorderid val) {
    serviceorderid = val;
  }

  void __set_personrole(const PersonRole::type val) {
    personrole = val;
  }

  void __set_driverid(const Driverid val) {
    driverid = val;
  }

  void __set_claimtime(const DATE val) {
    claimtime = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  bool operator == (const Claim & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    if (!(personrole == rhs.personrole))
      return false;
    if (!(driverid == rhs.driverid))
      return false;
    if (!(claimtime == rhs.claimtime))
      return false;
    if (!(notes == rhs.notes))
      return false;
    return true;
  }
  bool operator != (const Claim &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Claim & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Claim &a, Claim &b);

typedef struct _Track__isset {
  _Track__isset() : id(false), driverid(false), serviceorderid(false), tracktime(false), location(false) {}
  bool id;
  bool driverid;
  bool serviceorderid;
  bool tracktime;
  bool location;
} _Track__isset;

class Track {
 public:

  static const char* ascii_fingerprint; // = "8F4A1B4B5D9589830265885F094FB12C";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x4A,0x1B,0x4B,0x5D,0x95,0x89,0x83,0x02,0x65,0x88,0x5F,0x09,0x4F,0xB1,0x2C};

  Track() : id(0), driverid(0), serviceorderid(0), tracktime(0) {
  }

  virtual ~Track() throw() {}

  ID id;
  Driverid driverid;
  Serviceorderid serviceorderid;
  DATE tracktime;
  GeoLocation location;

  _Track__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_driverid(const Driverid val) {
    driverid = val;
  }

  void __set_serviceorderid(const Serviceorderid val) {
    serviceorderid = val;
  }

  void __set_tracktime(const DATE val) {
    tracktime = val;
  }

  void __set_location(const GeoLocation& val) {
    location = val;
  }

  bool operator == (const Track & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(driverid == rhs.driverid))
      return false;
    if (!(serviceorderid == rhs.serviceorderid))
      return false;
    if (!(tracktime == rhs.tracktime))
      return false;
    if (!(location == rhs.location))
      return false;
    return true;
  }
  bool operator != (const Track &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Track & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Track &a, Track &b);

typedef struct _SheduleDays__isset {
  _SheduleDays__isset() : week0(false), week1(false), week2(false), week3(false), week4(false), week5(false), week6(false) {}
  bool week0;
  bool week1;
  bool week2;
  bool week3;
  bool week4;
  bool week5;
  bool week6;
} _SheduleDays__isset;

class SheduleDays {
 public:

  static const char* ascii_fingerprint; // = "ECB523BA8415F2971A85590A45B62180";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0xB5,0x23,0xBA,0x84,0x15,0xF2,0x97,0x1A,0x85,0x59,0x0A,0x45,0xB6,0x21,0x80};

  SheduleDays() : week0(0), week1(0), week2(0), week3(0), week4(0), week5(0), week6(0) {
  }

  virtual ~SheduleDays() throw() {}

  bool week0;
  bool week1;
  bool week2;
  bool week3;
  bool week4;
  bool week5;
  bool week6;

  _SheduleDays__isset __isset;

  void __set_week0(const bool val) {
    week0 = val;
  }

  void __set_week1(const bool val) {
    week1 = val;
  }

  void __set_week2(const bool val) {
    week2 = val;
  }

  void __set_week3(const bool val) {
    week3 = val;
  }

  void __set_week4(const bool val) {
    week4 = val;
  }

  void __set_week5(const bool val) {
    week5 = val;
  }

  void __set_week6(const bool val) {
    week6 = val;
  }

  bool operator == (const SheduleDays & rhs) const
  {
    if (!(week0 == rhs.week0))
      return false;
    if (!(week1 == rhs.week1))
      return false;
    if (!(week2 == rhs.week2))
      return false;
    if (!(week3 == rhs.week3))
      return false;
    if (!(week4 == rhs.week4))
      return false;
    if (!(week5 == rhs.week5))
      return false;
    if (!(week6 == rhs.week6))
      return false;
    return true;
  }
  bool operator != (const SheduleDays &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SheduleDays & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SheduleDays &a, SheduleDays &b);

typedef struct _Shedule__isset {
  _Shedule__isset() : id(false), active(false), sheduledays(false), customerid(false), name(false), description(false), pointstart(false), pointfinish(false), hasMiddlePoints(false), haspassenger(false), passengers(false), timestart(false), timefinish(false), sheduleoperatorid(false), preferreddriverid(false) {}
  bool id;
  bool active;
  bool sheduledays;
  bool customerid;
  bool name;
  bool description;
  bool pointstart;
  bool pointfinish;
  bool hasMiddlePoints;
  bool haspassenger;
  bool passengers;
  bool timestart;
  bool timefinish;
  bool sheduleoperatorid;
  bool preferreddriverid;
} _Shedule__isset;

class Shedule {
 public:

  static const char* ascii_fingerprint; // = "44E51A62670F629C431106A0CD7ACF7F";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xE5,0x1A,0x62,0x67,0x0F,0x62,0x9C,0x43,0x11,0x06,0xA0,0xCD,0x7A,0xCF,0x7F};

  Shedule() : id(0), active(0), customerid(0), name(), description(), hasMiddlePoints(0), haspassenger(0), timestart(0), timefinish(0), sheduleoperatorid(0), preferreddriverid(0) {
  }

  virtual ~Shedule() throw() {}

  ID id;
  bool active;
  SheduleDays sheduledays;
  ID customerid;
  STR name;
  STR description;
  Location pointstart;
  Location pointfinish;
  bool hasMiddlePoints;
  bool haspassenger;
  Passengerids passengers;
  DATE timestart;
  DATE timefinish;
  ID sheduleoperatorid;
  ID preferreddriverid;

  _Shedule__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_active(const bool val) {
    active = val;
  }

  void __set_sheduledays(const SheduleDays& val) {
    sheduledays = val;
  }

  void __set_customerid(const ID val) {
    customerid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_description(const STR& val) {
    description = val;
  }

  void __set_pointstart(const Location& val) {
    pointstart = val;
  }

  void __set_pointfinish(const Location& val) {
    pointfinish = val;
  }

  void __set_hasMiddlePoints(const bool val) {
    hasMiddlePoints = val;
  }

  void __set_haspassenger(const bool val) {
    haspassenger = val;
  }

  void __set_passengers(const Passengerids& val) {
    passengers = val;
  }

  void __set_timestart(const DATE val) {
    timestart = val;
  }

  void __set_timefinish(const DATE val) {
    timefinish = val;
  }

  void __set_sheduleoperatorid(const ID val) {
    sheduleoperatorid = val;
  }

  void __set_preferreddriverid(const ID val) {
    preferreddriverid = val;
  }

  bool operator == (const Shedule & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(active == rhs.active))
      return false;
    if (!(sheduledays == rhs.sheduledays))
      return false;
    if (!(customerid == rhs.customerid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(pointstart == rhs.pointstart))
      return false;
    if (!(pointfinish == rhs.pointfinish))
      return false;
    if (!(hasMiddlePoints == rhs.hasMiddlePoints))
      return false;
    if (!(haspassenger == rhs.haspassenger))
      return false;
    if (!(passengers == rhs.passengers))
      return false;
    if (!(timestart == rhs.timestart))
      return false;
    if (!(timefinish == rhs.timefinish))
      return false;
    if (!(sheduleoperatorid == rhs.sheduleoperatorid))
      return false;
    if (!(preferreddriverid == rhs.preferreddriverid))
      return false;
    return true;
  }
  bool operator != (const Shedule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Shedule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Shedule &a, Shedule &b);

typedef struct _DriverBlackList__isset {
  _DriverBlackList__isset() : id(false), created(false), customerid(false), driverid(false) {}
  bool id;
  bool created;
  bool customerid;
  bool driverid;
} _DriverBlackList__isset;

class DriverBlackList {
 public:

  static const char* ascii_fingerprint; // = "66C8E6F97F0275919D86FEB536251B17";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xC8,0xE6,0xF9,0x7F,0x02,0x75,0x91,0x9D,0x86,0xFE,0xB5,0x36,0x25,0x1B,0x17};

  DriverBlackList() : id(0), created(0), customerid(0), driverid(0) {
  }

  virtual ~DriverBlackList() throw() {}

  ID id;
  DATE created;
  ID customerid;
  ID driverid;

  _DriverBlackList__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_created(const DATE val) {
    created = val;
  }

  void __set_customerid(const ID val) {
    customerid = val;
  }

  void __set_driverid(const ID val) {
    driverid = val;
  }

  bool operator == (const DriverBlackList & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(created == rhs.created))
      return false;
    if (!(customerid == rhs.customerid))
      return false;
    if (!(driverid == rhs.driverid))
      return false;
    return true;
  }
  bool operator != (const DriverBlackList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DriverBlackList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DriverBlackList &a, DriverBlackList &b);

typedef struct _SheduleStop__isset {
  _SheduleStop__isset() : id(false), sheduleid(false), point(false), position(false), haspassenger(false), passengerid(false) {}
  bool id;
  bool sheduleid;
  bool point;
  bool position;
  bool haspassenger;
  bool passengerid;
} _SheduleStop__isset;

class SheduleStop {
 public:

  static const char* ascii_fingerprint; // = "A106DE6B93B408305F36CDB31C047018";
  static const uint8_t binary_fingerprint[16]; // = {0xA1,0x06,0xDE,0x6B,0x93,0xB4,0x08,0x30,0x5F,0x36,0xCD,0xB3,0x1C,0x04,0x70,0x18};

  SheduleStop() : id(0), sheduleid(0), position(0), haspassenger(0), passengerid(0) {
  }

  virtual ~SheduleStop() throw() {}

  ID id;
  ID sheduleid;
  Location point;
  NUMBER32 position;
  bool haspassenger;
  ID passengerid;

  _SheduleStop__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_sheduleid(const ID val) {
    sheduleid = val;
  }

  void __set_point(const Location& val) {
    point = val;
  }

  void __set_position(const NUMBER32 val) {
    position = val;
  }

  void __set_haspassenger(const bool val) {
    haspassenger = val;
  }

  void __set_passengerid(const ID val) {
    passengerid = val;
  }

  bool operator == (const SheduleStop & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(sheduleid == rhs.sheduleid))
      return false;
    if (!(point == rhs.point))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(haspassenger == rhs.haspassenger))
      return false;
    if (!(passengerid == rhs.passengerid))
      return false;
    return true;
  }
  bool operator != (const SheduleStop &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SheduleStop & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SheduleStop &a, SheduleStop &b);

typedef struct _TariffPlan__isset {
  _TariffPlan__isset() : id(false), orgserviceid(false), cityid(false), name(false), notes(false), active(false) {}
  bool id;
  bool orgserviceid;
  bool cityid;
  bool name;
  bool notes;
  bool active;
} _TariffPlan__isset;

class TariffPlan {
 public:

  static const char* ascii_fingerprint; // = "CA6D95DB1B0AA22C1ECBC7C48D241638";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x6D,0x95,0xDB,0x1B,0x0A,0xA2,0x2C,0x1E,0xCB,0xC7,0xC4,0x8D,0x24,0x16,0x38};

  TariffPlan() : id(0), orgserviceid(0), cityid(0), name(), notes(), active(0) {
  }

  virtual ~TariffPlan() throw() {}

  ID id;
  OrgServiceid orgserviceid;
  ID cityid;
  STR name;
  STR notes;
  bool active;

  _TariffPlan__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_orgserviceid(const OrgServiceid val) {
    orgserviceid = val;
  }

  void __set_cityid(const ID val) {
    cityid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  void __set_active(const bool val) {
    active = val;
  }

  bool operator == (const TariffPlan & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(orgserviceid == rhs.orgserviceid))
      return false;
    if (!(cityid == rhs.cityid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(notes == rhs.notes))
      return false;
    if (!(active == rhs.active))
      return false;
    return true;
  }
  bool operator != (const TariffPlan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TariffPlan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TariffPlan &a, TariffPlan &b);

typedef struct _Rate__isset {
  _Rate__isset() : id(false), tariffplanid(false), name(false), active(false), datestart(false), datefinish(false), isweekend(false), isday(false), hourstart(false), hourfinish(false), costmin(false), priceboarding(false), priceminute(false), pricedelay(false), pricewait(false), speedmin(false), timedelayfree(false) {}
  bool id;
  bool tariffplanid;
  bool name;
  bool active;
  bool datestart;
  bool datefinish;
  bool isweekend;
  bool isday;
  bool hourstart;
  bool hourfinish;
  bool costmin;
  bool priceboarding;
  bool priceminute;
  bool pricedelay;
  bool pricewait;
  bool speedmin;
  bool timedelayfree;
} _Rate__isset;

class Rate {
 public:

  static const char* ascii_fingerprint; // = "B59FCAFA8796B9A33928E7CB12304B0B";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x9F,0xCA,0xFA,0x87,0x96,0xB9,0xA3,0x39,0x28,0xE7,0xCB,0x12,0x30,0x4B,0x0B};

  Rate() : id(0), tariffplanid(0), name(), active(0), datestart(0), datefinish(0), isweekend(0), isday(0), hourstart(0), hourfinish(0), costmin(0), priceboarding(0), priceminute(0), pricedelay(0), pricewait(0), speedmin(0), timedelayfree(0) {
  }

  virtual ~Rate() throw() {}

  ID id;
  ID tariffplanid;
  STR name;
  bool active;
  DATE datestart;
  DATE datefinish;
  bool isweekend;
  bool isday;
  NUMBER32 hourstart;
  NUMBER32 hourfinish;
  CURR costmin;
  CURR priceboarding;
  CURR priceminute;
  CURR pricedelay;
  CURR pricewait;
  NUMBER32 speedmin;
  NUMBER32 timedelayfree;

  _Rate__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_tariffplanid(const ID val) {
    tariffplanid = val;
  }

  void __set_name(const STR& val) {
    name = val;
  }

  void __set_active(const bool val) {
    active = val;
  }

  void __set_datestart(const DATE val) {
    datestart = val;
  }

  void __set_datefinish(const DATE val) {
    datefinish = val;
  }

  void __set_isweekend(const bool val) {
    isweekend = val;
  }

  void __set_isday(const bool val) {
    isday = val;
  }

  void __set_hourstart(const NUMBER32 val) {
    hourstart = val;
  }

  void __set_hourfinish(const NUMBER32 val) {
    hourfinish = val;
  }

  void __set_costmin(const CURR val) {
    costmin = val;
  }

  void __set_priceboarding(const CURR val) {
    priceboarding = val;
  }

  void __set_priceminute(const CURR val) {
    priceminute = val;
  }

  void __set_pricedelay(const CURR val) {
    pricedelay = val;
  }

  void __set_pricewait(const CURR val) {
    pricewait = val;
  }

  void __set_speedmin(const NUMBER32 val) {
    speedmin = val;
  }

  void __set_timedelayfree(const NUMBER32 val) {
    timedelayfree = val;
  }

  bool operator == (const Rate & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tariffplanid == rhs.tariffplanid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(active == rhs.active))
      return false;
    if (!(datestart == rhs.datestart))
      return false;
    if (!(datefinish == rhs.datefinish))
      return false;
    if (!(isweekend == rhs.isweekend))
      return false;
    if (!(isday == rhs.isday))
      return false;
    if (!(hourstart == rhs.hourstart))
      return false;
    if (!(hourfinish == rhs.hourfinish))
      return false;
    if (!(costmin == rhs.costmin))
      return false;
    if (!(priceboarding == rhs.priceboarding))
      return false;
    if (!(priceminute == rhs.priceminute))
      return false;
    if (!(pricedelay == rhs.pricedelay))
      return false;
    if (!(pricewait == rhs.pricewait))
      return false;
    if (!(speedmin == rhs.speedmin))
      return false;
    if (!(timedelayfree == rhs.timedelayfree))
      return false;
    return true;
  }
  bool operator != (const Rate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Rate &a, Rate &b);

typedef struct _Notification__isset {
  _Notification__isset() : id(false), isactive(false), msgtime(false), msgfrom(false), driverid(false), todriver(false), tooperator(false), topassenger(false), todispatcher(false), note(false) {}
  bool id;
  bool isactive;
  bool msgtime;
  bool msgfrom;
  bool driverid;
  bool todriver;
  bool tooperator;
  bool topassenger;
  bool todispatcher;
  bool note;
} _Notification__isset;

class Notification {
 public:

  static const char* ascii_fingerprint; // = "6DCF553DD2AEB36FD2573F2FDE82F2A7";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xCF,0x55,0x3D,0xD2,0xAE,0xB3,0x6F,0xD2,0x57,0x3F,0x2F,0xDE,0x82,0xF2,0xA7};

  Notification() : id(0), isactive(0), msgtime(0), msgfrom((PersonRole::type)0), driverid(0), todriver(0), tooperator(0), topassenger(0), todispatcher(0), note() {
  }

  virtual ~Notification() throw() {}

  ID id;
  bool isactive;
  DATE msgtime;
  PersonRole::type msgfrom;
  ID driverid;
  bool todriver;
  bool tooperator;
  bool topassenger;
  bool todispatcher;
  STR note;

  _Notification__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_isactive(const bool val) {
    isactive = val;
  }

  void __set_msgtime(const DATE val) {
    msgtime = val;
  }

  void __set_msgfrom(const PersonRole::type val) {
    msgfrom = val;
  }

  void __set_driverid(const ID val) {
    driverid = val;
  }

  void __set_todriver(const bool val) {
    todriver = val;
  }

  void __set_tooperator(const bool val) {
    tooperator = val;
  }

  void __set_topassenger(const bool val) {
    topassenger = val;
  }

  void __set_todispatcher(const bool val) {
    todispatcher = val;
  }

  void __set_note(const STR& val) {
    note = val;
  }

  bool operator == (const Notification & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(isactive == rhs.isactive))
      return false;
    if (!(msgtime == rhs.msgtime))
      return false;
    if (!(msgfrom == rhs.msgfrom))
      return false;
    if (!(driverid == rhs.driverid))
      return false;
    if (!(todriver == rhs.todriver))
      return false;
    if (!(tooperator == rhs.tooperator))
      return false;
    if (!(topassenger == rhs.topassenger))
      return false;
    if (!(todispatcher == rhs.todispatcher))
      return false;
    if (!(note == rhs.note))
      return false;
    return true;
  }
  bool operator != (const Notification &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notification & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Notification &a, Notification &b);

typedef struct _BillAct__isset {
  _BillAct__isset() : id(false), orgservice(false), customerid(false), periodid(false), datestart(false), datefinish(false), total0(false), total1(false), total2(false), taxpercent(false), tax(false), hasdiscount(false), created(false), haspayments(false), paid(false), datepaid(false), sumbefore(false), sumafter(false), note(false), billno(false), actno(false) {}
  bool id;
  bool orgservice;
  bool customerid;
  bool periodid;
  bool datestart;
  bool datefinish;
  bool total0;
  bool total1;
  bool total2;
  bool taxpercent;
  bool tax;
  bool hasdiscount;
  bool created;
  bool haspayments;
  bool paid;
  bool datepaid;
  bool sumbefore;
  bool sumafter;
  bool note;
  bool billno;
  bool actno;
} _BillAct__isset;

class BillAct {
 public:

  static const char* ascii_fingerprint; // = "54D436AB741A5F55EFB974DB54DA24FE";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0xD4,0x36,0xAB,0x74,0x1A,0x5F,0x55,0xEF,0xB9,0x74,0xDB,0x54,0xDA,0x24,0xFE};

  BillAct() : id(0), customerid(0), periodid(0), datestart(0), datefinish(0), total0(0), total1(0), total2(0), taxpercent(0), tax(0), hasdiscount(0), created(0), haspayments(0), paid(0), datepaid(0), sumbefore(0), sumafter(0), note(), billno(), actno() {
  }

  virtual ~BillAct() throw() {}

  ID id;
  RoleOrgService orgservice;
  ID customerid;
  NUMBER32 periodid;
  DATE datestart;
  DATE datefinish;
  CURR total0;
  CURR total1;
  CURR total2;
  CURR taxpercent;
  CURR tax;
  bool hasdiscount;
  DATE created;
  bool haspayments;
  bool paid;
  DATE datepaid;
  CURR sumbefore;
  CURR sumafter;
  STR note;
  STR billno;
  STR actno;

  _BillAct__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_orgservice(const RoleOrgService& val) {
    orgservice = val;
  }

  void __set_customerid(const ID val) {
    customerid = val;
  }

  void __set_periodid(const NUMBER32 val) {
    periodid = val;
  }

  void __set_datestart(const DATE val) {
    datestart = val;
  }

  void __set_datefinish(const DATE val) {
    datefinish = val;
  }

  void __set_total0(const CURR val) {
    total0 = val;
  }

  void __set_total1(const CURR val) {
    total1 = val;
  }

  void __set_total2(const CURR val) {
    total2 = val;
  }

  void __set_taxpercent(const CURR val) {
    taxpercent = val;
  }

  void __set_tax(const CURR val) {
    tax = val;
  }

  void __set_hasdiscount(const bool val) {
    hasdiscount = val;
  }

  void __set_created(const DATE val) {
    created = val;
  }

  void __set_haspayments(const bool val) {
    haspayments = val;
  }

  void __set_paid(const bool val) {
    paid = val;
  }

  void __set_datepaid(const DATE val) {
    datepaid = val;
  }

  void __set_sumbefore(const CURR val) {
    sumbefore = val;
  }

  void __set_sumafter(const CURR val) {
    sumafter = val;
  }

  void __set_note(const STR& val) {
    note = val;
  }

  void __set_billno(const STR& val) {
    billno = val;
  }

  void __set_actno(const STR& val) {
    actno = val;
  }

  bool operator == (const BillAct & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(orgservice == rhs.orgservice))
      return false;
    if (!(customerid == rhs.customerid))
      return false;
    if (!(periodid == rhs.periodid))
      return false;
    if (!(datestart == rhs.datestart))
      return false;
    if (!(datefinish == rhs.datefinish))
      return false;
    if (!(total0 == rhs.total0))
      return false;
    if (!(total1 == rhs.total1))
      return false;
    if (!(total2 == rhs.total2))
      return false;
    if (!(taxpercent == rhs.taxpercent))
      return false;
    if (!(tax == rhs.tax))
      return false;
    if (!(hasdiscount == rhs.hasdiscount))
      return false;
    if (!(created == rhs.created))
      return false;
    if (!(haspayments == rhs.haspayments))
      return false;
    if (!(paid == rhs.paid))
      return false;
    if (!(datepaid == rhs.datepaid))
      return false;
    if (!(sumbefore == rhs.sumbefore))
      return false;
    if (!(sumafter == rhs.sumafter))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(billno == rhs.billno))
      return false;
    if (!(actno == rhs.actno))
      return false;
    return true;
  }
  bool operator != (const BillAct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BillAct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BillAct &a, BillAct &b);

typedef struct _Payment__isset {
  _Payment__isset() : id(false), billactid(false), datereceived(false), document(false) {}
  bool id;
  bool billactid;
  bool datereceived;
  bool document;
} _Payment__isset;

class Payment {
 public:

  static const char* ascii_fingerprint; // = "1F10CEFCE913A7C7AC1BF57FD21B890E";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x10,0xCE,0xFC,0xE9,0x13,0xA7,0xC7,0xAC,0x1B,0xF5,0x7F,0xD2,0x1B,0x89,0x0E};

  Payment() : id(0), billactid(0), datereceived(0) {
  }

  virtual ~Payment() throw() {}

  ID id;
  ID billactid;
  DATE datereceived;
  DocumentMap document;

  _Payment__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_billactid(const ID val) {
    billactid = val;
  }

  void __set_datereceived(const DATE val) {
    datereceived = val;
  }

  void __set_document(const DocumentMap& val) {
    document = val;
  }

  bool operator == (const Payment & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(billactid == rhs.billactid))
      return false;
    if (!(datereceived == rhs.datereceived))
      return false;
    if (!(document == rhs.document))
      return false;
    return true;
  }
  bool operator != (const Payment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Payment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Payment &a, Payment &b);

typedef struct _AutoPayment__isset {
  _AutoPayment__isset() : id(false), periodid(false), datestart(false), datefinish(false), state(false) {}
  bool id;
  bool periodid;
  bool datestart;
  bool datefinish;
  bool state;
} _AutoPayment__isset;

class AutoPayment {
 public:

  static const char* ascii_fingerprint; // = "CA9E086295400ABB4921368555BAB8D5";
  static const uint8_t binary_fingerprint[16]; // = {0xCA,0x9E,0x08,0x62,0x95,0x40,0x0A,0xBB,0x49,0x21,0x36,0x85,0x55,0xBA,0xB8,0xD5};

  AutoPayment() : id(0), periodid(0), datestart(0), datefinish(0), state(0) {
  }

  virtual ~AutoPayment() throw() {}

  ID id;
  NUMBER32 periodid;
  DATE datestart;
  DATE datefinish;
  NUMBER32 state;

  _AutoPayment__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_periodid(const NUMBER32 val) {
    periodid = val;
  }

  void __set_datestart(const DATE val) {
    datestart = val;
  }

  void __set_datefinish(const DATE val) {
    datefinish = val;
  }

  void __set_state(const NUMBER32 val) {
    state = val;
  }

  bool operator == (const AutoPayment & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(periodid == rhs.periodid))
      return false;
    if (!(datestart == rhs.datestart))
      return false;
    if (!(datefinish == rhs.datefinish))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const AutoPayment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AutoPayment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AutoPayment &a, AutoPayment &b);

typedef struct _NotificationEvent__isset {
  _NotificationEvent__isset() : id(false), receiverrole(false), phone(false), emitterrole(false), emitter(false), serviceobject(false), serviceaction(false), datestart(false), infuture(false), serviceobjectid(false), sent(false), sentdate(false), notes(false), gcmsend(false), gcmsent(false), isgcmsentsuccess(false), isgcmsentdate(false), gcmresponsecode(false), gcmresponse(false) {}
  bool id;
  bool receiverrole;
  bool phone;
  bool emitterrole;
  bool emitter;
  bool serviceobject;
  bool serviceaction;
  bool datestart;
  bool infuture;
  bool serviceobjectid;
  bool sent;
  bool sentdate;
  bool notes;
  bool gcmsend;
  bool gcmsent;
  bool isgcmsentsuccess;
  bool isgcmsentdate;
  bool gcmresponsecode;
  bool gcmresponse;
} _NotificationEvent__isset;

class NotificationEvent {
 public:

  static const char* ascii_fingerprint; // = "A7C1E91A1633125B1E1BA9227CC71E38";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xC1,0xE9,0x1A,0x16,0x33,0x12,0x5B,0x1E,0x1B,0xA9,0x22,0x7C,0xC7,0x1E,0x38};

  NotificationEvent() : id(0), receiverrole((PersonRole::type)0), phone(), emitterrole((PersonRole::type)0), emitter(0), serviceobject((ServiceObject::type)0), serviceaction((ServiceAction::type)0), datestart(0), infuture(0), serviceobjectid(0), sent(0), sentdate(0), notes(), gcmsend(0), gcmsent(0), isgcmsentsuccess(0), isgcmsentdate(0), gcmresponsecode(), gcmresponse() {
  }

  virtual ~NotificationEvent() throw() {}

  ID id;
  PersonRole::type receiverrole;
  STR phone;
  PersonRole::type emitterrole;
  ID emitter;
  ServiceObject::type serviceobject;
  ServiceAction::type serviceaction;
  DATE datestart;
  bool infuture;
  ID serviceobjectid;
  bool sent;
  DATE sentdate;
  STR notes;
  bool gcmsend;
  NUMBER32 gcmsent;
  bool isgcmsentsuccess;
  DATE isgcmsentdate;
  STR gcmresponsecode;
  STR gcmresponse;

  _NotificationEvent__isset __isset;

  void __set_id(const ID val) {
    id = val;
  }

  void __set_receiverrole(const PersonRole::type val) {
    receiverrole = val;
  }

  void __set_phone(const STR& val) {
    phone = val;
  }

  void __set_emitterrole(const PersonRole::type val) {
    emitterrole = val;
  }

  void __set_emitter(const ID val) {
    emitter = val;
  }

  void __set_serviceobject(const ServiceObject::type val) {
    serviceobject = val;
  }

  void __set_serviceaction(const ServiceAction::type val) {
    serviceaction = val;
  }

  void __set_datestart(const DATE val) {
    datestart = val;
  }

  void __set_infuture(const bool val) {
    infuture = val;
  }

  void __set_serviceobjectid(const ID val) {
    serviceobjectid = val;
  }

  void __set_sent(const bool val) {
    sent = val;
  }

  void __set_sentdate(const DATE val) {
    sentdate = val;
  }

  void __set_notes(const STR& val) {
    notes = val;
  }

  void __set_gcmsend(const bool val) {
    gcmsend = val;
  }

  void __set_gcmsent(const NUMBER32 val) {
    gcmsent = val;
  }

  void __set_isgcmsentsuccess(const bool val) {
    isgcmsentsuccess = val;
  }

  void __set_isgcmsentdate(const DATE val) {
    isgcmsentdate = val;
  }

  void __set_gcmresponsecode(const STR& val) {
    gcmresponsecode = val;
  }

  void __set_gcmresponse(const STR& val) {
    gcmresponse = val;
  }

  bool operator == (const NotificationEvent & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(receiverrole == rhs.receiverrole))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(emitterrole == rhs.emitterrole))
      return false;
    if (!(emitter == rhs.emitter))
      return false;
    if (!(serviceobject == rhs.serviceobject))
      return false;
    if (!(serviceaction == rhs.serviceaction))
      return false;
    if (!(datestart == rhs.datestart))
      return false;
    if (!(infuture == rhs.infuture))
      return false;
    if (!(serviceobjectid == rhs.serviceobjectid))
      return false;
    if (!(sent == rhs.sent))
      return false;
    if (!(sentdate == rhs.sentdate))
      return false;
    if (!(notes == rhs.notes))
      return false;
    if (!(gcmsend == rhs.gcmsend))
      return false;
    if (!(gcmsent == rhs.gcmsent))
      return false;
    if (!(isgcmsentsuccess == rhs.isgcmsentsuccess))
      return false;
    if (!(isgcmsentdate == rhs.isgcmsentdate))
      return false;
    if (!(gcmresponsecode == rhs.gcmresponsecode))
      return false;
    if (!(gcmresponse == rhs.gcmresponse))
      return false;
    return true;
  }
  bool operator != (const NotificationEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotificationEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotificationEvent &a, NotificationEvent &b);

typedef struct _ServiceFailure__isset {
  _ServiceFailure__isset() : errortype(false), errorcode(false), description(false) {}
  bool errortype;
  bool errorcode;
  bool description;
} _ServiceFailure__isset;

class ServiceFailure : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "D3BA2D33C1BA9DD4F2FDDA18F1640BC8";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0xBA,0x2D,0x33,0xC1,0xBA,0x9D,0xD4,0xF2,0xFD,0xDA,0x18,0xF1,0x64,0x0B,0xC8};

  ServiceFailure() : errortype((ErrorType::type)0), errorcode(0), description() {
  }

  virtual ~ServiceFailure() throw() {}

  ErrorType::type errortype;
  NUMBER32 errorcode;
  STR description;

  _ServiceFailure__isset __isset;

  void __set_errortype(const ErrorType::type val) {
    errortype = val;
  }

  void __set_errorcode(const NUMBER32 val) {
    errorcode = val;
  }

  void __set_description(const STR& val) {
    description = val;
  }

  bool operator == (const ServiceFailure & rhs) const
  {
    if (!(errortype == rhs.errortype))
      return false;
    if (!(errorcode == rhs.errorcode))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const ServiceFailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceFailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceFailure &a, ServiceFailure &b);

} // namespace

#endif
