// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef TAXI_TYPES_ODB_HXX
#define TAXI_TYPES_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

// Begin prologue.
//
#include "taxi_odb_traits-mysql.hxx"
//
// End prologue.

#include "taxi_types.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // City
  //
  template <>
  struct class_traits< ::taxi::City >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::City >
  {
    public:
    typedef ::taxi::City object_type;
    typedef ::taxi::City* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DictEntry
  //
  template <>
  struct class_traits< ::taxi::DictEntry >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::DictEntry >
  {
    public:
    typedef ::taxi::DictEntry object_type;
    typedef ::taxi::DictEntry* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Bank
  //
  template <>
  struct class_traits< ::taxi::Bank >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Bank >
  {
    public:
    typedef ::taxi::Bank object_type;
    typedef ::taxi::Bank* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Org
  //
  template <>
  struct class_traits< ::taxi::Org >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Org >
  {
    public:
    typedef ::taxi::Org object_type;
    typedef ::taxi::Org* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // OrgService
  //
  template <>
  struct class_traits< ::taxi::OrgService >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::OrgService >
  {
    public:
    typedef ::taxi::OrgService object_type;
    typedef ::taxi::OrgService* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Customer
  //
  template <>
  struct class_traits< ::taxi::Customer >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Customer >
  {
    public:
    typedef ::taxi::Customer object_type;
    typedef ::taxi::Customer* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Passenger
  //
  template <>
  struct class_traits< ::taxi::Passenger >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Passenger >
  {
    public:
    typedef ::taxi::Passenger object_type;
    typedef ::taxi::Passenger* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Vehicle
  //
  template <>
  struct class_traits< ::taxi::Vehicle >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Vehicle >
  {
    public:
    typedef ::taxi::Vehicle object_type;
    typedef ::taxi::Vehicle* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Document
  //
  template <>
  struct class_traits< ::taxi::Document >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Document >
  {
    public:
    typedef ::taxi::Document object_type;
    typedef ::taxi::Document* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Driver
  //
  template <>
  struct class_traits< ::taxi::Driver >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Driver >
  {
    public:
    typedef ::taxi::Driver object_type;
    typedef ::taxi::Driver* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Dispatcher
  //
  template <>
  struct class_traits< ::taxi::Dispatcher >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Dispatcher >
  {
    public:
    typedef ::taxi::Dispatcher object_type;
    typedef ::taxi::Dispatcher* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ServiceOrderStop
  //
  template <>
  struct class_traits< ::taxi::ServiceOrderStop >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::ServiceOrderStop >
  {
    public:
    typedef ::taxi::ServiceOrderStop object_type;
    typedef ::taxi::ServiceOrderStop* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ServiceOrder
  //
  template <>
  struct class_traits< ::taxi::ServiceOrder >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::ServiceOrder >
  {
    public:
    typedef ::taxi::ServiceOrder object_type;
    typedef ::taxi::ServiceOrder* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // ServiceOrderDecline
  //
  template <>
  struct class_traits< ::taxi::ServiceOrderDecline >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::ServiceOrderDecline >
  {
    public:
    typedef ::taxi::ServiceOrderDecline object_type;
    typedef ::taxi::ServiceOrderDecline* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Claim
  //
  template <>
  struct class_traits< ::taxi::Claim >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Claim >
  {
    public:
    typedef ::taxi::Claim object_type;
    typedef ::taxi::Claim* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Track
  //
  template <>
  struct class_traits< ::taxi::Track >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Track >
  {
    public:
    typedef ::taxi::Track object_type;
    typedef ::taxi::Track* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Shedule
  //
  template <>
  struct class_traits< ::taxi::Shedule >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Shedule >
  {
    public:
    typedef ::taxi::Shedule object_type;
    typedef ::taxi::Shedule* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // DriverBlackList
  //
  template <>
  struct class_traits< ::taxi::DriverBlackList >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::DriverBlackList >
  {
    public:
    typedef ::taxi::DriverBlackList object_type;
    typedef ::taxi::DriverBlackList* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // SheduleStop
  //
  template <>
  struct class_traits< ::taxi::SheduleStop >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::SheduleStop >
  {
    public:
    typedef ::taxi::SheduleStop object_type;
    typedef ::taxi::SheduleStop* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Rate
  //
  template <>
  struct class_traits< ::taxi::Rate >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Rate >
  {
    public:
    typedef ::taxi::Rate object_type;
    typedef ::taxi::Rate* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Notification
  //
  template <>
  struct class_traits< ::taxi::Notification >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Notification >
  {
    public:
    typedef ::taxi::Notification object_type;
    typedef ::taxi::Notification* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // BillAct
  //
  template <>
  struct class_traits< ::taxi::BillAct >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::BillAct >
  {
    public:
    typedef ::taxi::BillAct object_type;
    typedef ::taxi::BillAct* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Payment
  //
  template <>
  struct class_traits< ::taxi::Payment >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::Payment >
  {
    public:
    typedef ::taxi::Payment object_type;
    typedef ::taxi::Payment* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // AutoPayment
  //
  template <>
  struct class_traits< ::taxi::AutoPayment >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::taxi::AutoPayment >
  {
    public:
    typedef ::taxi::AutoPayment object_type;
    typedef ::taxi::AutoPayment* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::taxi::ID id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // City
  //
  template <typename A>
  struct query_columns< ::taxi::City, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // areaid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    areaid_type_;

    static const areaid_type_ areaid;

    // tag
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    tag_type_;

    static const tag_type_ tag;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // notes
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    notes_type_;

    static const notes_type_ notes;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_City__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::City, id_mysql, A >::id_type_
  query_columns< ::taxi::City, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::City, id_mysql, A >::areaid_type_
  query_columns< ::taxi::City, id_mysql, A >::
  areaid (A::table_name, "`areaid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::City, id_mysql, A >::tag_type_
  query_columns< ::taxi::City, id_mysql, A >::
  tag (A::table_name, "`tag`", 0);

  template <typename A>
  const typename query_columns< ::taxi::City, id_mysql, A >::name_type_
  query_columns< ::taxi::City, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::City, id_mysql, A >::notes_type_
  query_columns< ::taxi::City, id_mysql, A >::
  notes (A::table_name, "`notes`", 0);

  template <typename A>
  const typename query_columns< ::taxi::City, id_mysql, A >::isset_type_
  query_columns< ::taxi::City, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::City, id_mysql, A >:
    query_columns< ::taxi::City, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::City, id_mysql >:
    public access::object_traits< ::taxi::City >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // areaid
      //
      long long areaid_value;
      my_bool areaid_null;

      // tag
      //
      int tag_value;
      my_bool tag_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // notes
      //
      details::buffer notes_value;
      unsigned long notes_size;
      my_bool notes_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::City, id_common >:
    public access::object_traits_impl< ::taxi::City, id_mysql >
  {
  };

  // DictEntry
  //
  template <typename A>
  struct query_columns< ::taxi::DictEntry, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // parent
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    parent_type_;

    static const parent_type_ parent;

    // tag
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DictTag::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    tag_type_;

    static const tag_type_ tag;

    // idx
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    idx_type_;

    static const idx_type_ idx;

    // strvalue
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    strvalue_type_;

    static const strvalue_type_ strvalue;

    // intvalue
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::int64_t,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    intvalue_type_;

    static const intvalue_type_ intvalue;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_DictEntry__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::id_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::parent_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  parent (A::table_name, "`parent`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::tag_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  tag (A::table_name, "`tag`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::idx_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  idx (A::table_name, "`idx`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::strvalue_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  strvalue (A::table_name, "`strvalue`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::intvalue_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  intvalue (A::table_name, "`intvalue`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DictEntry, id_mysql, A >::isset_type_
  query_columns< ::taxi::DictEntry, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::DictEntry, id_mysql, A >:
    query_columns< ::taxi::DictEntry, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::DictEntry, id_mysql >:
    public access::object_traits< ::taxi::DictEntry >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // parent
      //
      long long parent_value;
      my_bool parent_null;

      // tag
      //
      unsigned int tag_value;
      my_bool tag_null;

      // idx
      //
      int idx_value;
      my_bool idx_null;

      // strvalue
      //
      details::buffer strvalue_value;
      unsigned long strvalue_size;
      my_bool strvalue_null;

      // intvalue
      //
      long long intvalue_value;
      my_bool intvalue_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::DictEntry, id_common >:
    public access::object_traits_impl< ::taxi::DictEntry, id_mysql >
  {
  };

  // PassengerLimit
  //
  template <>
  class access::composite_value_traits< ::taxi::PassengerLimit, id_mysql >
  {
    public:
    typedef ::taxi::PassengerLimit value_type;

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // tripcount
      //
      int tripcount_value;
      my_bool tripcount_null;

      // minutescount
      //
      int minutescount_value;
      my_bool minutescount_null;

      // moneycount
      //
      int moneycount_value;
      my_bool moneycount_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // Payload
  //
  template <>
  class access::composite_value_traits< ::taxi::Payload, id_mysql >
  {
    public:
    typedef ::taxi::Payload value_type;

    struct image_type
    {
      // passengercount
      //
      int passengercount_value;
      my_bool passengercount_null;

      // baggagecount
      //
      int baggagecount_value;
      my_bool baggagecount_null;

      // baggageweight
      //
      int baggageweight_value;
      my_bool baggageweight_null;

      // baggagewidth
      //
      int baggagewidth_value;
      my_bool baggagewidth_null;

      // baggageheight
      //
      int baggageheight_value;
      my_bool baggageheight_null;

      // papercount
      //
      int papercount_value;
      my_bool papercount_null;

      // stopcount
      //
      int stopcount_value;
      my_bool stopcount_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // PassengerUsage
  //
  template <>
  class access::composite_value_traits< ::taxi::PassengerUsage, id_mysql >
  {
    public:
    typedef ::taxi::PassengerUsage value_type;

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // tripcount
      //
      int tripcount_value;
      my_bool tripcount_null;

      // minutescount
      //
      int minutescount_value;
      my_bool minutescount_null;

      // moneycount
      //
      int moneycount_value;
      my_bool moneycount_null;

      // payload
      //
      composite_value_traits< ::taxi::Payload, id_mysql >::image_type payload_value;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // UserDevice
  //
  template <>
  class access::composite_value_traits< ::taxi::UserDevice, id_mysql >
  {
    public:
    typedef ::taxi::UserDevice value_type;

    struct image_type
    {
      // devicetype
      //
      mysql::value_traits< ::taxi::DeviceType::type, mysql::id_enum >::image_type devicetype_value;
      unsigned long devicetype_size;
      my_bool devicetype_null;

      // isactive
      //
      signed char isactive_value;
      my_bool isactive_null;

      // model
      //
      details::buffer model_value;
      unsigned long model_size;
      my_bool model_null;

      // imei
      //
      details::buffer imei_value;
      unsigned long imei_size;
      my_bool imei_null;

      // line1
      //
      details::buffer line1_value;
      unsigned long line1_size;
      my_bool line1_null;

      // line2
      //
      details::buffer line2_value;
      unsigned long line2_size;
      my_bool line2_null;

      // hasGSMorCDMA
      //
      signed char hasGSMorCDMA_value;
      my_bool hasGSMorCDMA_null;

      // hasGPS
      //
      signed char hasGPS_value;
      my_bool hasGPS_null;

      // isGPS
      //
      signed char isGPS_value;
      my_bool isGPS_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // Credentials
  //
  template <>
  class access::composite_value_traits< ::taxi::Credentials, id_mysql >
  {
    public:
    typedef ::taxi::Credentials value_type;

    struct image_type
    {
      // phone
      //
      details::buffer phone_value;
      unsigned long phone_size;
      my_bool phone_null;

      // personrole
      //
      mysql::value_traits< ::taxi::PersonRole::type, mysql::id_enum >::image_type personrole_value;
      unsigned long personrole_size;
      my_bool personrole_null;

      // token
      //
      details::buffer token_value;
      unsigned long token_size;
      my_bool token_null;

      // password
      //
      details::buffer password_value;
      unsigned long password_size;
      my_bool password_null;

      // islogged
      //
      signed char islogged_value;
      my_bool islogged_null;

      // timelogon
      //
      long long timelogon_value;
      my_bool timelogon_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // Person
  //
  template <>
  class access::composite_value_traits< ::taxi::Person, id_mysql >
  {
    public:
    typedef ::taxi::Person value_type;

    struct image_type
    {
      // credentials
      //
      composite_value_traits< ::taxi::Credentials, id_mysql >::image_type credentials_value;

      // tag
      //
      int tag_value;
      my_bool tag_null;

      // firstname
      //
      details::buffer firstname_value;
      unsigned long firstname_size;
      my_bool firstname_null;

      // lastname
      //
      details::buffer lastname_value;
      unsigned long lastname_size;
      my_bool lastname_null;

      // middlename
      //
      details::buffer middlename_value;
      unsigned long middlename_size;
      my_bool middlename_null;

      // prefix
      //
      details::buffer prefix_value;
      unsigned long prefix_size;
      my_bool prefix_null;

      // birthdate
      //
      long long birthdate_value;
      my_bool birthdate_null;

      // deparment
      //
      details::buffer deparment_value;
      unsigned long deparment_size;
      my_bool deparment_null;

      // position
      //
      details::buffer position_value;
      unsigned long position_size;
      my_bool position_null;

      // note
      //
      details::buffer note_value;
      unsigned long note_size;
      my_bool note_null;

      // phone1
      //
      details::buffer phone1_value;
      unsigned long phone1_size;
      my_bool phone1_null;

      // phone2
      //
      details::buffer phone2_value;
      unsigned long phone2_size;
      my_bool phone2_null;

      // fax
      //
      details::buffer fax_value;
      unsigned long fax_size;
      my_bool fax_null;

      // email
      //
      details::buffer email_value;
      unsigned long email_size;
      my_bool email_null;

      // photo
      //
      details::buffer photo_value;
      unsigned long photo_size;
      my_bool photo_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    // userdevice
    //
    struct userdevice_traits
    {
      typedef ::taxi::UserDevices container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< userdevice_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);
  };

  // Bank
  //
  template <typename A>
  struct query_columns< ::taxi::Bank, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // bik
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    bik_type_;

    static const bik_type_ bik;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Bank__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Bank, id_mysql, A >::id_type_
  query_columns< ::taxi::Bank, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Bank, id_mysql, A >::bik_type_
  query_columns< ::taxi::Bank, id_mysql, A >::
  bik (A::table_name, "`bik`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Bank, id_mysql, A >::name_type_
  query_columns< ::taxi::Bank, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Bank, id_mysql, A >::isset_type_
  query_columns< ::taxi::Bank, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Bank, id_mysql, A >:
    query_columns< ::taxi::Bank, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Bank, id_mysql >:
    public access::object_traits< ::taxi::Bank >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // bik
      //
      details::buffer bik_value;
      unsigned long bik_size;
      my_bool bik_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Bank, id_common >:
    public access::object_traits_impl< ::taxi::Bank, id_mysql >
  {
  };

  // GeoLocation
  //
  template <>
  class access::composite_value_traits< ::taxi::GeoLocation, id_mysql >
  {
    public:
    typedef ::taxi::GeoLocation value_type;

    struct image_type
    {
      // latitude
      //
      double latitude_value;
      my_bool latitude_null;

      // longitude
      //
      double longitude_value;
      my_bool longitude_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // Location
  //
  template <>
  class access::composite_value_traits< ::taxi::Location, id_mysql >
  {
    public:
    typedef ::taxi::Location value_type;

    struct image_type
    {
      // location
      //
      composite_value_traits< ::taxi::GeoLocation, id_mysql >::image_type location_value;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // city
      //
      details::buffer city_value;
      unsigned long city_size;
      my_bool city_null;

      // address
      //
      details::buffer address_value;
      unsigned long address_size;
      my_bool address_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // Org
  //
  template <typename A>
  struct query_columns< ::taxi::Org, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // orgrole
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrgRole::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    orgrole_type_;

    static const orgrole_type_ orgrole;

    // orgtype
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrgType::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    orgtype_type_;

    static const orgtype_type_ orgtype;

    // start
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    start_type_;

    static const start_type_ start;

    // tag
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    tag_type_;

    static const tag_type_ tag;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // fullname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    fullname_type_;

    static const fullname_type_ fullname;

    // shortname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    shortname_type_;

    static const shortname_type_ shortname;

    // inn
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    inn_type_;

    static const inn_type_ inn;

    // kpp
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    kpp_type_;

    static const kpp_type_ kpp;

    // ogrn
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    ogrn_type_;

    static const ogrn_type_ ogrn;

    // phone
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::TEL,
        mysql::id_string >::query_type,
      mysql::id_string >
    phone_type_;

    static const phone_type_ phone;

    // email
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::MAILTO,
        mysql::id_string >::query_type,
      mysql::id_string >
    email_type_;

    static const email_type_ email;

    // currentaccount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    currentaccount_type_;

    static const currentaccount_type_ currentaccount;

    // correspondentaccount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    correspondentaccount_type_;

    static const correspondentaccount_type_ correspondentaccount;

    // description
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    description_type_;

    static const description_type_ description;

    // note
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    note_type_;

    static const note_type_ note;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Org__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::id_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::orgrole_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  orgrole (A::table_name, "`orgrole`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::orgtype_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  orgtype (A::table_name, "`orgtype`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::start_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  start (A::table_name, "`start`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::tag_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  tag (A::table_name, "`tag`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::name_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::fullname_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  fullname (A::table_name, "`fullname`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::shortname_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  shortname (A::table_name, "`shortname`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::inn_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  inn (A::table_name, "`inn`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::kpp_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  kpp (A::table_name, "`kpp`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::ogrn_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  ogrn (A::table_name, "`ogrn`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::phone_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  phone (A::table_name, "`phone`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::email_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  email (A::table_name, "`email`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::currentaccount_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  currentaccount (A::table_name, "`currentaccount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::correspondentaccount_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  correspondentaccount (A::table_name, "`correspondentaccount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::description_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  description (A::table_name, "`description`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::note_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  note (A::table_name, "`note`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Org, id_mysql, A >::isset_type_
  query_columns< ::taxi::Org, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Org, id_mysql, A >:
    query_columns< ::taxi::Org, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Org, id_mysql >:
    public access::object_traits< ::taxi::Org >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // orgrole
      //
      mysql::value_traits< ::taxi::OrgRole::type, mysql::id_enum >::image_type orgrole_value;
      unsigned long orgrole_size;
      my_bool orgrole_null;

      // orgtype
      //
      unsigned int orgtype_value;
      my_bool orgtype_null;

      // start
      //
      long long start_value;
      my_bool start_null;

      // tag
      //
      int tag_value;
      my_bool tag_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // fullname
      //
      details::buffer fullname_value;
      unsigned long fullname_size;
      my_bool fullname_null;

      // shortname
      //
      details::buffer shortname_value;
      unsigned long shortname_size;
      my_bool shortname_null;

      // inn
      //
      details::buffer inn_value;
      unsigned long inn_size;
      my_bool inn_null;

      // kpp
      //
      details::buffer kpp_value;
      unsigned long kpp_size;
      my_bool kpp_null;

      // ogrn
      //
      details::buffer ogrn_value;
      unsigned long ogrn_size;
      my_bool ogrn_null;

      // phone
      //
      details::buffer phone_value;
      unsigned long phone_size;
      my_bool phone_null;

      // email
      //
      details::buffer email_value;
      unsigned long email_size;
      my_bool email_null;

      // currentaccount
      //
      details::buffer currentaccount_value;
      unsigned long currentaccount_size;
      my_bool currentaccount_null;

      // correspondentaccount
      //
      details::buffer correspondentaccount_value;
      unsigned long correspondentaccount_size;
      my_bool correspondentaccount_null;

      // description
      //
      details::buffer description_value;
      unsigned long description_size;
      my_bool description_null;

      // note
      //
      details::buffer note_value;
      unsigned long note_size;
      my_bool note_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // orgaddress
    //
    struct orgaddress_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgAddress container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< orgaddress_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        details::buffer value_value;
        unsigned long value_size;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // employee
    //
    struct employee_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 24UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgPositionPerson container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< employee_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // bank
    //
    struct bank_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgBank container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< bank_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // orglocation
    //
    struct orglocation_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 9UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgLocation container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< orglocation_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 18UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Org, id_common >:
    public access::object_traits_impl< ::taxi::Org, id_mysql >
  {
  };

  // OrgService
  //
  template <typename A>
  struct query_columns< ::taxi::OrgService, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_OrgService__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::OrgService, id_mysql, A >::id_type_
  query_columns< ::taxi::OrgService, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::OrgService, id_mysql, A >::name_type_
  query_columns< ::taxi::OrgService, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::OrgService, id_mysql, A >::isset_type_
  query_columns< ::taxi::OrgService, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::OrgService, id_mysql, A >:
    query_columns< ::taxi::OrgService, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::OrgService, id_mysql >:
    public access::object_traits< ::taxi::OrgService >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // organization
    //
    struct organization_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgServiceDepts container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< organization_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // orglocation
    //
    struct orglocation_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 9UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgLocation container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< orglocation_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::OrgService, id_common >:
    public access::object_traits_impl< ::taxi::OrgService, id_mysql >
  {
  };

  // Customer
  //
  template <typename A>
  struct query_columns< ::taxi::Customer, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // cityid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    cityid_type_;

    static const cityid_type_ cityid;

    // nickname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    nickname_type_;

    static const nickname_type_ nickname;

    // tag
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::TAG,
        mysql::id_long >::query_type,
      mysql::id_long >
    tag_type_;

    static const tag_type_ tag;

    // taxtype
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::TaxType::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    taxtype_type_;

    static const taxtype_type_ taxtype;

    // active
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    active_type_;

    static const active_type_ active;

    // enabled
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    enabled_type_;

    static const enabled_type_ enabled;

    // haspreferreddriver
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    haspreferreddriver_type_;

    static const haspreferreddriver_type_ haspreferreddriver;

    // preferreddriverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    preferreddriverid_type_;

    static const preferreddriverid_type_ preferreddriverid;

    // hascredit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    hascredit_type_;

    static const hascredit_type_ hascredit;

    // hascreditlimit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    hascreditlimit_type_;

    static const hascreditlimit_type_ hascreditlimit;

    // creditlimit
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    creditlimit_type_;

    static const creditlimit_type_ creditlimit;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Customer__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::id_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::cityid_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  cityid (A::table_name, "`cityid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::nickname_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  nickname (A::table_name, "`nickname`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::tag_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  tag (A::table_name, "`tag`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::taxtype_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  taxtype (A::table_name, "`taxtype`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::active_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  active (A::table_name, "`active`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::enabled_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  enabled (A::table_name, "`enabled`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::haspreferreddriver_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  haspreferreddriver (A::table_name, "`haspreferreddriver`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::preferreddriverid_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  preferreddriverid (A::table_name, "`preferreddriverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::hascredit_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  hascredit (A::table_name, "`hascredit`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::hascreditlimit_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  hascreditlimit (A::table_name, "`hascreditlimit`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::creditlimit_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  creditlimit (A::table_name, "`creditlimit`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Customer, id_mysql, A >::isset_type_
  query_columns< ::taxi::Customer, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Customer, id_mysql, A >:
    query_columns< ::taxi::Customer, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Customer, id_mysql >:
    public access::object_traits< ::taxi::Customer >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // cityid
      //
      long long cityid_value;
      my_bool cityid_null;

      // nickname
      //
      details::buffer nickname_value;
      unsigned long nickname_size;
      my_bool nickname_null;

      // tag
      //
      int tag_value;
      my_bool tag_null;

      // taxtype
      //
      unsigned int taxtype_value;
      my_bool taxtype_null;

      // active
      //
      signed char active_value;
      my_bool active_null;

      // enabled
      //
      signed char enabled_value;
      my_bool enabled_null;

      // haspreferreddriver
      //
      signed char haspreferreddriver_value;
      my_bool haspreferreddriver_null;

      // preferreddriverid
      //
      long long preferreddriverid_value;
      my_bool preferreddriverid_null;

      // hascredit
      //
      signed char hascredit_value;
      my_bool hascredit_null;

      // hascreditlimit
      //
      signed char hascreditlimit_value;
      my_bool hascreditlimit_null;

      // creditlimit
      //
      double creditlimit_value;
      my_bool creditlimit_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // organization
    //
    struct organization_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgServiceDepts container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< organization_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Customer, id_common >:
    public access::object_traits_impl< ::taxi::Customer, id_mysql >
  {
  };

  // Passenger
  //
  template <typename A>
  struct query_columns< ::taxi::Passenger, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // cityid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    cityid_type_;

    static const cityid_type_ cityid;

    // customerid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    customerid_type_;

    static const customerid_type_ customerid;

    // tag
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    tag_type_;

    static const tag_type_ tag;

    // isoperator
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    isoperator_type_;

    static const isoperator_type_ isoperator;

    // isvip
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    isvip_type_;

    static const isvip_type_ isvip;

    // status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::EmployeeStatus::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    status_type_;

    static const status_type_ status;

    // personid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Personid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    personid_type_;

    static const personid_type_ personid;

    // canorder
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CanOrder::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    canorder_type_;

    static const canorder_type_ canorder;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Passenger__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::id_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::cityid_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  cityid (A::table_name, "`cityid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::customerid_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  customerid (A::table_name, "`customerid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::tag_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  tag (A::table_name, "`tag`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::isoperator_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  isoperator (A::table_name, "`isoperator`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::isvip_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  isvip (A::table_name, "`isvip`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::status_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  status (A::table_name, "`status`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::personid_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  personid (A::table_name, "`personid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::canorder_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  canorder (A::table_name, "`canorder`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Passenger, id_mysql, A >::isset_type_
  query_columns< ::taxi::Passenger, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Passenger, id_mysql, A >:
    query_columns< ::taxi::Passenger, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Passenger, id_mysql >:
    public access::object_traits< ::taxi::Passenger >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // cityid
      //
      long long cityid_value;
      my_bool cityid_null;

      // customerid
      //
      long long customerid_value;
      my_bool customerid_null;

      // tag
      //
      int tag_value;
      my_bool tag_null;

      // isoperator
      //
      signed char isoperator_value;
      my_bool isoperator_null;

      // isvip
      //
      signed char isvip_value;
      my_bool isvip_null;

      // status
      //
      unsigned int status_value;
      my_bool status_null;

      // personid
      //
      long long personid_value;
      my_bool personid_null;

      // canorder
      //
      unsigned int canorder_value;
      my_bool canorder_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // passengerlimitmonth
    //
    struct passengerlimitmonth_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 7UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::PassengerLimitMonth container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< passengerlimitmonth_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // passengerusagemonth
    //
    struct passengerusagemonth_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 15UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::PassengerUsageMonth container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< passengerusagemonth_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 10UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Passenger, id_common >:
    public access::object_traits_impl< ::taxi::Passenger, id_mysql >
  {
  };

  // Vehicle
  //
  template <typename A>
  struct query_columns< ::taxi::Vehicle, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // vehicletype
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::VehicleType::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    vehicletype_type_;

    static const vehicletype_type_ vehicletype;

    // vehiclecategory
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::VehicleCategory::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    vehiclecategory_type_;

    static const vehiclecategory_type_ vehiclecategory;

    // vehicleclass
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::VehicleClass::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    vehicleclass_type_;

    static const vehicleclass_type_ vehicleclass;

    // vehiclestatus
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::VehicleStatus::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    vehiclestatus_type_;

    static const vehiclestatus_type_ vehiclestatus;

    // vehiclebrandid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    vehiclebrandid_type_;

    static const vehiclebrandid_type_ vehiclebrandid;

    // vehiclemodel
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    vehiclemodel_type_;

    static const vehiclemodel_type_ vehiclemodel;

    // color
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    color_type_;

    static const color_type_ color;

    // year
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    year_type_;

    static const year_type_ year;

    // plate
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    plate_type_;

    static const plate_type_ plate;

    // platenumber
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    platenumber_type_;

    static const platenumber_type_ platenumber;

    // technicalcondition
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    technicalcondition_type_;

    static const technicalcondition_type_ technicalcondition;

    // passengercount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    passengercount_type_;

    static const passengercount_type_ passengercount;

    // childseat
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    childseat_type_;

    static const childseat_type_ childseat;

    // checkers
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    checkers_type_;

    static const checkers_type_ checkers;

    // stickers
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    stickers_type_;

    static const stickers_type_ stickers;

    // lantern
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    lantern_type_;

    static const lantern_type_ lantern;

    // photo
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::LINK,
        mysql::id_string >::query_type,
      mysql::id_string >
    photo_type_;

    static const photo_type_ photo;

    // vin
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    vin_type_;

    static const vin_type_ vin;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Vehicle__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::id_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vehicletype_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vehicletype (A::table_name, "`vehicletype`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vehiclecategory_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vehiclecategory (A::table_name, "`vehiclecategory`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vehicleclass_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vehicleclass (A::table_name, "`vehicleclass`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vehiclestatus_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vehiclestatus (A::table_name, "`vehiclestatus`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vehiclebrandid_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vehiclebrandid (A::table_name, "`vehiclebrandid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vehiclemodel_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vehiclemodel (A::table_name, "`vehiclemodel`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::color_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  color (A::table_name, "`color`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::year_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  year (A::table_name, "`year`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::plate_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  plate (A::table_name, "`plate`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::platenumber_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  platenumber (A::table_name, "`platenumber`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::technicalcondition_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  technicalcondition (A::table_name, "`technicalcondition`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::passengercount_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  passengercount (A::table_name, "`passengercount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::childseat_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  childseat (A::table_name, "`childseat`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::checkers_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  checkers (A::table_name, "`checkers`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::stickers_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  stickers (A::table_name, "`stickers`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::lantern_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  lantern (A::table_name, "`lantern`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::photo_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  photo (A::table_name, "`photo`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::vin_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  vin (A::table_name, "`vin`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Vehicle, id_mysql, A >::isset_type_
  query_columns< ::taxi::Vehicle, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Vehicle, id_mysql, A >:
    query_columns< ::taxi::Vehicle, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Vehicle, id_mysql >:
    public access::object_traits< ::taxi::Vehicle >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // vehicletype
      //
      unsigned int vehicletype_value;
      my_bool vehicletype_null;

      // vehiclecategory
      //
      unsigned int vehiclecategory_value;
      my_bool vehiclecategory_null;

      // vehicleclass
      //
      unsigned int vehicleclass_value;
      my_bool vehicleclass_null;

      // vehiclestatus
      //
      unsigned int vehiclestatus_value;
      my_bool vehiclestatus_null;

      // vehiclebrandid
      //
      long long vehiclebrandid_value;
      my_bool vehiclebrandid_null;

      // vehiclemodel
      //
      long long vehiclemodel_value;
      my_bool vehiclemodel_null;

      // color
      //
      long long color_value;
      my_bool color_null;

      // year
      //
      int year_value;
      my_bool year_null;

      // plate
      //
      details::buffer plate_value;
      unsigned long plate_size;
      my_bool plate_null;

      // platenumber
      //
      int platenumber_value;
      my_bool platenumber_null;

      // technicalcondition
      //
      details::buffer technicalcondition_value;
      unsigned long technicalcondition_size;
      my_bool technicalcondition_null;

      // passengercount
      //
      int passengercount_value;
      my_bool passengercount_null;

      // childseat
      //
      signed char childseat_value;
      my_bool childseat_null;

      // checkers
      //
      signed char checkers_value;
      my_bool checkers_null;

      // stickers
      //
      signed char stickers_value;
      my_bool stickers_null;

      // lantern
      //
      signed char lantern_value;
      my_bool lantern_null;

      // photo
      //
      details::buffer photo_value;
      unsigned long photo_size;
      my_bool photo_null;

      // vin
      //
      details::buffer vin_value;
      unsigned long vin_size;
      my_bool vin_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 20UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Vehicle, id_common >:
    public access::object_traits_impl< ::taxi::Vehicle, id_mysql >
  {
  };

  // Document
  //
  template <typename A>
  struct query_columns< ::taxi::Document, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // ser
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    ser_type_;

    static const ser_type_ ser;

    // number
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    number_type_;

    static const number_type_ number;

    // issuer
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    issuer_type_;

    static const issuer_type_ issuer;

    // issued
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    issued_type_;

    static const issued_type_ issued;

    // validity
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    validity_type_;

    static const validity_type_ validity;

    // category
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    category_type_;

    static const category_type_ category;

    // expirience
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    expirience_type_;

    static const expirience_type_ expirience;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Document__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::id_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::ser_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  ser (A::table_name, "`ser`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::number_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  number (A::table_name, "`number`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::issuer_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  issuer (A::table_name, "`issuer`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::issued_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  issued (A::table_name, "`issued`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::validity_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  validity (A::table_name, "`validity`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::category_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  category (A::table_name, "`category`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::expirience_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  expirience (A::table_name, "`expirience`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Document, id_mysql, A >::isset_type_
  query_columns< ::taxi::Document, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Document, id_mysql, A >:
    query_columns< ::taxi::Document, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Document, id_mysql >:
    public access::object_traits< ::taxi::Document >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // ser
      //
      details::buffer ser_value;
      unsigned long ser_size;
      my_bool ser_null;

      // number
      //
      details::buffer number_value;
      unsigned long number_size;
      my_bool number_null;

      // issuer
      //
      details::buffer issuer_value;
      unsigned long issuer_size;
      my_bool issuer_null;

      // issued
      //
      long long issued_value;
      my_bool issued_null;

      // validity
      //
      long long validity_value;
      my_bool validity_null;

      // category
      //
      details::buffer category_value;
      unsigned long category_size;
      my_bool category_null;

      // expirience
      //
      int expirience_value;
      my_bool expirience_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Document, id_common >:
    public access::object_traits_impl< ::taxi::Document, id_mysql >
  {
  };

  // Driver
  //
  template <typename A>
  struct query_columns< ::taxi::Driver, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // cityid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    cityid_type_;

    static const cityid_type_ cityid;

    // status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::EmployeeStatus::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    status_type_;

    static const status_type_ status;

    // nickname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    nickname_type_;

    static const nickname_type_ nickname;

    // callsign
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    callsign_type_;

    static const callsign_type_ callsign;

    // cabclass
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CabClass::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    cabclass_type_;

    static const cabclass_type_ cabclass;

    // rating
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    rating_type_;

    static const rating_type_ rating;

    // online
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    online_type_;

    static const online_type_ online;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Driver__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::id_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::cityid_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  cityid (A::table_name, "`cityid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::status_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  status (A::table_name, "`status`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::nickname_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  nickname (A::table_name, "`nickname`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::callsign_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  callsign (A::table_name, "`callsign`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::cabclass_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  cabclass (A::table_name, "`cabclass`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::rating_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  rating (A::table_name, "`rating`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::online_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  online (A::table_name, "`online`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Driver, id_mysql, A >::isset_type_
  query_columns< ::taxi::Driver, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Driver, id_mysql, A >:
    query_columns< ::taxi::Driver, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Driver, id_mysql >:
    public access::object_traits< ::taxi::Driver >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // cityid
      //
      long long cityid_value;
      my_bool cityid_null;

      // status
      //
      unsigned int status_value;
      my_bool status_null;

      // nickname
      //
      details::buffer nickname_value;
      unsigned long nickname_size;
      my_bool nickname_null;

      // callsign
      //
      int callsign_value;
      my_bool callsign_null;

      // cabclass
      //
      unsigned int cabclass_value;
      my_bool cabclass_null;

      // rating
      //
      int rating_value;
      my_bool rating_null;

      // online
      //
      signed char online_value;
      my_bool online_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // svc
    //
    struct svc_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::RoleOrgService container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< svc_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // person
    //
    struct person_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 24UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgPositionPerson container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< person_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // license
    //
    struct license_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::DocumentMap container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< license_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        unsigned int key_value;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // vehicleids
    //
    struct vehicleids_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::Vehicleids container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< vehicleids_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Driver, id_common >:
    public access::object_traits_impl< ::taxi::Driver, id_mysql >
  {
  };

  // Dispatcher
  //
  template <typename A>
  struct query_columns< ::taxi::Dispatcher, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::EmployeeStatus::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    status_type_;

    static const status_type_ status;

    // nickname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    nickname_type_;

    static const nickname_type_ nickname;

    // online
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    online_type_;

    static const online_type_ online;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Dispatcher__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Dispatcher, id_mysql, A >::id_type_
  query_columns< ::taxi::Dispatcher, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Dispatcher, id_mysql, A >::status_type_
  query_columns< ::taxi::Dispatcher, id_mysql, A >::
  status (A::table_name, "`status`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Dispatcher, id_mysql, A >::nickname_type_
  query_columns< ::taxi::Dispatcher, id_mysql, A >::
  nickname (A::table_name, "`nickname`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Dispatcher, id_mysql, A >::online_type_
  query_columns< ::taxi::Dispatcher, id_mysql, A >::
  online (A::table_name, "`online`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Dispatcher, id_mysql, A >::isset_type_
  query_columns< ::taxi::Dispatcher, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Dispatcher, id_mysql, A >:
    query_columns< ::taxi::Dispatcher, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Dispatcher, id_mysql >:
    public access::object_traits< ::taxi::Dispatcher >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // status
      //
      unsigned int status_value;
      my_bool status_null;

      // nickname
      //
      details::buffer nickname_value;
      unsigned long nickname_size;
      my_bool nickname_null;

      // online
      //
      signed char online_value;
      my_bool online_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // svc
    //
    struct svc_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::RoleOrgService container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< svc_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // person
    //
    struct person_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 24UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrgPositionPerson container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< person_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // license
    //
    struct license_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::DocumentMap container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< license_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        unsigned int key_value;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Dispatcher, id_common >:
    public access::object_traits_impl< ::taxi::Dispatcher, id_mysql >
  {
  };

  // ServiceOrderStop
  //
  template <typename A>
  struct query_columns< ::taxi::ServiceOrderStop, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // serviceorderid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Serviceorderid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    serviceorderid_type_;

    static const serviceorderid_type_ serviceorderid;

    // stopno
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    stopno_type_;

    static const stopno_type_ stopno;

    // stoptype
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::StopType::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    stoptype_type_;

    static const stoptype_type_ stoptype;

    // payload
    //
    struct payload_type_
    {
      payload_type_ ()
      {
      }

      // passengercount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      passengercount_type_;

      static const passengercount_type_ passengercount;

      // baggagecount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggagecount_type_;

      static const baggagecount_type_ baggagecount;

      // baggageweight
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggageweight_type_;

      static const baggageweight_type_ baggageweight;

      // baggagewidth
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggagewidth_type_;

      static const baggagewidth_type_ baggagewidth;

      // baggageheight
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggageheight_type_;

      static const baggageheight_type_ baggageheight;

      // papercount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      papercount_type_;

      static const papercount_type_ papercount;

      // stopcount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      stopcount_type_;

      static const stopcount_type_ stopcount;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Payload__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const payload_type_ payload;

    // stage
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrderStage::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    stage_type_;

    static const stage_type_ stage;

    // created
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    created_type_;

    static const created_type_ created;

    // assigned
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    assigned_type_;

    static const assigned_type_ assigned;

    // started
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    started_type_;

    static const started_type_ started;

    // arrived
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    arrived_type_;

    static const arrived_type_ arrived;

    // finished
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    finished_type_;

    static const finished_type_ finished;

    // notes
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    notes_type_;

    static const notes_type_ notes;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_ServiceOrderStop__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::id_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::serviceorderid_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  serviceorderid (A::table_name, "`serviceorderid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::stopno_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  stopno (A::table_name, "`stopno`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::stoptype_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  stoptype (A::table_name, "`stoptype`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::passengercount_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  passengercount (A::table_name, "`payload_passengercount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::baggagecount_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  baggagecount (A::table_name, "`payload_baggagecount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::baggageweight_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  baggageweight (A::table_name, "`payload_baggageweight`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::baggagewidth_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  baggagewidth (A::table_name, "`payload_baggagewidth`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::baggageheight_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  baggageheight (A::table_name, "`payload_baggageheight`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::papercount_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  papercount (A::table_name, "`payload_papercount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::stopcount_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  stopcount (A::table_name, "`payload_stopcount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::isset_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_::
  isset (A::table_name, "`payload_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::payload;

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::stage_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  stage (A::table_name, "`stage`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::created_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  created (A::table_name, "`created`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::assigned_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  assigned (A::table_name, "`assigned`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::started_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  started (A::table_name, "`started`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::arrived_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  arrived (A::table_name, "`arrived`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::finished_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  finished (A::table_name, "`finished`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::notes_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  notes (A::table_name, "`notes`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::isset_type_
  query_columns< ::taxi::ServiceOrderStop, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::ServiceOrderStop, id_mysql, A >:
    query_columns< ::taxi::ServiceOrderStop, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::ServiceOrderStop, id_mysql >:
    public access::object_traits< ::taxi::ServiceOrderStop >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // serviceorderid
      //
      long long serviceorderid_value;
      my_bool serviceorderid_null;

      // stopno
      //
      int stopno_value;
      my_bool stopno_null;

      // stoptype
      //
      unsigned int stoptype_value;
      my_bool stoptype_null;

      // payload
      //
      composite_value_traits< ::taxi::Payload, id_mysql >::image_type payload_value;

      // stage
      //
      unsigned int stage_value;
      my_bool stage_null;

      // created
      //
      long long created_value;
      my_bool created_null;

      // assigned
      //
      long long assigned_value;
      my_bool assigned_null;

      // started
      //
      long long started_value;
      my_bool started_null;

      // arrived
      //
      long long arrived_value;
      my_bool arrived_null;

      // finished
      //
      long long finished_value;
      my_bool finished_null;

      // notes
      //
      details::buffer notes_value;
      unsigned long notes_size;
      my_bool notes_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // pickuppersons
    //
    struct pickuppersons_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 24UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrderStopPersons container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< pickuppersons_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        composite_value_traits< value_type, id_mysql >::image_type value_value;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 20UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::ServiceOrderStop, id_common >:
    public access::object_traits_impl< ::taxi::ServiceOrderStop, id_mysql >
  {
  };

  // ServiceOrder
  //
  template <typename A>
  struct query_columns< ::taxi::ServiceOrder, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // cityid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    cityid_type_;

    static const cityid_type_ cityid;

    // tag
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    tag_type_;

    static const tag_type_ tag;

    // ordertype
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrderType::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    ordertype_type_;

    static const ordertype_type_ ordertype;

    // ordertimetype
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrderTimeType::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    ordertimetype_type_;

    static const ordertimetype_type_ ordertimetype;

    // dispatcherid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    dispatcherid_type_;

    static const dispatcherid_type_ dispatcherid;

    // initator
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Personid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    initator_type_;

    static const initator_type_ initator;

    // payload
    //
    struct payload_type_
    {
      payload_type_ ()
      {
      }

      // passengercount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      passengercount_type_;

      static const passengercount_type_ passengercount;

      // baggagecount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggagecount_type_;

      static const baggagecount_type_ baggagecount;

      // baggageweight
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggageweight_type_;

      static const baggageweight_type_ baggageweight;

      // baggagewidth
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggagewidth_type_;

      static const baggagewidth_type_ baggagewidth;

      // baggageheight
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      baggageheight_type_;

      static const baggageheight_type_ baggageheight;

      // papercount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      papercount_type_;

      static const papercount_type_ papercount;

      // stopcount
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::NUMBER32,
          mysql::id_long >::query_type,
        mysql::id_long >
      stopcount_type_;

      static const stopcount_type_ stopcount;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Payload__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const payload_type_ payload;

    // stage
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrderStage::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    stage_type_;

    static const stage_type_ stage;

    // created
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    created_type_;

    static const created_type_ created;

    // sheduletime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    sheduletime_type_;

    static const sheduletime_type_ sheduletime;

    // assigned
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    assigned_type_;

    static const assigned_type_ assigned;

    // started
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    started_type_;

    static const started_type_ started;

    // arrived
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    arrived_type_;

    static const arrived_type_ arrived;

    // finished
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    finished_type_;

    static const finished_type_ finished;

    // locstart
    //
    struct locstart_type_
    {
      locstart_type_ ()
      {
      }

      // location
      //
      struct location_type_
      {
        location_type_ ()
        {
        }

        // latitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        latitude_type_;

        static const latitude_type_ latitude;

        // longitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        longitude_type_;

        static const longitude_type_ longitude;

        // isset
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::_GeoLocation__isset,
            mysql::id_blob >::query_type,
          mysql::id_blob >
        isset_type_;

        static const isset_type_ isset;
      };

      static const location_type_ location;

      // name
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      name_type_;

      static const name_type_ name;

      // city
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      city_type_;

      static const city_type_ city;

      // address
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      address_type_;

      static const address_type_ address;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Location__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const locstart_type_ locstart;

    // locfinish
    //
    struct locfinish_type_
    {
      locfinish_type_ ()
      {
      }

      // location
      //
      struct location_type_
      {
        location_type_ ()
        {
        }

        // latitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        latitude_type_;

        static const latitude_type_ latitude;

        // longitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        longitude_type_;

        static const longitude_type_ longitude;

        // isset
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::_GeoLocation__isset,
            mysql::id_blob >::query_type,
          mysql::id_blob >
        isset_type_;

        static const isset_type_ isset;
      };

      static const location_type_ location;

      // name
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      name_type_;

      static const name_type_ name;

      // city
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      city_type_;

      static const city_type_ city;

      // address
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      address_type_;

      static const address_type_ address;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Location__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const locfinish_type_ locfinish;

    // totaltimefiscal
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    totaltimefiscal_type_;

    static const totaltimefiscal_type_ totaltimefiscal;

    // totaltimeactual
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    totaltimeactual_type_;

    static const totaltimeactual_type_ totaltimeactual;

    // sumfiscal
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    sumfiscal_type_;

    static const sumfiscal_type_ sumfiscal;

    // sumactual
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    sumactual_type_;

    static const sumactual_type_ sumactual;

    // cabclass
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CabClass::type,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    cabclass_type_;

    static const cabclass_type_ cabclass;

    // paymentstate
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::PaymentState::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    paymentstate_type_;

    static const paymentstate_type_ paymentstate;

    // claimstate
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ClaimState::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    claimstate_type_;

    static const claimstate_type_ claimstate;

    // hasstops
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    hasstops_type_;

    static const hasstops_type_ hasstops;

    // notes
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    notes_type_;

    static const notes_type_ notes;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_ServiceOrder__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::id_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::cityid_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  cityid (A::table_name, "`cityid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::tag_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  tag (A::table_name, "`tag`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::ordertype_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  ordertype (A::table_name, "`ordertype`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::ordertimetype_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  ordertimetype (A::table_name, "`ordertimetype`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::dispatcherid_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  dispatcherid (A::table_name, "`dispatcherid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::initator_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  initator (A::table_name, "`initator`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::passengercount_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  passengercount (A::table_name, "`payload_passengercount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::baggagecount_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  baggagecount (A::table_name, "`payload_baggagecount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::baggageweight_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  baggageweight (A::table_name, "`payload_baggageweight`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::baggagewidth_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  baggagewidth (A::table_name, "`payload_baggagewidth`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::baggageheight_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  baggageheight (A::table_name, "`payload_baggageheight`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::papercount_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  papercount (A::table_name, "`payload_papercount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::stopcount_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  stopcount (A::table_name, "`payload_stopcount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::isset_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_::
  isset (A::table_name, "`payload_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::payload;

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::stage_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  stage (A::table_name, "`stage`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::created_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  created (A::table_name, "`created`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::sheduletime_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  sheduletime (A::table_name, "`sheduletime`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::assigned_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  assigned (A::table_name, "`assigned`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::started_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  started (A::table_name, "`started`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::arrived_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  arrived (A::table_name, "`arrived`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::finished_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  finished (A::table_name, "`finished`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_::latitude_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_::
  latitude (A::table_name, "`locstart_location_latitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_::longitude_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_::
  longitude (A::table_name, "`locstart_location_longitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_::isset_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_::
  isset (A::table_name, "`locstart_location_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::location;

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::name_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::
  name (A::table_name, "`locstart_name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::city_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::
  city (A::table_name, "`locstart_city`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::address_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::
  address (A::table_name, "`locstart_address`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::isset_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_::
  isset (A::table_name, "`locstart_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locstart;

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_::latitude_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_::
  latitude (A::table_name, "`locfinish_location_latitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_::longitude_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_::
  longitude (A::table_name, "`locfinish_location_longitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_::isset_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_::
  isset (A::table_name, "`locfinish_location_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::location;

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::name_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::
  name (A::table_name, "`locfinish_name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::city_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::
  city (A::table_name, "`locfinish_city`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::address_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::
  address (A::table_name, "`locfinish_address`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::isset_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_::
  isset (A::table_name, "`locfinish_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::locfinish;

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::totaltimefiscal_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  totaltimefiscal (A::table_name, "`totaltimefiscal`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::totaltimeactual_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  totaltimeactual (A::table_name, "`totaltimeactual`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::sumfiscal_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  sumfiscal (A::table_name, "`sumfiscal`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::sumactual_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  sumactual (A::table_name, "`sumactual`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::cabclass_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  cabclass (A::table_name, "`cabclass`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::paymentstate_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  paymentstate (A::table_name, "`paymentstate`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::claimstate_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  claimstate (A::table_name, "`claimstate`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::hasstops_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  hasstops (A::table_name, "`hasstops`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::notes_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  notes (A::table_name, "`notes`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrder, id_mysql, A >::isset_type_
  query_columns< ::taxi::ServiceOrder, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::ServiceOrder, id_mysql, A >:
    query_columns< ::taxi::ServiceOrder, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::ServiceOrder, id_mysql >:
    public access::object_traits< ::taxi::ServiceOrder >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // cityid
      //
      long long cityid_value;
      my_bool cityid_null;

      // tag
      //
      int tag_value;
      my_bool tag_null;

      // ordertype
      //
      unsigned int ordertype_value;
      my_bool ordertype_null;

      // ordertimetype
      //
      unsigned int ordertimetype_value;
      my_bool ordertimetype_null;

      // dispatcherid
      //
      long long dispatcherid_value;
      my_bool dispatcherid_null;

      // initator
      //
      long long initator_value;
      my_bool initator_null;

      // payload
      //
      composite_value_traits< ::taxi::Payload, id_mysql >::image_type payload_value;

      // stage
      //
      unsigned int stage_value;
      my_bool stage_null;

      // created
      //
      long long created_value;
      my_bool created_null;

      // sheduletime
      //
      long long sheduletime_value;
      my_bool sheduletime_null;

      // assigned
      //
      long long assigned_value;
      my_bool assigned_null;

      // started
      //
      long long started_value;
      my_bool started_null;

      // arrived
      //
      long long arrived_value;
      my_bool arrived_null;

      // finished
      //
      long long finished_value;
      my_bool finished_null;

      // locstart
      //
      composite_value_traits< ::taxi::Location, id_mysql >::image_type locstart_value;

      // locfinish
      //
      composite_value_traits< ::taxi::Location, id_mysql >::image_type locfinish_value;

      // totaltimefiscal
      //
      int totaltimefiscal_value;
      my_bool totaltimefiscal_null;

      // totaltimeactual
      //
      int totaltimeactual_value;
      my_bool totaltimeactual_null;

      // sumfiscal
      //
      double sumfiscal_value;
      my_bool sumfiscal_null;

      // sumactual
      //
      double sumactual_value;
      my_bool sumactual_null;

      // cabclass
      //
      unsigned int cabclass_value;
      my_bool cabclass_null;

      // paymentstate
      //
      mysql::value_traits< ::taxi::PaymentState::type, mysql::id_enum >::image_type paymentstate_value;
      unsigned long paymentstate_size;
      my_bool paymentstate_null;

      // claimstate
      //
      mysql::value_traits< ::taxi::ClaimState::type, mysql::id_enum >::image_type claimstate_value;
      unsigned long claimstate_size;
      my_bool claimstate_null;

      // hasstops
      //
      signed char hasstops_value;
      my_bool hasstops_null;

      // notes
      //
      details::buffer notes_value;
      unsigned long notes_size;
      my_bool notes_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // orderfeatures
    //
    struct orderfeatures_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::OrderFeatures container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::value_type value_type;

      typedef set_functions<value_type> functions_type;
      typedef mysql::container_statements< orderfeatures_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        unsigned int value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const value_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const value_type&, void*);

      static bool
      select (value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // svc
    //
    struct svc_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::RoleOrgService container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< svc_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // passengers
    //
    struct passengers_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::Passengerids container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< passengers_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // stops
    //
    struct stops_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::ServiceOrderStopids container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< stops_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // crew
    //
    struct crew_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::Crew container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< crew_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 46UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::ServiceOrder, id_common >:
    public access::object_traits_impl< ::taxi::ServiceOrder, id_mysql >
  {
  };

  // ServiceOrderDecline
  //
  template <typename A>
  struct query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // serviceorderid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Serviceorderid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    serviceorderid_type_;

    static const serviceorderid_type_ serviceorderid;

    // declinetime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    declinetime_type_;

    static const declinetime_type_ declinetime;

    // driverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Driverid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    driverid_type_;

    static const driverid_type_ driverid;

    // cause
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DeclineOrderCause::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    cause_type_;

    static const cause_type_ cause;

    // notes
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    notes_type_;

    static const notes_type_ notes;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_ServiceOrderDecline__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::id_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::serviceorderid_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  serviceorderid (A::table_name, "`serviceorderid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::declinetime_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  declinetime (A::table_name, "`declinetime`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::driverid_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  driverid (A::table_name, "`driverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::cause_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  cause (A::table_name, "`cause`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::notes_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  notes (A::table_name, "`notes`", 0);

  template <typename A>
  const typename query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::isset_type_
  query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >:
    query_columns< ::taxi::ServiceOrderDecline, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::ServiceOrderDecline, id_mysql >:
    public access::object_traits< ::taxi::ServiceOrderDecline >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // serviceorderid
      //
      long long serviceorderid_value;
      my_bool serviceorderid_null;

      // declinetime
      //
      long long declinetime_value;
      my_bool declinetime_null;

      // driverid
      //
      long long driverid_value;
      my_bool driverid_null;

      // cause
      //
      mysql::value_traits< ::taxi::DeclineOrderCause::type, mysql::id_enum >::image_type cause_value;
      unsigned long cause_size;
      my_bool cause_null;

      // notes
      //
      details::buffer notes_value;
      unsigned long notes_size;
      my_bool notes_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::ServiceOrderDecline, id_common >:
    public access::object_traits_impl< ::taxi::ServiceOrderDecline, id_mysql >
  {
  };

  // Claim
  //
  template <typename A>
  struct query_columns< ::taxi::Claim, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // serviceorderid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Serviceorderid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    serviceorderid_type_;

    static const serviceorderid_type_ serviceorderid;

    // personrole
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::PersonRole::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    personrole_type_;

    static const personrole_type_ personrole;

    // driverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Driverid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    driverid_type_;

    static const driverid_type_ driverid;

    // claimtime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    claimtime_type_;

    static const claimtime_type_ claimtime;

    // notes
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    notes_type_;

    static const notes_type_ notes;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Claim__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::id_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::serviceorderid_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  serviceorderid (A::table_name, "`serviceorderid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::personrole_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  personrole (A::table_name, "`personrole`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::driverid_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  driverid (A::table_name, "`driverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::claimtime_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  claimtime (A::table_name, "`claimtime`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::notes_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  notes (A::table_name, "`notes`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Claim, id_mysql, A >::isset_type_
  query_columns< ::taxi::Claim, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Claim, id_mysql, A >:
    query_columns< ::taxi::Claim, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Claim, id_mysql >:
    public access::object_traits< ::taxi::Claim >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // serviceorderid
      //
      long long serviceorderid_value;
      my_bool serviceorderid_null;

      // personrole
      //
      mysql::value_traits< ::taxi::PersonRole::type, mysql::id_enum >::image_type personrole_value;
      unsigned long personrole_size;
      my_bool personrole_null;

      // driverid
      //
      long long driverid_value;
      my_bool driverid_null;

      // claimtime
      //
      long long claimtime_value;
      my_bool claimtime_null;

      // notes
      //
      details::buffer notes_value;
      unsigned long notes_size;
      my_bool notes_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Claim, id_common >:
    public access::object_traits_impl< ::taxi::Claim, id_mysql >
  {
  };

  // Track
  //
  template <typename A>
  struct query_columns< ::taxi::Track, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // driverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Driverid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    driverid_type_;

    static const driverid_type_ driverid;

    // serviceorderid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::Serviceorderid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    serviceorderid_type_;

    static const serviceorderid_type_ serviceorderid;

    // tracktime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    tracktime_type_;

    static const tracktime_type_ tracktime;

    // location
    //
    struct location_type_
    {
      location_type_ ()
      {
      }

      // latitude
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::GEO,
          mysql::id_double >::query_type,
        mysql::id_double >
      latitude_type_;

      static const latitude_type_ latitude;

      // longitude
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::GEO,
          mysql::id_double >::query_type,
        mysql::id_double >
      longitude_type_;

      static const longitude_type_ longitude;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_GeoLocation__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const location_type_ location;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Track__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::id_type_
  query_columns< ::taxi::Track, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::driverid_type_
  query_columns< ::taxi::Track, id_mysql, A >::
  driverid (A::table_name, "`driverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::serviceorderid_type_
  query_columns< ::taxi::Track, id_mysql, A >::
  serviceorderid (A::table_name, "`serviceorderid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::tracktime_type_
  query_columns< ::taxi::Track, id_mysql, A >::
  tracktime (A::table_name, "`tracktime`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::location_type_::latitude_type_
  query_columns< ::taxi::Track, id_mysql, A >::location_type_::
  latitude (A::table_name, "`location_latitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::location_type_::longitude_type_
  query_columns< ::taxi::Track, id_mysql, A >::location_type_::
  longitude (A::table_name, "`location_longitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::location_type_::isset_type_
  query_columns< ::taxi::Track, id_mysql, A >::location_type_::
  isset (A::table_name, "`location_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::location_type_
  query_columns< ::taxi::Track, id_mysql, A >::location;

  template <typename A>
  const typename query_columns< ::taxi::Track, id_mysql, A >::isset_type_
  query_columns< ::taxi::Track, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Track, id_mysql, A >:
    query_columns< ::taxi::Track, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Track, id_mysql >:
    public access::object_traits< ::taxi::Track >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // driverid
      //
      long long driverid_value;
      my_bool driverid_null;

      // serviceorderid
      //
      long long serviceorderid_value;
      my_bool serviceorderid_null;

      // tracktime
      //
      long long tracktime_value;
      my_bool tracktime_null;

      // location
      //
      composite_value_traits< ::taxi::GeoLocation, id_mysql >::image_type location_value;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Track, id_common >:
    public access::object_traits_impl< ::taxi::Track, id_mysql >
  {
  };

  // SheduleDays
  //
  template <>
  class access::composite_value_traits< ::taxi::SheduleDays, id_mysql >
  {
    public:
    typedef ::taxi::SheduleDays value_type;

    struct image_type
    {
      // week0
      //
      signed char week0_value;
      my_bool week0_null;

      // week1
      //
      signed char week1_value;
      my_bool week1_null;

      // week2
      //
      signed char week2_value;
      my_bool week2_null;

      // week3
      //
      signed char week3_value;
      my_bool week3_null;

      // week4
      //
      signed char week4_value;
      my_bool week4_null;

      // week5
      //
      signed char week5_value;
      my_bool week5_null;

      // week6
      //
      signed char week6_value;
      my_bool week6_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);
  };

  // Shedule
  //
  template <typename A>
  struct query_columns< ::taxi::Shedule, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // active
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    active_type_;

    static const active_type_ active;

    // sheduledays
    //
    struct sheduledays_type_
    {
      sheduledays_type_ ()
      {
      }

      // week0
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week0_type_;

      static const week0_type_ week0;

      // week1
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week1_type_;

      static const week1_type_ week1;

      // week2
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week2_type_;

      static const week2_type_ week2;

      // week3
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week3_type_;

      static const week3_type_ week3;

      // week4
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week4_type_;

      static const week4_type_ week4;

      // week5
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week5_type_;

      static const week5_type_ week5;

      // week6
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          bool,
          mysql::id_tiny >::query_type,
        mysql::id_tiny >
      week6_type_;

      static const week6_type_ week6;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_SheduleDays__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const sheduledays_type_ sheduledays;

    // customerid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    customerid_type_;

    static const customerid_type_ customerid;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // description
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    description_type_;

    static const description_type_ description;

    // pointstart
    //
    struct pointstart_type_
    {
      pointstart_type_ ()
      {
      }

      // location
      //
      struct location_type_
      {
        location_type_ ()
        {
        }

        // latitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        latitude_type_;

        static const latitude_type_ latitude;

        // longitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        longitude_type_;

        static const longitude_type_ longitude;

        // isset
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::_GeoLocation__isset,
            mysql::id_blob >::query_type,
          mysql::id_blob >
        isset_type_;

        static const isset_type_ isset;
      };

      static const location_type_ location;

      // name
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      name_type_;

      static const name_type_ name;

      // city
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      city_type_;

      static const city_type_ city;

      // address
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      address_type_;

      static const address_type_ address;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Location__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const pointstart_type_ pointstart;

    // pointfinish
    //
    struct pointfinish_type_
    {
      pointfinish_type_ ()
      {
      }

      // location
      //
      struct location_type_
      {
        location_type_ ()
        {
        }

        // latitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        latitude_type_;

        static const latitude_type_ latitude;

        // longitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        longitude_type_;

        static const longitude_type_ longitude;

        // isset
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::_GeoLocation__isset,
            mysql::id_blob >::query_type,
          mysql::id_blob >
        isset_type_;

        static const isset_type_ isset;
      };

      static const location_type_ location;

      // name
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      name_type_;

      static const name_type_ name;

      // city
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      city_type_;

      static const city_type_ city;

      // address
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      address_type_;

      static const address_type_ address;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Location__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const pointfinish_type_ pointfinish;

    // hasMiddlePoints
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    hasMiddlePoints_type_;

    static const hasMiddlePoints_type_ hasMiddlePoints;

    // haspassenger
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    haspassenger_type_;

    static const haspassenger_type_ haspassenger;

    // timestart
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    timestart_type_;

    static const timestart_type_ timestart;

    // timefinish
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    timefinish_type_;

    static const timefinish_type_ timefinish;

    // sheduleoperatorid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    sheduleoperatorid_type_;

    static const sheduleoperatorid_type_ sheduleoperatorid;

    // preferreddriverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    preferreddriverid_type_;

    static const preferreddriverid_type_ preferreddriverid;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Shedule__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::id_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::active_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  active (A::table_name, "`active`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week0_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week0 (A::table_name, "`sheduledays_week0`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week1_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week1 (A::table_name, "`sheduledays_week1`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week2_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week2 (A::table_name, "`sheduledays_week2`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week3_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week3 (A::table_name, "`sheduledays_week3`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week4_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week4 (A::table_name, "`sheduledays_week4`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week5_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week5 (A::table_name, "`sheduledays_week5`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::week6_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  week6 (A::table_name, "`sheduledays_week6`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::isset_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_::
  isset (A::table_name, "`sheduledays_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::sheduledays;

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::customerid_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  customerid (A::table_name, "`customerid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::name_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::description_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  description (A::table_name, "`description`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_::latitude_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_::
  latitude (A::table_name, "`pointstart_location_latitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_::longitude_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_::
  longitude (A::table_name, "`pointstart_location_longitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_::isset_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_::
  isset (A::table_name, "`pointstart_location_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::location;

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::name_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::
  name (A::table_name, "`pointstart_name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::city_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::
  city (A::table_name, "`pointstart_city`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::address_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::
  address (A::table_name, "`pointstart_address`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::isset_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_::
  isset (A::table_name, "`pointstart_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointstart_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointstart;

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_::latitude_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_::
  latitude (A::table_name, "`pointfinish_location_latitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_::longitude_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_::
  longitude (A::table_name, "`pointfinish_location_longitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_::isset_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_::
  isset (A::table_name, "`pointfinish_location_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::location;

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::name_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::
  name (A::table_name, "`pointfinish_name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::city_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::
  city (A::table_name, "`pointfinish_city`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::address_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::
  address (A::table_name, "`pointfinish_address`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::isset_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_::
  isset (A::table_name, "`pointfinish_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::pointfinish;

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::hasMiddlePoints_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  hasMiddlePoints (A::table_name, "`hasMiddlePoints`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::haspassenger_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  haspassenger (A::table_name, "`haspassenger`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::timestart_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  timestart (A::table_name, "`timestart`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::timefinish_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  timefinish (A::table_name, "`timefinish`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::sheduleoperatorid_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  sheduleoperatorid (A::table_name, "`sheduleoperatorid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::preferreddriverid_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  preferreddriverid (A::table_name, "`preferreddriverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Shedule, id_mysql, A >::isset_type_
  query_columns< ::taxi::Shedule, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Shedule, id_mysql, A >:
    query_columns< ::taxi::Shedule, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Shedule, id_mysql >:
    public access::object_traits< ::taxi::Shedule >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // active
      //
      signed char active_value;
      my_bool active_null;

      // sheduledays
      //
      composite_value_traits< ::taxi::SheduleDays, id_mysql >::image_type sheduledays_value;

      // customerid
      //
      long long customerid_value;
      my_bool customerid_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // description
      //
      details::buffer description_value;
      unsigned long description_size;
      my_bool description_null;

      // pointstart
      //
      composite_value_traits< ::taxi::Location, id_mysql >::image_type pointstart_value;

      // pointfinish
      //
      composite_value_traits< ::taxi::Location, id_mysql >::image_type pointfinish_value;

      // hasMiddlePoints
      //
      signed char hasMiddlePoints_value;
      my_bool hasMiddlePoints_null;

      // haspassenger
      //
      signed char haspassenger_value;
      my_bool haspassenger_null;

      // timestart
      //
      long long timestart_value;
      my_bool timestart_null;

      // timefinish
      //
      long long timefinish_value;
      my_bool timefinish_null;

      // sheduleoperatorid
      //
      long long sheduleoperatorid_value;
      my_bool sheduleoperatorid_null;

      // preferreddriverid
      //
      long long preferreddriverid_value;
      my_bool preferreddriverid_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // passengers
    //
    struct passengers_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::Passengerids container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< passengers_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 34UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Shedule, id_common >:
    public access::object_traits_impl< ::taxi::Shedule, id_mysql >
  {
  };

  // DriverBlackList
  //
  template <typename A>
  struct query_columns< ::taxi::DriverBlackList, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // created
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    created_type_;

    static const created_type_ created;

    // customerid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    customerid_type_;

    static const customerid_type_ customerid;

    // driverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    driverid_type_;

    static const driverid_type_ driverid;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_DriverBlackList__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::DriverBlackList, id_mysql, A >::id_type_
  query_columns< ::taxi::DriverBlackList, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DriverBlackList, id_mysql, A >::created_type_
  query_columns< ::taxi::DriverBlackList, id_mysql, A >::
  created (A::table_name, "`created`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DriverBlackList, id_mysql, A >::customerid_type_
  query_columns< ::taxi::DriverBlackList, id_mysql, A >::
  customerid (A::table_name, "`customerid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DriverBlackList, id_mysql, A >::driverid_type_
  query_columns< ::taxi::DriverBlackList, id_mysql, A >::
  driverid (A::table_name, "`driverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::DriverBlackList, id_mysql, A >::isset_type_
  query_columns< ::taxi::DriverBlackList, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::DriverBlackList, id_mysql, A >:
    query_columns< ::taxi::DriverBlackList, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::DriverBlackList, id_mysql >:
    public access::object_traits< ::taxi::DriverBlackList >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // created
      //
      long long created_value;
      my_bool created_null;

      // customerid
      //
      long long customerid_value;
      my_bool customerid_null;

      // driverid
      //
      long long driverid_value;
      my_bool driverid_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::DriverBlackList, id_common >:
    public access::object_traits_impl< ::taxi::DriverBlackList, id_mysql >
  {
  };

  // SheduleStop
  //
  template <typename A>
  struct query_columns< ::taxi::SheduleStop, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // sheduleid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    sheduleid_type_;

    static const sheduleid_type_ sheduleid;

    // point
    //
    struct point_type_
    {
      point_type_ ()
      {
      }

      // location
      //
      struct location_type_
      {
        location_type_ ()
        {
        }

        // latitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        latitude_type_;

        static const latitude_type_ latitude;

        // longitude
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::GEO,
            mysql::id_double >::query_type,
          mysql::id_double >
        longitude_type_;

        static const longitude_type_ longitude;

        // isset
        //
        typedef
        mysql::query_column<
          mysql::value_traits<
            ::taxi::_GeoLocation__isset,
            mysql::id_blob >::query_type,
          mysql::id_blob >
        isset_type_;

        static const isset_type_ isset;
      };

      static const location_type_ location;

      // name
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      name_type_;

      static const name_type_ name;

      // city
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      city_type_;

      static const city_type_ city;

      // address
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::STR,
          mysql::id_string >::query_type,
        mysql::id_string >
      address_type_;

      static const address_type_ address;

      // isset
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::taxi::_Location__isset,
          mysql::id_blob >::query_type,
        mysql::id_blob >
      isset_type_;

      static const isset_type_ isset;
    };

    static const point_type_ point;

    // position
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    position_type_;

    static const position_type_ position;

    // haspassenger
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    haspassenger_type_;

    static const haspassenger_type_ haspassenger;

    // passengerid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    passengerid_type_;

    static const passengerid_type_ passengerid;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_SheduleStop__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::id_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::sheduleid_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::
  sheduleid (A::table_name, "`sheduleid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_::latitude_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_::
  latitude (A::table_name, "`point_location_latitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_::longitude_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_::
  longitude (A::table_name, "`point_location_longitude`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_::isset_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_::
  isset (A::table_name, "`point_location_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::location;

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::name_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::
  name (A::table_name, "`point_name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::city_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::
  city (A::table_name, "`point_city`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::address_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::
  address (A::table_name, "`point_address`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::isset_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_::
  isset (A::table_name, "`point_isset`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::point_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::point;

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::position_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::
  position (A::table_name, "`position`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::haspassenger_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::
  haspassenger (A::table_name, "`haspassenger`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::passengerid_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::
  passengerid (A::table_name, "`passengerid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::SheduleStop, id_mysql, A >::isset_type_
  query_columns< ::taxi::SheduleStop, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::SheduleStop, id_mysql, A >:
    query_columns< ::taxi::SheduleStop, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::SheduleStop, id_mysql >:
    public access::object_traits< ::taxi::SheduleStop >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // sheduleid
      //
      long long sheduleid_value;
      my_bool sheduleid_null;

      // point
      //
      composite_value_traits< ::taxi::Location, id_mysql >::image_type point_value;

      // position
      //
      int position_value;
      my_bool position_null;

      // haspassenger
      //
      signed char haspassenger_value;
      my_bool haspassenger_null;

      // passengerid
      //
      long long passengerid_value;
      my_bool passengerid_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::SheduleStop, id_common >:
    public access::object_traits_impl< ::taxi::SheduleStop, id_mysql >
  {
  };

  // Rate
  //
  template <typename A>
  struct query_columns< ::taxi::Rate, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // orgserviceid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::OrgServiceid,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    orgserviceid_type_;

    static const orgserviceid_type_ orgserviceid;

    // cityid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    cityid_type_;

    static const cityid_type_ cityid;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // active
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    active_type_;

    static const active_type_ active;

    // datestart
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datestart_type_;

    static const datestart_type_ datestart;

    // datefinish
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datefinish_type_;

    static const datefinish_type_ datefinish;

    // isweekend
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    isweekend_type_;

    static const isweekend_type_ isweekend;

    // isday
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    isday_type_;

    static const isday_type_ isday;

    // hourstart
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    hourstart_type_;

    static const hourstart_type_ hourstart;

    // hourfinish
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    hourfinish_type_;

    static const hourfinish_type_ hourfinish;

    // costmin
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    costmin_type_;

    static const costmin_type_ costmin;

    // priceboarding
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    priceboarding_type_;

    static const priceboarding_type_ priceboarding;

    // priceminute
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    priceminute_type_;

    static const priceminute_type_ priceminute;

    // pricedelay
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    pricedelay_type_;

    static const pricedelay_type_ pricedelay;

    // pricewait
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    pricewait_type_;

    static const pricewait_type_ pricewait;

    // speedmin
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    speedmin_type_;

    static const speedmin_type_ speedmin;

    // timedelayfree
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    timedelayfree_type_;

    static const timedelayfree_type_ timedelayfree;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Rate__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::id_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::orgserviceid_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  orgserviceid (A::table_name, "`orgserviceid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::cityid_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  cityid (A::table_name, "`cityid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::name_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::active_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  active (A::table_name, "`active`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::datestart_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  datestart (A::table_name, "`datestart`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::datefinish_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  datefinish (A::table_name, "`datefinish`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::isweekend_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  isweekend (A::table_name, "`isweekend`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::isday_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  isday (A::table_name, "`isday`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::hourstart_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  hourstart (A::table_name, "`hourstart`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::hourfinish_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  hourfinish (A::table_name, "`hourfinish`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::costmin_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  costmin (A::table_name, "`costmin`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::priceboarding_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  priceboarding (A::table_name, "`priceboarding`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::priceminute_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  priceminute (A::table_name, "`priceminute`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::pricedelay_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  pricedelay (A::table_name, "`pricedelay`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::pricewait_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  pricewait (A::table_name, "`pricewait`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::speedmin_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  speedmin (A::table_name, "`speedmin`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::timedelayfree_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  timedelayfree (A::table_name, "`timedelayfree`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Rate, id_mysql, A >::isset_type_
  query_columns< ::taxi::Rate, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Rate, id_mysql, A >:
    query_columns< ::taxi::Rate, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Rate, id_mysql >:
    public access::object_traits< ::taxi::Rate >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // orgserviceid
      //
      long long orgserviceid_value;
      my_bool orgserviceid_null;

      // cityid
      //
      long long cityid_value;
      my_bool cityid_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // active
      //
      signed char active_value;
      my_bool active_null;

      // datestart
      //
      long long datestart_value;
      my_bool datestart_null;

      // datefinish
      //
      long long datefinish_value;
      my_bool datefinish_null;

      // isweekend
      //
      signed char isweekend_value;
      my_bool isweekend_null;

      // isday
      //
      signed char isday_value;
      my_bool isday_null;

      // hourstart
      //
      int hourstart_value;
      my_bool hourstart_null;

      // hourfinish
      //
      int hourfinish_value;
      my_bool hourfinish_null;

      // costmin
      //
      double costmin_value;
      my_bool costmin_null;

      // priceboarding
      //
      double priceboarding_value;
      my_bool priceboarding_null;

      // priceminute
      //
      double priceminute_value;
      my_bool priceminute_null;

      // pricedelay
      //
      double pricedelay_value;
      my_bool pricedelay_null;

      // pricewait
      //
      double pricewait_value;
      my_bool pricewait_null;

      // speedmin
      //
      int speedmin_value;
      my_bool speedmin_null;

      // timedelayfree
      //
      int timedelayfree_value;
      my_bool timedelayfree_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 19UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Rate, id_common >:
    public access::object_traits_impl< ::taxi::Rate, id_mysql >
  {
  };

  // Notification
  //
  template <typename A>
  struct query_columns< ::taxi::Notification, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // isactive
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    isactive_type_;

    static const isactive_type_ isactive;

    // msgtime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    msgtime_type_;

    static const msgtime_type_ msgtime;

    // msgfrom
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::PersonRole::type,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    msgfrom_type_;

    static const msgfrom_type_ msgfrom;

    // driverid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    driverid_type_;

    static const driverid_type_ driverid;

    // todriver
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    todriver_type_;

    static const todriver_type_ todriver;

    // tooperator
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    tooperator_type_;

    static const tooperator_type_ tooperator;

    // topassenger
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    topassenger_type_;

    static const topassenger_type_ topassenger;

    // todispatcher
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    todispatcher_type_;

    static const todispatcher_type_ todispatcher;

    // note
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    note_type_;

    static const note_type_ note;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Notification__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::id_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::isactive_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  isactive (A::table_name, "`isactive`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::msgtime_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  msgtime (A::table_name, "`msgtime`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::msgfrom_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  msgfrom (A::table_name, "`msgfrom`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::driverid_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  driverid (A::table_name, "`driverid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::todriver_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  todriver (A::table_name, "`todriver`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::tooperator_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  tooperator (A::table_name, "`tooperator`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::topassenger_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  topassenger (A::table_name, "`topassenger`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::todispatcher_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  todispatcher (A::table_name, "`todispatcher`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::note_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  note (A::table_name, "`note`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Notification, id_mysql, A >::isset_type_
  query_columns< ::taxi::Notification, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Notification, id_mysql, A >:
    query_columns< ::taxi::Notification, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Notification, id_mysql >:
    public access::object_traits< ::taxi::Notification >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // isactive
      //
      signed char isactive_value;
      my_bool isactive_null;

      // msgtime
      //
      long long msgtime_value;
      my_bool msgtime_null;

      // msgfrom
      //
      mysql::value_traits< ::taxi::PersonRole::type, mysql::id_enum >::image_type msgfrom_value;
      unsigned long msgfrom_size;
      my_bool msgfrom_null;

      // driverid
      //
      long long driverid_value;
      my_bool driverid_null;

      // todriver
      //
      signed char todriver_value;
      my_bool todriver_null;

      // tooperator
      //
      signed char tooperator_value;
      my_bool tooperator_null;

      // topassenger
      //
      signed char topassenger_value;
      my_bool topassenger_null;

      // todispatcher
      //
      signed char todispatcher_value;
      my_bool todispatcher_null;

      // note
      //
      details::buffer note_value;
      unsigned long note_size;
      my_bool note_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 11UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Notification, id_common >:
    public access::object_traits_impl< ::taxi::Notification, id_mysql >
  {
  };

  // BillAct
  //
  template <typename A>
  struct query_columns< ::taxi::BillAct, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // customerid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    customerid_type_;

    static const customerid_type_ customerid;

    // periodid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    periodid_type_;

    static const periodid_type_ periodid;

    // datestart
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datestart_type_;

    static const datestart_type_ datestart;

    // datefinish
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datefinish_type_;

    static const datefinish_type_ datefinish;

    // total0
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    total0_type_;

    static const total0_type_ total0;

    // total1
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    total1_type_;

    static const total1_type_ total1;

    // total2
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    total2_type_;

    static const total2_type_ total2;

    // taxpercent
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    taxpercent_type_;

    static const taxpercent_type_ taxpercent;

    // tax
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    tax_type_;

    static const tax_type_ tax;

    // hasdiscount
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    hasdiscount_type_;

    static const hasdiscount_type_ hasdiscount;

    // created
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    created_type_;

    static const created_type_ created;

    // haspayments
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    haspayments_type_;

    static const haspayments_type_ haspayments;

    // paid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    paid_type_;

    static const paid_type_ paid;

    // datepaid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datepaid_type_;

    static const datepaid_type_ datepaid;

    // sumbefore
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    sumbefore_type_;

    static const sumbefore_type_ sumbefore;

    // sumafter
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::CURR,
        mysql::id_double >::query_type,
      mysql::id_double >
    sumafter_type_;

    static const sumafter_type_ sumafter;

    // note
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    note_type_;

    static const note_type_ note;

    // billno
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    billno_type_;

    static const billno_type_ billno;

    // actno
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::STR,
        mysql::id_string >::query_type,
      mysql::id_string >
    actno_type_;

    static const actno_type_ actno;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_BillAct__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::id_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::customerid_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  customerid (A::table_name, "`customerid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::periodid_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  periodid (A::table_name, "`periodid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::datestart_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  datestart (A::table_name, "`datestart`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::datefinish_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  datefinish (A::table_name, "`datefinish`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::total0_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  total0 (A::table_name, "`total0`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::total1_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  total1 (A::table_name, "`total1`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::total2_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  total2 (A::table_name, "`total2`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::taxpercent_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  taxpercent (A::table_name, "`taxpercent`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::tax_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  tax (A::table_name, "`tax`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::hasdiscount_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  hasdiscount (A::table_name, "`hasdiscount`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::created_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  created (A::table_name, "`created`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::haspayments_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  haspayments (A::table_name, "`haspayments`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::paid_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  paid (A::table_name, "`paid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::datepaid_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  datepaid (A::table_name, "`datepaid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::sumbefore_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  sumbefore (A::table_name, "`sumbefore`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::sumafter_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  sumafter (A::table_name, "`sumafter`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::note_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  note (A::table_name, "`note`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::billno_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  billno (A::table_name, "`billno`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::actno_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  actno (A::table_name, "`actno`", 0);

  template <typename A>
  const typename query_columns< ::taxi::BillAct, id_mysql, A >::isset_type_
  query_columns< ::taxi::BillAct, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::BillAct, id_mysql, A >:
    query_columns< ::taxi::BillAct, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::BillAct, id_mysql >:
    public access::object_traits< ::taxi::BillAct >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // customerid
      //
      long long customerid_value;
      my_bool customerid_null;

      // periodid
      //
      int periodid_value;
      my_bool periodid_null;

      // datestart
      //
      long long datestart_value;
      my_bool datestart_null;

      // datefinish
      //
      long long datefinish_value;
      my_bool datefinish_null;

      // total0
      //
      double total0_value;
      my_bool total0_null;

      // total1
      //
      double total1_value;
      my_bool total1_null;

      // total2
      //
      double total2_value;
      my_bool total2_null;

      // taxpercent
      //
      double taxpercent_value;
      my_bool taxpercent_null;

      // tax
      //
      double tax_value;
      my_bool tax_null;

      // hasdiscount
      //
      signed char hasdiscount_value;
      my_bool hasdiscount_null;

      // created
      //
      long long created_value;
      my_bool created_null;

      // haspayments
      //
      signed char haspayments_value;
      my_bool haspayments_null;

      // paid
      //
      signed char paid_value;
      my_bool paid_null;

      // datepaid
      //
      long long datepaid_value;
      my_bool datepaid_null;

      // sumbefore
      //
      double sumbefore_value;
      my_bool sumbefore_null;

      // sumafter
      //
      double sumafter_value;
      my_bool sumafter_null;

      // note
      //
      details::buffer note_value;
      unsigned long note_size;
      my_bool note_null;

      // billno
      //
      details::buffer billno_value;
      unsigned long billno_size;
      my_bool billno_null;

      // actno
      //
      details::buffer actno_value;
      unsigned long actno_size;
      my_bool actno_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // orgservice
    //
    struct orgservice_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::RoleOrgService container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< orgservice_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        mysql::value_traits< key_type, mysql::id_enum >::image_type key_value;
        unsigned long key_size;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 21UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::BillAct, id_common >:
    public access::object_traits_impl< ::taxi::BillAct, id_mysql >
  {
  };

  // Payment
  //
  template <typename A>
  struct query_columns< ::taxi::Payment, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // billactid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    billactid_type_;

    static const billactid_type_ billactid;

    // datereceived
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datereceived_type_;

    static const datereceived_type_ datereceived;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_Payment__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::Payment, id_mysql, A >::id_type_
  query_columns< ::taxi::Payment, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Payment, id_mysql, A >::billactid_type_
  query_columns< ::taxi::Payment, id_mysql, A >::
  billactid (A::table_name, "`billactid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Payment, id_mysql, A >::datereceived_type_
  query_columns< ::taxi::Payment, id_mysql, A >::
  datereceived (A::table_name, "`datereceived`", 0);

  template <typename A>
  const typename query_columns< ::taxi::Payment, id_mysql, A >::isset_type_
  query_columns< ::taxi::Payment, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::Payment, id_mysql, A >:
    query_columns< ::taxi::Payment, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::Payment, id_mysql >:
    public access::object_traits< ::taxi::Payment >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // billactid
      //
      long long billactid_value;
      my_bool billactid_null;

      // datereceived
      //
      long long datereceived_value;
      my_bool datereceived_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // document
    //
    struct document_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::taxi::DocumentMap container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef mysql::container_statements< document_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        unsigned int key_value;
        my_bool key_null;

        // value
        //
        long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::Payment, id_common >:
    public access::object_traits_impl< ::taxi::Payment, id_mysql >
  {
  };

  // AutoPayment
  //
  template <typename A>
  struct query_columns< ::taxi::AutoPayment, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::ID,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    id_type_;

    static const id_type_ id;

    // periodid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    periodid_type_;

    static const periodid_type_ periodid;

    // datestart
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datestart_type_;

    static const datestart_type_ datestart;

    // datefinish
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::DATE,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    datefinish_type_;

    static const datefinish_type_ datefinish;

    // state
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::NUMBER32,
        mysql::id_long >::query_type,
      mysql::id_long >
    state_type_;

    static const state_type_ state;

    // isset
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::taxi::_AutoPayment__isset,
        mysql::id_blob >::query_type,
      mysql::id_blob >
    isset_type_;

    static const isset_type_ isset;
  };

  template <typename A>
  const typename query_columns< ::taxi::AutoPayment, id_mysql, A >::id_type_
  query_columns< ::taxi::AutoPayment, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::taxi::AutoPayment, id_mysql, A >::periodid_type_
  query_columns< ::taxi::AutoPayment, id_mysql, A >::
  periodid (A::table_name, "`periodid`", 0);

  template <typename A>
  const typename query_columns< ::taxi::AutoPayment, id_mysql, A >::datestart_type_
  query_columns< ::taxi::AutoPayment, id_mysql, A >::
  datestart (A::table_name, "`datestart`", 0);

  template <typename A>
  const typename query_columns< ::taxi::AutoPayment, id_mysql, A >::datefinish_type_
  query_columns< ::taxi::AutoPayment, id_mysql, A >::
  datefinish (A::table_name, "`datefinish`", 0);

  template <typename A>
  const typename query_columns< ::taxi::AutoPayment, id_mysql, A >::state_type_
  query_columns< ::taxi::AutoPayment, id_mysql, A >::
  state (A::table_name, "`state`", 0);

  template <typename A>
  const typename query_columns< ::taxi::AutoPayment, id_mysql, A >::isset_type_
  query_columns< ::taxi::AutoPayment, id_mysql, A >::
  isset (A::table_name, "`isset`", 0);

  template <typename A>
  struct pointer_query_columns< ::taxi::AutoPayment, id_mysql, A >:
    query_columns< ::taxi::AutoPayment, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::taxi::AutoPayment, id_mysql >:
    public access::object_traits< ::taxi::AutoPayment >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      my_bool id_null;

      // periodid
      //
      int periodid_value;
      my_bool periodid_null;

      // datestart
      //
      long long datestart_value;
      my_bool datestart_null;

      // datefinish
      //
      long long datefinish_value;
      my_bool datefinish_null;

      // state
      //
      int state_value;
      my_bool state_null;

      // __isset
      //
      details::buffer __isset_value;
      unsigned long __isset_size;
      my_bool __isset_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 6UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::taxi::AutoPayment, id_common >:
    public access::object_traits_impl< ::taxi::AutoPayment, id_mysql >
  {
  };

  // City
  //
  // DictEntry
  //
  // Bank
  //
  // Org
  //
  // OrgService
  //
  // Customer
  //
  // Passenger
  //
  // Vehicle
  //
  // Document
  //
  // Driver
  //
  // Dispatcher
  //
  // ServiceOrderStop
  //
  // ServiceOrder
  //
  // ServiceOrderDecline
  //
  // Claim
  //
  // Track
  //
  // Shedule
  //
  // DriverBlackList
  //
  // SheduleStop
  //
  // Rate
  //
  // Notification
  //
  // BillAct
  //
  // Payment
  //
  // AutoPayment
  //
}

#include "taxi_types-odb.ixx"

#include <odb/post.hxx>

#endif // TAXI_TYPES_ODB_HXX
