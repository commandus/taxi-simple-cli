// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // City
  //

  inline
  access::object_traits< ::taxi::City >::id_type
  access::object_traits< ::taxi::City >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::City >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::City >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // DictEntry
  //

  inline
  access::object_traits< ::taxi::DictEntry >::id_type
  access::object_traits< ::taxi::DictEntry >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::DictEntry >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::DictEntry >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Bank
  //

  inline
  access::object_traits< ::taxi::Bank >::id_type
  access::object_traits< ::taxi::Bank >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Bank >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Bank >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Org
  //

  inline
  access::object_traits< ::taxi::Org >::id_type
  access::object_traits< ::taxi::Org >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Org >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Org >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // OrgService
  //

  inline
  access::object_traits< ::taxi::OrgService >::id_type
  access::object_traits< ::taxi::OrgService >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::OrgService >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::OrgService >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Customer
  //

  inline
  access::object_traits< ::taxi::Customer >::id_type
  access::object_traits< ::taxi::Customer >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Customer >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Customer >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Passenger
  //

  inline
  access::object_traits< ::taxi::Passenger >::id_type
  access::object_traits< ::taxi::Passenger >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Passenger >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Passenger >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Vehicle
  //

  inline
  access::object_traits< ::taxi::Vehicle >::id_type
  access::object_traits< ::taxi::Vehicle >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Vehicle >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Vehicle >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Document
  //

  inline
  access::object_traits< ::taxi::Document >::id_type
  access::object_traits< ::taxi::Document >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Document >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Document >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Driver
  //

  inline
  access::object_traits< ::taxi::Driver >::id_type
  access::object_traits< ::taxi::Driver >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Driver >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Driver >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Dispatcher
  //

  inline
  access::object_traits< ::taxi::Dispatcher >::id_type
  access::object_traits< ::taxi::Dispatcher >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Dispatcher >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Dispatcher >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ServiceOrderStop
  //

  inline
  access::object_traits< ::taxi::ServiceOrderStop >::id_type
  access::object_traits< ::taxi::ServiceOrderStop >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::ServiceOrderStop >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::ServiceOrderStop >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ServiceOrder
  //

  inline
  access::object_traits< ::taxi::ServiceOrder >::id_type
  access::object_traits< ::taxi::ServiceOrder >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::ServiceOrder >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::ServiceOrder >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ServiceOrderDecline
  //

  inline
  access::object_traits< ::taxi::ServiceOrderDecline >::id_type
  access::object_traits< ::taxi::ServiceOrderDecline >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::ServiceOrderDecline >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::ServiceOrderDecline >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Claim
  //

  inline
  access::object_traits< ::taxi::Claim >::id_type
  access::object_traits< ::taxi::Claim >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Claim >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Claim >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Track
  //

  inline
  access::object_traits< ::taxi::Track >::id_type
  access::object_traits< ::taxi::Track >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Track >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Track >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Shedule
  //

  inline
  access::object_traits< ::taxi::Shedule >::id_type
  access::object_traits< ::taxi::Shedule >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Shedule >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Shedule >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // DriverBlackList
  //

  inline
  access::object_traits< ::taxi::DriverBlackList >::id_type
  access::object_traits< ::taxi::DriverBlackList >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::DriverBlackList >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::DriverBlackList >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SheduleStop
  //

  inline
  access::object_traits< ::taxi::SheduleStop >::id_type
  access::object_traits< ::taxi::SheduleStop >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::SheduleStop >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::SheduleStop >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Rate
  //

  inline
  access::object_traits< ::taxi::Rate >::id_type
  access::object_traits< ::taxi::Rate >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Rate >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Rate >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Notification
  //

  inline
  access::object_traits< ::taxi::Notification >::id_type
  access::object_traits< ::taxi::Notification >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Notification >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Notification >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BillAct
  //

  inline
  access::object_traits< ::taxi::BillAct >::id_type
  access::object_traits< ::taxi::BillAct >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::BillAct >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::BillAct >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Payment
  //

  inline
  access::object_traits< ::taxi::Payment >::id_type
  access::object_traits< ::taxi::Payment >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::Payment >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::Payment >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AutoPayment
  //

  inline
  access::object_traits< ::taxi::AutoPayment >::id_type
  access::object_traits< ::taxi::AutoPayment >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::taxi::AutoPayment >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::taxi::AutoPayment >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // City
  //

  inline
  void access::object_traits_impl< ::taxi::City, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::City, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // DictEntry
  //

  inline
  void access::object_traits_impl< ::taxi::DictEntry, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::DictEntry, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // PassengerLimit
  //

  inline
  bool access::composite_value_traits< ::taxi::PassengerLimit, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.id_null;
    r = r && i.tripcount_null;
    r = r && i.minutescount_null;
    r = r && i.moneycount_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::PassengerLimit, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.id_null = 1;
    i.tripcount_null = 1;
    i.minutescount_null = 1;
    i.moneycount_null = 1;
    i.__isset_null = 1;
  }

  // Payload
  //

  inline
  bool access::composite_value_traits< ::taxi::Payload, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.passengercount_null;
    r = r && i.baggagecount_null;
    r = r && i.baggageweight_null;
    r = r && i.baggagewidth_null;
    r = r && i.baggageheight_null;
    r = r && i.papercount_null;
    r = r && i.stopcount_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::Payload, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.passengercount_null = 1;
    i.baggagecount_null = 1;
    i.baggageweight_null = 1;
    i.baggagewidth_null = 1;
    i.baggageheight_null = 1;
    i.papercount_null = 1;
    i.stopcount_null = 1;
    i.__isset_null = 1;
  }

  // PassengerUsage
  //

  inline
  bool access::composite_value_traits< ::taxi::PassengerUsage, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.id_null;
    r = r && i.tripcount_null;
    r = r && i.minutescount_null;
    r = r && i.moneycount_null;
    r = r && composite_value_traits< ::taxi::Payload, id_mysql >::get_null (i.payload_value);
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::PassengerUsage, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.id_null = 1;
    i.tripcount_null = 1;
    i.minutescount_null = 1;
    i.moneycount_null = 1;
    composite_value_traits< ::taxi::Payload, id_mysql >::set_null (i.payload_value, sk);
    i.__isset_null = 1;
  }

  // UserDevice
  //

  inline
  bool access::composite_value_traits< ::taxi::UserDevice, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.devicetype_null;
    r = r && i.isactive_null;
    r = r && i.model_null;
    r = r && i.imei_null;
    r = r && i.line1_null;
    r = r && i.line2_null;
    r = r && i.hasGSMorCDMA_null;
    r = r && i.hasGPS_null;
    r = r && i.isGPS_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::UserDevice, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.devicetype_null = 1;
    i.isactive_null = 1;
    i.model_null = 1;
    i.imei_null = 1;
    i.line1_null = 1;
    i.line2_null = 1;
    i.hasGSMorCDMA_null = 1;
    i.hasGPS_null = 1;
    i.isGPS_null = 1;
    i.__isset_null = 1;
  }

  // Credentials
  //

  inline
  bool access::composite_value_traits< ::taxi::Credentials, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.phone_null;
    r = r && i.personrole_null;
    r = r && i.token_null;
    r = r && i.password_null;
    r = r && i.islogged_null;
    r = r && i.timelogon_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::Credentials, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.phone_null = 1;
    i.personrole_null = 1;
    i.token_null = 1;
    i.password_null = 1;
    i.islogged_null = 1;
    i.timelogon_null = 1;
    i.__isset_null = 1;
  }

  // Person
  //

  // Bank
  //

  inline
  void access::object_traits_impl< ::taxi::Bank, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Bank, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // GeoLocation
  //

  inline
  bool access::composite_value_traits< ::taxi::GeoLocation, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.latitude_null;
    r = r && i.longitude_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::GeoLocation, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.latitude_null = 1;
    i.longitude_null = 1;
    i.__isset_null = 1;
  }

  // Location
  //

  inline
  bool access::composite_value_traits< ::taxi::Location, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && composite_value_traits< ::taxi::GeoLocation, id_mysql >::get_null (i.location_value);
    r = r && i.name_null;
    r = r && i.city_null;
    r = r && i.address_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::Location, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    composite_value_traits< ::taxi::GeoLocation, id_mysql >::set_null (i.location_value, sk);
    i.name_null = 1;
    i.city_null = 1;
    i.address_null = 1;
    i.__isset_null = 1;
  }

  // Org
  //

  inline
  void access::object_traits_impl< ::taxi::Org, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // OrgService
  //

  inline
  void access::object_traits_impl< ::taxi::OrgService, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Customer
  //

  inline
  void access::object_traits_impl< ::taxi::Customer, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Passenger
  //

  inline
  void access::object_traits_impl< ::taxi::Passenger, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Vehicle
  //

  inline
  void access::object_traits_impl< ::taxi::Vehicle, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Vehicle, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Document
  //

  inline
  void access::object_traits_impl< ::taxi::Document, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Document, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Driver
  //

  inline
  void access::object_traits_impl< ::taxi::Driver, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Dispatcher
  //

  inline
  void access::object_traits_impl< ::taxi::Dispatcher, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // ServiceOrderStop
  //

  inline
  void access::object_traits_impl< ::taxi::ServiceOrderStop, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // ServiceOrder
  //

  inline
  void access::object_traits_impl< ::taxi::ServiceOrder, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // ServiceOrderDecline
  //

  inline
  void access::object_traits_impl< ::taxi::ServiceOrderDecline, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::ServiceOrderDecline, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Claim
  //

  inline
  void access::object_traits_impl< ::taxi::Claim, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Claim, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Track
  //

  inline
  void access::object_traits_impl< ::taxi::Track, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Track, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // SheduleDays
  //

  inline
  bool access::composite_value_traits< ::taxi::SheduleDays, id_mysql >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.week0_null;
    r = r && i.week1_null;
    r = r && i.week2_null;
    r = r && i.week3_null;
    r = r && i.week4_null;
    r = r && i.week5_null;
    r = r && i.week6_null;
    r = r && i.__isset_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::taxi::SheduleDays, id_mysql >::
  set_null (image_type& i,
            mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.week0_null = 1;
    i.week1_null = 1;
    i.week2_null = 1;
    i.week3_null = 1;
    i.week4_null = 1;
    i.week5_null = 1;
    i.week6_null = 1;
    i.__isset_null = 1;
  }

  // Shedule
  //

  inline
  void access::object_traits_impl< ::taxi::Shedule, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // DriverBlackList
  //

  inline
  void access::object_traits_impl< ::taxi::DriverBlackList, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::DriverBlackList, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // SheduleStop
  //

  inline
  void access::object_traits_impl< ::taxi::SheduleStop, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::SheduleStop, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Rate
  //

  inline
  void access::object_traits_impl< ::taxi::Rate, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Rate, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Notification
  //

  inline
  void access::object_traits_impl< ::taxi::Notification, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::Notification, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // BillAct
  //

  inline
  void access::object_traits_impl< ::taxi::BillAct, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Payment
  //

  inline
  void access::object_traits_impl< ::taxi::Payment, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // AutoPayment
  //

  inline
  void access::object_traits_impl< ::taxi::AutoPayment, id_mysql >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::taxi::AutoPayment, id_mysql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }
}

