/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "taxi_types.h"

#include <algorithm>

namespace taxi {

int _kMonthValues[] = {
  Month::JAN,
  Month::FEB,
  Month::MAR,
  Month::APR,
  Month::MAY,
  Month::JUN,
  Month::JUL,
  Month::AUG,
  Month::SEP,
  Month::OCT,
  Month::NOV,
  Month::DEC
};
const char* _kMonthNames[] = {
  "JAN",
  "FEB",
  "MAR",
  "APR",
  "MAY",
  "JUN",
  "JUL",
  "AUG",
  "SEP",
  "OCT",
  "NOV",
  "DEC"
};
const std::map<int, const char*> _Month_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kMonthValues, _kMonthNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgBuildingValues[] = {
  OrgBuilding::OFFICEMAIN,
  OrgBuilding::FACILITY
};
const char* _kOrgBuildingNames[] = {
  "OFFICEMAIN",
  "FACILITY"
};
const std::map<int, const char*> _OrgBuilding_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrgBuildingValues, _kOrgBuildingNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgServiceDeptValues[] = {
  OrgServiceDept::CUSTOMER,
  OrgServiceDept::DRIVER,
  OrgServiceDept::OTHER
};
const char* _kOrgServiceDeptNames[] = {
  "CUSTOMER",
  "DRIVER",
  "OTHER"
};
const std::map<int, const char*> _OrgServiceDept_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrgServiceDeptValues, _kOrgServiceDeptNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgRoleValues[] = {
  OrgRole::ORGGUEST,
  OrgRole::ORGSERVICE,
  OrgRole::ORGTAXI,
  OrgRole::ORGCUSTOMER,
  OrgRole::ORGBANK,
  OrgRole::ORGPROCESSOR
};
const char* _kOrgRoleNames[] = {
  "ORGGUEST",
  "ORGSERVICE",
  "ORGTAXI",
  "ORGCUSTOMER",
  "ORGBANK",
  "ORGPROCESSOR"
};
const std::map<int, const char*> _OrgRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kOrgRoleValues, _kOrgRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaxiServiceRoleValues[] = {
  TaxiServiceRole::TS_DISPATCH,
  TaxiServiceRole::TS_CARPOOL
};
const char* _kTaxiServiceRoleNames[] = {
  "TS_DISPATCH",
  "TS_CARPOOL"
};
const std::map<int, const char*> _TaxiServiceRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTaxiServiceRoleValues, _kTaxiServiceRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPersonRoleValues[] = {
  PersonRole::ADMIN,
  PersonRole::MANAGER,
  PersonRole::CUSTOMER,
  PersonRole::DISPATCHER,
  PersonRole::DRIVER,
  PersonRole::MASTER,
  PersonRole::OPERATOR,
  PersonRole::PASSENGER,
  PersonRole::GUEST,
  PersonRole::NOTAUTHORIZED
};
const char* _kPersonRoleNames[] = {
  "ADMIN",
  "MANAGER",
  "CUSTOMER",
  "DISPATCHER",
  "DRIVER",
  "MASTER",
  "OPERATOR",
  "PASSENGER",
  "GUEST",
  "NOTAUTHORIZED"
};
const std::map<int, const char*> _PersonRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kPersonRoleValues, _kPersonRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgPositionValues[] = {
  OrgPosition::SELFEMP,
  OrgPosition::EMP,
  OrgPosition::CHIEF,
  OrgPosition::ACCT,
  OrgPosition::MGR
};
const char* _kOrgPositionNames[] = {
  "SELFEMP",
  "EMP",
  "CHIEF",
  "ACCT",
  "MGR"
};
const std::map<int, const char*> _OrgPosition_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kOrgPositionValues, _kOrgPositionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderRoleValues[] = {
  OrderRole::ORDER_FOR,
  OrderRole::ORDER_BY
};
const char* _kOrderRoleNames[] = {
  "ORDER_FOR",
  "ORDER_BY"
};
const std::map<int, const char*> _OrderRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderRoleValues, _kOrderRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCrewRoleValues[] = {
  CrewRole::CREW_DRIVER,
  CrewRole::CREW_LOADER
};
const char* _kCrewRoleNames[] = {
  "CREW_DRIVER",
  "CREW_LOADER"
};
const std::map<int, const char*> _CrewRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCrewRoleValues, _kCrewRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgAddressTypeValues[] = {
  OrgAddressType::OA_REPORT,
  OrgAddressType::OA_LEGAL,
  OrgAddressType::OA_REAL
};
const char* _kOrgAddressTypeNames[] = {
  "OA_REPORT",
  "OA_LEGAL",
  "OA_REAL"
};
const std::map<int, const char*> _OrgAddressType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrgAddressTypeValues, _kOrgAddressTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeviceTypeValues[] = {
  DeviceType::UNKNOWN,
  DeviceType::ANDROID,
  DeviceType::IOS,
  DeviceType::JAVAME,
  DeviceType::MOBILEBROWSER,
  DeviceType::DESKTOPBROWSER,
  DeviceType::APPSERVICE
};
const char* _kDeviceTypeNames[] = {
  "UNKNOWN",
  "ANDROID",
  "IOS",
  "JAVAME",
  "MOBILEBROWSER",
  "DESKTOPBROWSER",
  "APPSERVICE"
};
const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kDeviceTypeValues, _kDeviceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEmployeeStatusValues[] = {
  EmployeeStatus::ACTIVE,
  EmployeeStatus::INACTIVE,
  EmployeeStatus::DELETED
};
const char* _kEmployeeStatusNames[] = {
  "ACTIVE",
  "INACTIVE",
  "DELETED"
};
const std::map<int, const char*> _EmployeeStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEmployeeStatusValues, _kEmployeeStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleStatusValues[] = {
  VehicleStatus::ACTIVE,
  VehicleStatus::INACTIVE
};
const char* _kVehicleStatusNames[] = {
  "ACTIVE",
  "INACTIVE"
};
const std::map<int, const char*> _VehicleStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kVehicleStatusValues, _kVehicleStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDocumentTypeValues[] = {
  DocumentType::PASSPORT,
  DocumentType::DRIVERLICENSE,
  DocumentType::ACT,
  DocumentType::BILL,
  DocumentType::RECEIPT,
  DocumentType::WAYBILL,
  DocumentType::ENTLICENSE,
  DocumentType::PAYMENTRECEIPT
};
const char* _kDocumentTypeNames[] = {
  "PASSPORT",
  "DRIVERLICENSE",
  "ACT",
  "BILL",
  "RECEIPT",
  "WAYBILL",
  "ENTLICENSE",
  "PAYMENTRECEIPT"
};
const std::map<int, const char*> _DocumentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kDocumentTypeValues, _kDocumentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCanOrderValues[] = {
  CanOrder::EVERYTHING,
  CanOrder::NOTHING,
  CanOrder::ONLYROUTE
};
const char* _kCanOrderNames[] = {
  "EVERYTHING",
  "NOTHING",
  "ONLYROUTE"
};
const std::map<int, const char*> _CanOrder_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCanOrderValues, _kCanOrderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCabClassValues[] = {
  CabClass::ECONOMY,
  CabClass::COMFORT,
  CabClass::PREMIUM
};
const char* _kCabClassNames[] = {
  "ECONOMY",
  "COMFORT",
  "PREMIUM"
};
const std::map<int, const char*> _CabClass_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCabClassValues, _kCabClassNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderTimeTypeValues[] = {
  OrderTimeType::URGENT,
  OrderTimeType::SPECIFIEDTIME,
  OrderTimeType::EVERYDAY
};
const char* _kOrderTimeTypeNames[] = {
  "URGENT",
  "SPECIFIEDTIME",
  "EVERYDAY"
};
const std::map<int, const char*> _OrderTimeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrderTimeTypeValues, _kOrderTimeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderFeatureValues[] = {
  OrderFeature::CHILDSEAT,
  OrderFeature::LOADER
};
const char* _kOrderFeatureNames[] = {
  "CHILDSEAT",
  "LOADER"
};
const std::map<int, const char*> _OrderFeature_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderFeatureValues, _kOrderFeatureNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderStageValues[] = {
  OrderStage::ORDERNEW,
  OrderStage::ORDERACCEPT,
  OrderStage::ORDERDECLINED,
  OrderStage::ORDERASSIGN,
  OrderStage::ORDERASSIGNED,
  OrderStage::ORDERCONFIRMED,
  OrderStage::ORDERDRIVING,
  OrderStage::ORDERWAITING,
  OrderStage::ORDERTRANSPORTING,
  OrderStage::ORDERSTOP,
  OrderStage::ORDERCOMPLETE,
  OrderStage::ORDERCANCELLED,
  OrderStage::ORDERFAILED
};
const char* _kOrderStageNames[] = {
  "ORDERNEW",
  "ORDERACCEPT",
  "ORDERDECLINED",
  "ORDERASSIGN",
  "ORDERASSIGNED",
  "ORDERCONFIRMED",
  "ORDERDRIVING",
  "ORDERWAITING",
  "ORDERTRANSPORTING",
  "ORDERSTOP",
  "ORDERCOMPLETE",
  "ORDERCANCELLED",
  "ORDERFAILED"
};
const std::map<int, const char*> _OrderStage_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kOrderStageValues, _kOrderStageNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPaymentStateValues[] = {
  PaymentState::READY,
  PaymentState::PAID,
  PaymentState::UNPAID
};
const char* _kPaymentStateNames[] = {
  "READY",
  "PAID",
  "UNPAID"
};
const std::map<int, const char*> _PaymentState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPaymentStateValues, _kPaymentStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClaimStateValues[] = {
  ClaimState::CLAIMNO,
  ClaimState::CLAIM,
  ClaimState::CLAIMCLOSED
};
const char* _kClaimStateNames[] = {
  "CLAIMNO",
  "CLAIM",
  "CLAIMCLOSED"
};
const std::map<int, const char*> _ClaimState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kClaimStateValues, _kClaimStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaxTypeValues[] = {
  TaxType::TAXORG,
  TaxType::TAXPERSON,
  TaxType::TAXFARMER,
  TaxType::TAXLAWYER,
  TaxType::TAXNOTARY
};
const char* _kTaxTypeNames[] = {
  "TAXORG",
  "TAXPERSON",
  "TAXFARMER",
  "TAXLAWYER",
  "TAXNOTARY"
};
const std::map<int, const char*> _TaxType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaxTypeValues, _kTaxTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgTypeValues[] = {
  OrgType::ORGGOV,
  OrgType::ORGCOMM,
  OrgType::ORGENTERPRISE,
  OrgType::ORGFARMER,
  OrgType::ORGOTHER
};
const char* _kOrgTypeNames[] = {
  "ORGGOV",
  "ORGCOMM",
  "ORGENTERPRISE",
  "ORGFARMER",
  "ORGOTHER"
};
const std::map<int, const char*> _OrgType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kOrgTypeValues, _kOrgTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderTypeValues[] = {
  OrderType::TAXI,
  OrderType::COURIER
};
const char* _kOrderTypeNames[] = {
  "TAXI",
  "COURIER"
};
const std::map<int, const char*> _OrderType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderTypeValues, _kOrderTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleTypeValues[] = {
  VehicleType::CAR,
  VehicleType::COURIER
};
const char* _kVehicleTypeNames[] = {
  "CAR",
  "COURIER"
};
const std::map<int, const char*> _VehicleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kVehicleTypeValues, _kVehicleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleClassValues[] = {
  VehicleClass::VEHICLE_SMALL1,
  VehicleClass::VEHICLE_SMALL2,
  VehicleClass::VEHICLE_MIDDLE1,
  VehicleClass::VEHICLE_MIDDLE2,
  VehicleClass::VEHICLE_MIDDLE3,
  VehicleClass::VEHICLE_SUPER,
  VehicleClass::VEHICLE_CROSS,
  VehicleClass::VEHICLE_VAN,
  VehicleClass::VEHICLE_COUPE
};
const char* _kVehicleClassNames[] = {
  "VEHICLE_SMALL1",
  "VEHICLE_SMALL2",
  "VEHICLE_MIDDLE1",
  "VEHICLE_MIDDLE2",
  "VEHICLE_MIDDLE3",
  "VEHICLE_SUPER",
  "VEHICLE_CROSS",
  "VEHICLE_VAN",
  "VEHICLE_COUPE"
};
const std::map<int, const char*> _VehicleClass_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kVehicleClassValues, _kVehicleClassNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleCategoryValues[] = {
  VehicleCategory::VEHICLE_CAR,
  VehicleCategory::VEHICLE_BIKE,
  VehicleCategory::VEHICLE_SPEC,
  VehicleCategory::VEHICLE_TRAILER,
  VehicleCategory::VEHICLE_TRUCK,
  VehicleCategory::VEHICLE_BUS
};
const char* _kVehicleCategoryNames[] = {
  "VEHICLE_CAR",
  "VEHICLE_BIKE",
  "VEHICLE_SPEC",
  "VEHICLE_TRAILER",
  "VEHICLE_TRUCK",
  "VEHICLE_BUS"
};
const std::map<int, const char*> _VehicleCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kVehicleCategoryValues, _kVehicleCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStopTypeValues[] = {
  StopType::STOP_WAIT,
  StopType::STOP_PICKUP,
  StopType::STOP_THROW,
  StopType::STOP_LOAD,
  StopType::STOP_UNLOAD
};
const char* _kStopTypeNames[] = {
  "STOP_WAIT",
  "STOP_PICKUP",
  "STOP_THROW",
  "STOP_LOAD",
  "STOP_UNLOAD"
};
const std::map<int, const char*> _StopType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kStopTypeValues, _kStopTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeclineOrderCauseValues[] = {
  DeclineOrderCause::DECLINE_BY_DRIVER,
  DeclineOrderCause::DECLINE_BY_SERVICE,
  DeclineOrderCause::DECLINE_BY_PASSENGER
};
const char* _kDeclineOrderCauseNames[] = {
  "DECLINE_BY_DRIVER",
  "DECLINE_BY_SERVICE",
  "DECLINE_BY_PASSENGER"
};
const std::map<int, const char*> _DeclineOrderCause_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDeclineOrderCauseValues, _kDeclineOrderCauseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBankRoleValues[] = {
  BankRole::BANK_ACCOUNT
};
const char* _kBankRoleNames[] = {
  "BANK_ACCOUNT"
};
const std::map<int, const char*> _BankRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kBankRoleValues, _kBankRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorTypeValues[] = {
  ErrorType::ERR_FATAL,
  ErrorType::ERR_BACKEND,
  ErrorType::ERR_NOT_FOUND,
  ErrorType::ERR_APP,
  ErrorType::ERR_TOKEN_EXPIRED,
  ErrorType::ERR_LOGIN
};
const char* _kErrorTypeNames[] = {
  "ERR_FATAL",
  "ERR_BACKEND",
  "ERR_NOT_FOUND",
  "ERR_APP",
  "ERR_TOKEN_EXPIRED",
  "ERR_LOGIN"
};
const std::map<int, const char*> _ErrorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kErrorTypeValues, _kErrorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDictTagValues[] = {
  DictTag::TAG_VEHICLE_COLOR,
  DictTag::TAG_VEHICLE_BRAND,
  DictTag::TAG_VEHICLE_MODEL
};
const char* _kDictTagNames[] = {
  "TAG_VEHICLE_COLOR",
  "TAG_VEHICLE_BRAND",
  "TAG_VEHICLE_MODEL"
};
const std::map<int, const char*> _DictTag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDictTagValues, _kDictTagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kServiceObjectValues[] = {
  ServiceObject::SO_Unknown,
  ServiceObject::SO_AutoPayment,
  ServiceObject::SO_Bank,
  ServiceObject::SO_BillAct,
  ServiceObject::SO_City,
  ServiceObject::SO_Claim,
  ServiceObject::SO_Credentials,
  ServiceObject::SO_Customer,
  ServiceObject::SO_CustomerStatistic,
  ServiceObject::SO_DateRange,
  ServiceObject::SO_Dept,
  ServiceObject::SO_DictEntry,
  ServiceObject::SO_Dispatcher,
  ServiceObject::SO_Document,
  ServiceObject::SO_Driver,
  ServiceObject::SO_DriverBlackList,
  ServiceObject::SO_GeoLocation,
  ServiceObject::SO_Location,
  ServiceObject::SO_Manager,
  ServiceObject::SO_Notification,
  ServiceObject::SO_NotificationEvent,
  ServiceObject::SO_Org,
  ServiceObject::SO_OrgService,
  ServiceObject::SO_Passenger,
  ServiceObject::SO_PassengerLimit,
  ServiceObject::SO_PassengerUsage,
  ServiceObject::SO_Payload,
  ServiceObject::SO_Payment,
  ServiceObject::SO_Person,
  ServiceObject::SO_Rate,
  ServiceObject::SO_RowRange,
  ServiceObject::SO_ServiceObjectAction,
  ServiceObject::SO_ServiceOrder,
  ServiceObject::SO_ServiceOrderDecline,
  ServiceObject::SO_ServiceOrderStop,
  ServiceObject::SO_Shedule,
  ServiceObject::SO_SheduleDays,
  ServiceObject::SO_SheduleStop,
  ServiceObject::SO_TariffPlan,
  ServiceObject::SO_Track,
  ServiceObject::SO_UserDevice,
  ServiceObject::SO_Vehicle
};
const char* _kServiceObjectNames[] = {
  "SO_Unknown",
  "SO_AutoPayment",
  "SO_Bank",
  "SO_BillAct",
  "SO_City",
  "SO_Claim",
  "SO_Credentials",
  "SO_Customer",
  "SO_CustomerStatistic",
  "SO_DateRange",
  "SO_Dept",
  "SO_DictEntry",
  "SO_Dispatcher",
  "SO_Document",
  "SO_Driver",
  "SO_DriverBlackList",
  "SO_GeoLocation",
  "SO_Location",
  "SO_Manager",
  "SO_Notification",
  "SO_NotificationEvent",
  "SO_Org",
  "SO_OrgService",
  "SO_Passenger",
  "SO_PassengerLimit",
  "SO_PassengerUsage",
  "SO_Payload",
  "SO_Payment",
  "SO_Person",
  "SO_Rate",
  "SO_RowRange",
  "SO_ServiceObjectAction",
  "SO_ServiceOrder",
  "SO_ServiceOrderDecline",
  "SO_ServiceOrderStop",
  "SO_Shedule",
  "SO_SheduleDays",
  "SO_SheduleStop",
  "SO_TariffPlan",
  "SO_Track",
  "SO_UserDevice",
  "SO_Vehicle"
};
const std::map<int, const char*> _ServiceObject_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(42, _kServiceObjectValues, _kServiceObjectNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kServiceActionValues[] = {
  ServiceAction::ACT_GET,
  ServiceAction::ACT_ADD,
  ServiceAction::ACT_EDIT,
  ServiceAction::ACT_RM,
  ServiceAction::ACT_DO
};
const char* _kServiceActionNames[] = {
  "ACT_GET",
  "ACT_ADD",
  "ACT_EDIT",
  "ACT_RM",
  "ACT_DO"
};
const std::map<int, const char*> _ServiceAction_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kServiceActionValues, _kServiceActionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RowRange::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RowRange::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RowRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->len);
          this->__isset.len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RowRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RowRange");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("len", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RowRange &a, RowRange &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.len, b.len);
  swap(a.__isset, b.__isset);
}

const char* DateRange::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t DateRange::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t DateRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finish);
          this->__isset.finish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DateRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DateRange");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->finish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DateRange &a, DateRange &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.finish, b.finish);
  swap(a.__isset, b.__isset);
}

const char* GeoLocation::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t GeoLocation::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t GeoLocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeoLocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GeoLocation");

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GeoLocation &a, GeoLocation &b) {
  using ::std::swap;
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.__isset, b.__isset);
}

const char* City::ascii_fingerprint = "2271149BD58F679C5413550D19E2D0B9";
const uint8_t City::binary_fingerprint[16] = {0x22,0x71,0x14,0x9B,0xD5,0x8F,0x67,0x9C,0x54,0x13,0x55,0x0D,0x19,0xE2,0xD0,0xB9};

uint32_t City::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->areaid);
          this->__isset.areaid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geolocation.read(iprot);
          this->__isset.geolocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t City::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("City");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("areaid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->areaid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geolocation", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->geolocation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(City &a, City &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.areaid, b.areaid);
  swap(a.tag, b.tag);
  swap(a.name, b.name);
  swap(a.notes, b.notes);
  swap(a.geolocation, b.geolocation);
  swap(a.__isset, b.__isset);
}

const char* DictEntry::ascii_fingerprint = "CF5B3C32719FCC1D55CA4013F1B9D877";
const uint8_t DictEntry::binary_fingerprint[16] = {0xCF,0x5B,0x3C,0x32,0x71,0x9F,0xCC,0x1D,0x55,0xCA,0x40,0x13,0xF1,0xB9,0xD8,0x77};

uint32_t DictEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parent);
          this->__isset.parent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->tag = (DictTag::type)ecast0;
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idx);
          this->__isset.idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strvalue);
          this->__isset.strvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->intvalue);
          this->__isset.intvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DictEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DictEntry");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->parent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idx", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strvalue", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->strvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intvalue", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->intvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DictEntry &a, DictEntry &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.parent, b.parent);
  swap(a.tag, b.tag);
  swap(a.idx, b.idx);
  swap(a.strvalue, b.strvalue);
  swap(a.intvalue, b.intvalue);
  swap(a.__isset, b.__isset);
}

const char* PassengerLimit::ascii_fingerprint = "BE3A22B351B833B7BB1F7D4167460373";
const uint8_t PassengerLimit::binary_fingerprint[16] = {0xBE,0x3A,0x22,0xB3,0x51,0xB8,0x33,0xB7,0xBB,0x1F,0x7D,0x41,0x67,0x46,0x03,0x73};

uint32_t PassengerLimit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tripcount);
          this->__isset.tripcount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minutescount);
          this->__isset.minutescount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->moneycount);
          this->__isset.moneycount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PassengerLimit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PassengerLimit");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tripcount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tripcount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minutescount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minutescount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moneycount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->moneycount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PassengerLimit &a, PassengerLimit &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tripcount, b.tripcount);
  swap(a.minutescount, b.minutescount);
  swap(a.moneycount, b.moneycount);
  swap(a.__isset, b.__isset);
}

const char* Payload::ascii_fingerprint = "458493A9F4060F6499357D68C4F331E2";
const uint8_t Payload::binary_fingerprint[16] = {0x45,0x84,0x93,0xA9,0xF4,0x06,0x0F,0x64,0x99,0x35,0x7D,0x68,0xC4,0xF3,0x31,0xE2};

uint32_t Payload::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->passengercount);
          this->__isset.passengercount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggagecount);
          this->__isset.baggagecount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggageweight);
          this->__isset.baggageweight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggagewidth);
          this->__isset.baggagewidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggageheight);
          this->__isset.baggageheight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->papercount);
          this->__isset.papercount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stopcount);
          this->__isset.stopcount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Payload::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Payload");

  xfer += oprot->writeFieldBegin("passengercount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->passengercount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggagecount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->baggagecount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggageweight", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->baggageweight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggagewidth", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->baggagewidth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggageheight", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->baggageheight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("papercount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->papercount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopcount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->stopcount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Payload &a, Payload &b) {
  using ::std::swap;
  swap(a.passengercount, b.passengercount);
  swap(a.baggagecount, b.baggagecount);
  swap(a.baggageweight, b.baggageweight);
  swap(a.baggagewidth, b.baggagewidth);
  swap(a.baggageheight, b.baggageheight);
  swap(a.papercount, b.papercount);
  swap(a.stopcount, b.stopcount);
  swap(a.__isset, b.__isset);
}

const char* PassengerUsage::ascii_fingerprint = "502EEF414E009AF05EE5F2C58C515C77";
const uint8_t PassengerUsage::binary_fingerprint[16] = {0x50,0x2E,0xEF,0x41,0x4E,0x00,0x9A,0xF0,0x5E,0xE5,0xF2,0xC5,0x8C,0x51,0x5C,0x77};

uint32_t PassengerUsage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tripcount);
          this->__isset.tripcount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minutescount);
          this->__isset.minutescount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->moneycount);
          this->__isset.moneycount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PassengerUsage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PassengerUsage");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tripcount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tripcount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minutescount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minutescount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moneycount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->moneycount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PassengerUsage &a, PassengerUsage &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tripcount, b.tripcount);
  swap(a.minutescount, b.minutescount);
  swap(a.moneycount, b.moneycount);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

const char* UserDevice::ascii_fingerprint = "8F192A3F14BF2889CD29F3AABD117D07";
const uint8_t UserDevice::binary_fingerprint[16] = {0x8F,0x19,0x2A,0x3F,0x14,0xBF,0x28,0x89,0xCD,0x29,0xF3,0xAA,0xBD,0x11,0x7D,0x07};

uint32_t UserDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->devicetype = (DeviceType::type)ecast1;
          this->__isset.devicetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->model);
          this->__isset.model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imei);
          this->__isset.imei = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->line1);
          this->__isset.line1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->line2);
          this->__isset.line2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasGSMorCDMA);
          this->__isset.hasGSMorCDMA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasGPS);
          this->__isset.hasGPS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isGPS);
          this->__isset.isGPS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geolocation.read(iprot);
          this->__isset.geolocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserDevice");

  xfer += oprot->writeFieldBegin("devicetype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->devicetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("model", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->model);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imei", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->imei);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line1", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->line1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line2", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->line2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasGSMorCDMA", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->hasGSMorCDMA);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasGPS", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->hasGPS);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isGPS", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isGPS);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geolocation", ::apache::thrift::protocol::T_STRUCT, 9);
  xfer += this->geolocation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserDevice &a, UserDevice &b) {
  using ::std::swap;
  swap(a.devicetype, b.devicetype);
  swap(a.model, b.model);
  swap(a.imei, b.imei);
  swap(a.line1, b.line1);
  swap(a.line2, b.line2);
  swap(a.hasGSMorCDMA, b.hasGSMorCDMA);
  swap(a.hasGPS, b.hasGPS);
  swap(a.isGPS, b.isGPS);
  swap(a.geolocation, b.geolocation);
  swap(a.__isset, b.__isset);
}

const char* Credentials::ascii_fingerprint = "684BC8000C9CE6200A124244DB017859";
const uint8_t Credentials::binary_fingerprint[16] = {0x68,0x4B,0xC8,0x00,0x0C,0x9C,0xE6,0x20,0x0A,0x12,0x42,0x44,0xDB,0x01,0x78,0x59};

uint32_t Credentials::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->personrole = (PersonRole::type)ecast2;
          this->__isset.personrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->serviceaction = (ServiceAction::type)ecast3;
          this->__isset.serviceaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->serviceobject = (ServiceObject::type)ecast4;
          this->__isset.serviceobject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->islogged);
          this->__isset.islogged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timelogon);
          this->__isset.timelogon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gcmregistrationid);
          this->__isset.gcmregistrationid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Credentials::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Credentials");

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personrole", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->personrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceaction", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->serviceaction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceobject", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->serviceobject);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("islogged", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->islogged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timelogon", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->timelogon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gcmregistrationid", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->gcmregistrationid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Credentials &a, Credentials &b) {
  using ::std::swap;
  swap(a.phone, b.phone);
  swap(a.personrole, b.personrole);
  swap(a.token, b.token);
  swap(a.password, b.password);
  swap(a.serviceaction, b.serviceaction);
  swap(a.serviceobject, b.serviceobject);
  swap(a.islogged, b.islogged);
  swap(a.timelogon, b.timelogon);
  swap(a.gcmregistrationid, b.gcmregistrationid);
  swap(a.__isset, b.__isset);
}

const char* Person::ascii_fingerprint = "3B04270E07C9E2932F428DF1D2BB083B";
const uint8_t Person::binary_fingerprint[16] = {0x3B,0x04,0x27,0x0E,0x07,0xC9,0xE2,0x93,0x2F,0x42,0x8D,0xF1,0xD2,0xBB,0x08,0x3B};

uint32_t Person::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userdevices.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->userdevices.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->userdevices[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userdevices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstname);
          this->__isset.firstname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastname);
          this->__isset.lastname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middlename);
          this->__isset.middlename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->prefix);
          this->__isset.prefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthdate);
          this->__isset.birthdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deparment);
          this->__isset.deparment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->position);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone1);
          this->__isset.phone1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone2);
          this->__isset.phone2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fax);
          this->__isset.fax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photo);
          this->__isset.photo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Person::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Person");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userdevices", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userdevices.size()));
    std::vector<UserDevice> ::const_iterator _iter10;
    for (_iter10 = this->userdevices.begin(); _iter10 != this->userdevices.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstname", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->firstname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastname", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->lastname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middlename", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->middlename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prefix", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->prefix);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthdate", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->birthdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deparment", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->deparment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->position);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone1", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->phone1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone2", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->phone2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fax", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->fax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("photo", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->photo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Person &a, Person &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.credentials, b.credentials);
  swap(a.userdevices, b.userdevices);
  swap(a.tag, b.tag);
  swap(a.firstname, b.firstname);
  swap(a.lastname, b.lastname);
  swap(a.middlename, b.middlename);
  swap(a.prefix, b.prefix);
  swap(a.birthdate, b.birthdate);
  swap(a.deparment, b.deparment);
  swap(a.position, b.position);
  swap(a.note, b.note);
  swap(a.phone1, b.phone1);
  swap(a.phone2, b.phone2);
  swap(a.fax, b.fax);
  swap(a.email, b.email);
  swap(a.photo, b.photo);
  swap(a.__isset, b.__isset);
}

const char* Bank::ascii_fingerprint = "BC9C141275D96A1BDFC4A1F500B2DCBE";
const uint8_t Bank::binary_fingerprint[16] = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

uint32_t Bank::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bik);
          this->__isset.bik = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bank::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bank");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bik", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->bik);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bank &a, Bank &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.bik, b.bik);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* Location::ascii_fingerprint = "CF8A8E26FD0083023FE2FC627126C78F";
const uint8_t Location::binary_fingerprint[16] = {0xCF,0x8A,0x8E,0x26,0xFD,0x00,0x83,0x02,0x3F,0xE2,0xFC,0x62,0x71,0x26,0xC7,0x8F};

uint32_t Location::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Location");

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Location &a, Location &b) {
  using ::std::swap;
  swap(a.location, b.location);
  swap(a.name, b.name);
  swap(a.cityid, b.cityid);
  swap(a.city, b.city);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

const char* Org::ascii_fingerprint = "010F7FBF8AB061F0770DD4AE5E11BE82";
const uint8_t Org::binary_fingerprint[16] = {0x01,0x0F,0x7F,0xBF,0x8A,0xB0,0x61,0xF0,0x77,0x0D,0xD4,0xAE,0x5E,0x11,0xBE,0x82};

uint32_t Org::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->orgrole = (OrgRole::type)ecast11;
          this->__isset.orgrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->orgtype = (OrgType::type)ecast12;
          this->__isset.orgtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullname);
          this->__isset.fullname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortname);
          this->__isset.shortname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inn);
          this->__isset.inn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kpp);
          this->__isset.kpp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ogrn);
          this->__isset.ogrn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orgaddress.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _ktype14;
            ::apache::thrift::protocol::TType _vtype15;
            xfer += iprot->readMapBegin(_ktype14, _vtype15, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              OrgAddressType::type _key18;
              int32_t ecast20;
              xfer += iprot->readI32(ecast20);
              _key18 = (OrgAddressType::type)ecast20;
              STR& _val19 = this->orgaddress[_key18];
              xfer += iprot->readString(_val19);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orgaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->employee.clear();
            uint32_t _size21;
            ::apache::thrift::protocol::TType _ktype22;
            ::apache::thrift::protocol::TType _vtype23;
            xfer += iprot->readMapBegin(_ktype22, _vtype23, _size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              OrgPosition::type _key26;
              int32_t ecast28;
              xfer += iprot->readI32(ecast28);
              _key26 = (OrgPosition::type)ecast28;
              Person& _val27 = this->employee[_key26];
              xfer += _val27.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.employee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bank.clear();
            uint32_t _size29;
            ::apache::thrift::protocol::TType _ktype30;
            ::apache::thrift::protocol::TType _vtype31;
            xfer += iprot->readMapBegin(_ktype30, _vtype31, _size29);
            uint32_t _i33;
            for (_i33 = 0; _i33 < _size29; ++_i33)
            {
              BankRole::type _key34;
              int32_t ecast36;
              xfer += iprot->readI32(ecast36);
              _key34 = (BankRole::type)ecast36;
              Bankid& _val35 = this->bank[_key34];
              xfer += iprot->readI64(_val35);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.bank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currentaccount);
          this->__isset.currentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->correspondentaccount);
          this->__isset.correspondentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orglocation.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _ktype38;
            ::apache::thrift::protocol::TType _vtype39;
            xfer += iprot->readMapBegin(_ktype38, _vtype39, _size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              OrgBuilding::type _key42;
              int32_t ecast44;
              xfer += iprot->readI32(ecast44);
              _key42 = (OrgBuilding::type)ecast44;
              Location& _val43 = this->orglocation[_key42];
              xfer += _val43.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orglocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Org::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Org");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgrole", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->orgrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgtype", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->orgtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullname", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->fullname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortname", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->shortname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inn", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->inn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kpp", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->kpp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ogrn", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->ogrn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgaddress", ::apache::thrift::protocol::T_MAP, 12);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orgaddress.size()));
    std::map<OrgAddressType::type, STR> ::const_iterator _iter45;
    for (_iter45 = this->orgaddress.begin(); _iter45 != this->orgaddress.end(); ++_iter45)
    {
      xfer += oprot->writeI32((int32_t)_iter45->first);
      xfer += oprot->writeString(_iter45->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("employee", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->employee.size()));
    std::map<OrgPosition::type, Person> ::const_iterator _iter46;
    for (_iter46 = this->employee.begin(); _iter46 != this->employee.end(); ++_iter46)
    {
      xfer += oprot->writeI32((int32_t)_iter46->first);
      xfer += _iter46->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bank", ::apache::thrift::protocol::T_MAP, 16);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->bank.size()));
    std::map<BankRole::type, Bankid> ::const_iterator _iter47;
    for (_iter47 = this->bank.begin(); _iter47 != this->bank.end(); ++_iter47)
    {
      xfer += oprot->writeI32((int32_t)_iter47->first);
      xfer += oprot->writeI64(_iter47->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentaccount", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->currentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("correspondentaccount", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->correspondentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orglocation", ::apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orglocation.size()));
    std::map<OrgBuilding::type, Location> ::const_iterator _iter48;
    for (_iter48 = this->orglocation.begin(); _iter48 != this->orglocation.end(); ++_iter48)
    {
      xfer += oprot->writeI32((int32_t)_iter48->first);
      xfer += _iter48->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Org &a, Org &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgrole, b.orgrole);
  swap(a.orgtype, b.orgtype);
  swap(a.start, b.start);
  swap(a.tag, b.tag);
  swap(a.name, b.name);
  swap(a.fullname, b.fullname);
  swap(a.shortname, b.shortname);
  swap(a.inn, b.inn);
  swap(a.kpp, b.kpp);
  swap(a.ogrn, b.ogrn);
  swap(a.orgaddress, b.orgaddress);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.employee, b.employee);
  swap(a.bank, b.bank);
  swap(a.currentaccount, b.currentaccount);
  swap(a.correspondentaccount, b.correspondentaccount);
  swap(a.orglocation, b.orglocation);
  swap(a.description, b.description);
  swap(a.note, b.note);
  swap(a.__isset, b.__isset);
}

const char* Dept::ascii_fingerprint = "357800209A6572AE0620F1F313A254E9";
const uint8_t Dept::binary_fingerprint[16] = {0x35,0x78,0x00,0x20,0x9A,0x65,0x72,0xAE,0x06,0x20,0xF1,0xF3,0x13,0xA2,0x54,0xE9};

uint32_t Dept::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->orgid);
          this->__isset.orgid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullname);
          this->__isset.fullname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortname);
          this->__isset.shortname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orgaddress.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _ktype50;
            ::apache::thrift::protocol::TType _vtype51;
            xfer += iprot->readMapBegin(_ktype50, _vtype51, _size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              OrgAddressType::type _key54;
              int32_t ecast56;
              xfer += iprot->readI32(ecast56);
              _key54 = (OrgAddressType::type)ecast56;
              STR& _val55 = this->orgaddress[_key54];
              xfer += iprot->readString(_val55);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orgaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->employee.clear();
            uint32_t _size57;
            ::apache::thrift::protocol::TType _ktype58;
            ::apache::thrift::protocol::TType _vtype59;
            xfer += iprot->readMapBegin(_ktype58, _vtype59, _size57);
            uint32_t _i61;
            for (_i61 = 0; _i61 < _size57; ++_i61)
            {
              OrgPosition::type _key62;
              int32_t ecast64;
              xfer += iprot->readI32(ecast64);
              _key62 = (OrgPosition::type)ecast64;
              Person& _val63 = this->employee[_key62];
              xfer += _val63.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.employee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bank.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _ktype66;
            ::apache::thrift::protocol::TType _vtype67;
            xfer += iprot->readMapBegin(_ktype66, _vtype67, _size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              BankRole::type _key70;
              int32_t ecast72;
              xfer += iprot->readI32(ecast72);
              _key70 = (BankRole::type)ecast72;
              Bankid& _val71 = this->bank[_key70];
              xfer += iprot->readI64(_val71);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.bank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currentaccount);
          this->__isset.currentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->correspondentaccount);
          this->__isset.correspondentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orglocation.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _ktype74;
            ::apache::thrift::protocol::TType _vtype75;
            xfer += iprot->readMapBegin(_ktype74, _vtype75, _size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              OrgBuilding::type _key78;
              int32_t ecast80;
              xfer += iprot->readI32(ecast80);
              _key78 = (OrgBuilding::type)ecast80;
              Location& _val79 = this->orglocation[_key78];
              xfer += _val79.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orglocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dept::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Dept");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->orgid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fullname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortname", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->shortname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgaddress", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orgaddress.size()));
    std::map<OrgAddressType::type, STR> ::const_iterator _iter81;
    for (_iter81 = this->orgaddress.begin(); _iter81 != this->orgaddress.end(); ++_iter81)
    {
      xfer += oprot->writeI32((int32_t)_iter81->first);
      xfer += oprot->writeString(_iter81->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("employee", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->employee.size()));
    std::map<OrgPosition::type, Person> ::const_iterator _iter82;
    for (_iter82 = this->employee.begin(); _iter82 != this->employee.end(); ++_iter82)
    {
      xfer += oprot->writeI32((int32_t)_iter82->first);
      xfer += _iter82->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bank", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->bank.size()));
    std::map<BankRole::type, Bankid> ::const_iterator _iter83;
    for (_iter83 = this->bank.begin(); _iter83 != this->bank.end(); ++_iter83)
    {
      xfer += oprot->writeI32((int32_t)_iter83->first);
      xfer += oprot->writeI64(_iter83->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentaccount", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->currentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("correspondentaccount", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->correspondentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orglocation", ::apache::thrift::protocol::T_MAP, 13);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orglocation.size()));
    std::map<OrgBuilding::type, Location> ::const_iterator _iter84;
    for (_iter84 = this->orglocation.begin(); _iter84 != this->orglocation.end(); ++_iter84)
    {
      xfer += oprot->writeI32((int32_t)_iter84->first);
      xfer += _iter84->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dept &a, Dept &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgid, b.orgid);
  swap(a.name, b.name);
  swap(a.fullname, b.fullname);
  swap(a.shortname, b.shortname);
  swap(a.orgaddress, b.orgaddress);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.employee, b.employee);
  swap(a.bank, b.bank);
  swap(a.currentaccount, b.currentaccount);
  swap(a.correspondentaccount, b.correspondentaccount);
  swap(a.orglocation, b.orglocation);
  swap(a.description, b.description);
  swap(a.note, b.note);
  swap(a.__isset, b.__isset);
}

const char* OrgService::ascii_fingerprint = "AE1ADE88B88F7B6D8098C61589D70715";
const uint8_t OrgService::binary_fingerprint[16] = {0xAE,0x1A,0xDE,0x88,0xB8,0x8F,0x7B,0x6D,0x80,0x98,0xC6,0x15,0x89,0xD7,0x07,0x15};

uint32_t OrgService::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->organization.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _ktype86;
            ::apache::thrift::protocol::TType _vtype87;
            xfer += iprot->readMapBegin(_ktype86, _vtype87, _size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              OrgServiceDept::type _key90;
              int32_t ecast92;
              xfer += iprot->readI32(ecast92);
              _key90 = (OrgServiceDept::type)ecast92;
              Orgid& _val91 = this->organization[_key90];
              xfer += iprot->readI64(_val91);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orglocation.clear();
            uint32_t _size93;
            ::apache::thrift::protocol::TType _ktype94;
            ::apache::thrift::protocol::TType _vtype95;
            xfer += iprot->readMapBegin(_ktype94, _vtype95, _size93);
            uint32_t _i97;
            for (_i97 = 0; _i97 < _size93; ++_i97)
            {
              OrgBuilding::type _key98;
              int32_t ecast100;
              xfer += iprot->readI32(ecast100);
              _key98 = (OrgBuilding::type)ecast100;
              Location& _val99 = this->orglocation[_key98];
              xfer += _val99.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orglocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrgService::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OrgService");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->organization.size()));
    std::map<OrgServiceDept::type, Orgid> ::const_iterator _iter101;
    for (_iter101 = this->organization.begin(); _iter101 != this->organization.end(); ++_iter101)
    {
      xfer += oprot->writeI32((int32_t)_iter101->first);
      xfer += oprot->writeI64(_iter101->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orglocation", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orglocation.size()));
    std::map<OrgBuilding::type, Location> ::const_iterator _iter102;
    for (_iter102 = this->orglocation.begin(); _iter102 != this->orglocation.end(); ++_iter102)
    {
      xfer += oprot->writeI32((int32_t)_iter102->first);
      xfer += _iter102->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrgService &a, OrgService &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.organization, b.organization);
  swap(a.name, b.name);
  swap(a.orglocation, b.orglocation);
  swap(a.__isset, b.__isset);
}

const char* Customer::ascii_fingerprint = "18BA53CC4A342B8416C6CB027E0551C6";
const uint8_t Customer::binary_fingerprint[16] = {0x18,0xBA,0x53,0xCC,0x4A,0x34,0x2B,0x84,0x16,0xC6,0xCB,0x02,0x7E,0x05,0x51,0xC6};

uint32_t Customer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->organization.clear();
            uint32_t _size103;
            ::apache::thrift::protocol::TType _ktype104;
            ::apache::thrift::protocol::TType _vtype105;
            xfer += iprot->readMapBegin(_ktype104, _vtype105, _size103);
            uint32_t _i107;
            for (_i107 = 0; _i107 < _size103; ++_i107)
            {
              OrgServiceDept::type _key108;
              int32_t ecast110;
              xfer += iprot->readI32(ecast110);
              _key108 = (OrgServiceDept::type)ecast110;
              Orgid& _val109 = this->organization[_key108];
              xfer += iprot->readI64(_val109);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size111;
            ::apache::thrift::protocol::TType _ktype112;
            ::apache::thrift::protocol::TType _vtype113;
            xfer += iprot->readMapBegin(_ktype112, _vtype113, _size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              TaxiServiceRole::type _key116;
              int32_t ecast118;
              xfer += iprot->readI32(ecast118);
              _key116 = (TaxiServiceRole::type)ecast118;
              OrgServiceid& _val117 = this->svc[_key116];
              xfer += iprot->readI64(_val117);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dispatcherid);
          this->__isset.dispatcherid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast119;
          xfer += iprot->readI32(ecast119);
          this->taxtype = (TaxType::type)ecast119;
          this->__isset.taxtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tariffplanid);
          this->__isset.tariffplanid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspreferreddriver);
          this->__isset.haspreferreddriver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preferreddriverid);
          this->__isset.preferreddriverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hascredit);
          this->__isset.hascredit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hascreditlimit);
          this->__isset.hascreditlimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->creditlimit);
          this->__isset.creditlimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Customer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Customer");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->organization.size()));
    std::map<OrgServiceDept::type, Orgid> ::const_iterator _iter120;
    for (_iter120 = this->organization.begin(); _iter120 != this->organization.end(); ++_iter120)
    {
      xfer += oprot->writeI32((int32_t)_iter120->first);
      xfer += oprot->writeI64(_iter120->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter121;
    for (_iter121 = this->svc.begin(); _iter121 != this->svc.end(); ++_iter121)
    {
      xfer += oprot->writeI32((int32_t)_iter121->first);
      xfer += oprot->writeI64(_iter121->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dispatcherid", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->dispatcherid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taxtype", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->taxtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tariffplanid", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->tariffplanid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspreferreddriver", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->haspreferreddriver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferreddriverid", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->preferreddriverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hascredit", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->hascredit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hascreditlimit", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->hascreditlimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creditlimit", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->creditlimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Customer &a, Customer &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.nickname, b.nickname);
  swap(a.tag, b.tag);
  swap(a.organization, b.organization);
  swap(a.svc, b.svc);
  swap(a.dispatcherid, b.dispatcherid);
  swap(a.taxtype, b.taxtype);
  swap(a.active, b.active);
  swap(a.enabled, b.enabled);
  swap(a.tariffplanid, b.tariffplanid);
  swap(a.haspreferreddriver, b.haspreferreddriver);
  swap(a.preferreddriverid, b.preferreddriverid);
  swap(a.hascredit, b.hascredit);
  swap(a.hascreditlimit, b.hascreditlimit);
  swap(a.creditlimit, b.creditlimit);
  swap(a.__isset, b.__isset);
}

const char* CustomerStatistic::ascii_fingerprint = "6A3FF2FF06BF66D6AB8BB7501E6465D2";
const uint8_t CustomerStatistic::binary_fingerprint[16] = {0x6A,0x3F,0xF2,0xFF,0x06,0xBF,0x66,0xD6,0xAB,0x8B,0xB7,0x50,0x1E,0x64,0x65,0xD2};

uint32_t CustomerStatistic::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->currentbalance);
          this->__isset.currentbalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->usagemonth.clear();
            uint32_t _size122;
            ::apache::thrift::protocol::TType _ktype123;
            ::apache::thrift::protocol::TType _vtype124;
            xfer += iprot->readMapBegin(_ktype123, _vtype124, _size122);
            uint32_t _i126;
            for (_i126 = 0; _i126 < _size122; ++_i126)
            {
              Month::type _key127;
              int32_t ecast129;
              xfer += iprot->readI32(ecast129);
              _key127 = (Month::type)ecast129;
              PassengerUsage& _val128 = this->usagemonth[_key127];
              xfer += _val128.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.usagemonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->usageyear.clear();
            uint32_t _size130;
            ::apache::thrift::protocol::TType _ktype131;
            ::apache::thrift::protocol::TType _vtype132;
            xfer += iprot->readMapBegin(_ktype131, _vtype132, _size130);
            uint32_t _i134;
            for (_i134 = 0; _i134 < _size130; ++_i134)
            {
              NUMBER32 _key135;
              xfer += iprot->readI32(_key135);
              PassengerUsage& _val136 = this->usageyear[_key135];
              xfer += _val136.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.usageyear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CustomerStatistic::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CustomerStatistic");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentbalance", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->currentbalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usagemonth", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->usagemonth.size()));
    std::map<Month::type, PassengerUsage> ::const_iterator _iter137;
    for (_iter137 = this->usagemonth.begin(); _iter137 != this->usagemonth.end(); ++_iter137)
    {
      xfer += oprot->writeI32((int32_t)_iter137->first);
      xfer += _iter137->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usageyear", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->usageyear.size()));
    std::map<NUMBER32, PassengerUsage> ::const_iterator _iter138;
    for (_iter138 = this->usageyear.begin(); _iter138 != this->usageyear.end(); ++_iter138)
    {
      xfer += oprot->writeI32(_iter138->first);
      xfer += _iter138->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CustomerStatistic &a, CustomerStatistic &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.customerid, b.customerid);
  swap(a.tag, b.tag);
  swap(a.enabled, b.enabled);
  swap(a.currentbalance, b.currentbalance);
  swap(a.usagemonth, b.usagemonth);
  swap(a.usageyear, b.usageyear);
  swap(a.__isset, b.__isset);
}

const char* Passenger::ascii_fingerprint = "E98402372B6E55C03BA3D61157E6AFC2";
const uint8_t Passenger::binary_fingerprint[16] = {0xE9,0x84,0x02,0x37,0x2B,0x6E,0x55,0xC0,0x3B,0xA3,0xD6,0x11,0x57,0xE6,0xAF,0xC2};

uint32_t Passenger::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isoperator);
          this->__isset.isoperator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isvip);
          this->__isset.isvip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast139;
          xfer += iprot->readI32(ecast139);
          this->status = (EmployeeStatus::type)ecast139;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->person.read(iprot);
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast140;
          xfer += iprot->readI32(ecast140);
          this->canorder = (CanOrder::type)ecast140;
          this->__isset.canorder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->limitmonth.clear();
            uint32_t _size141;
            ::apache::thrift::protocol::TType _ktype142;
            ::apache::thrift::protocol::TType _vtype143;
            xfer += iprot->readMapBegin(_ktype142, _vtype143, _size141);
            uint32_t _i145;
            for (_i145 = 0; _i145 < _size141; ++_i145)
            {
              Month::type _key146;
              int32_t ecast148;
              xfer += iprot->readI32(ecast148);
              _key146 = (Month::type)ecast148;
              PassengerLimit& _val147 = this->limitmonth[_key146];
              xfer += _val147.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.limitmonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->usagemonth.clear();
            uint32_t _size149;
            ::apache::thrift::protocol::TType _ktype150;
            ::apache::thrift::protocol::TType _vtype151;
            xfer += iprot->readMapBegin(_ktype150, _vtype151, _size149);
            uint32_t _i153;
            for (_i153 = 0; _i153 < _size149; ++_i153)
            {
              Month::type _key154;
              int32_t ecast156;
              xfer += iprot->readI32(ecast156);
              _key154 = (Month::type)ecast156;
              PassengerUsage& _val155 = this->usagemonth[_key154];
              xfer += _val155.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.usagemonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Passenger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Passenger");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isoperator", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isoperator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isvip", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->isvip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->person.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canorder", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->canorder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("limitmonth", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->limitmonth.size()));
    std::map<Month::type, PassengerLimit> ::const_iterator _iter157;
    for (_iter157 = this->limitmonth.begin(); _iter157 != this->limitmonth.end(); ++_iter157)
    {
      xfer += oprot->writeI32((int32_t)_iter157->first);
      xfer += _iter157->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usagemonth", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->usagemonth.size()));
    std::map<Month::type, PassengerUsage> ::const_iterator _iter158;
    for (_iter158 = this->usagemonth.begin(); _iter158 != this->usagemonth.end(); ++_iter158)
    {
      xfer += oprot->writeI32((int32_t)_iter158->first);
      xfer += _iter158->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Passenger &a, Passenger &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.customerid, b.customerid);
  swap(a.tag, b.tag);
  swap(a.isoperator, b.isoperator);
  swap(a.isvip, b.isvip);
  swap(a.status, b.status);
  swap(a.person, b.person);
  swap(a.canorder, b.canorder);
  swap(a.limitmonth, b.limitmonth);
  swap(a.usagemonth, b.usagemonth);
  swap(a.__isset, b.__isset);
}

const char* Vehicle::ascii_fingerprint = "529D5AB19CB951DE81DB3B0A4DE5AD9E";
const uint8_t Vehicle::binary_fingerprint[16] = {0x52,0x9D,0x5A,0xB1,0x9C,0xB9,0x51,0xDE,0x81,0xDB,0x3B,0x0A,0x4D,0xE5,0xAD,0x9E};

uint32_t Vehicle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast159;
          xfer += iprot->readI32(ecast159);
          this->vehicletype = (VehicleType::type)ecast159;
          this->__isset.vehicletype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast160;
          xfer += iprot->readI32(ecast160);
          this->vehiclecategory = (VehicleCategory::type)ecast160;
          this->__isset.vehiclecategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast161;
          xfer += iprot->readI32(ecast161);
          this->vehicleclass = (VehicleClass::type)ecast161;
          this->__isset.vehicleclass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast162;
          xfer += iprot->readI32(ecast162);
          this->vehiclestatus = (VehicleStatus::type)ecast162;
          this->__isset.vehiclestatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vehiclebrandid);
          this->__isset.vehiclebrandid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vehiclemodel);
          this->__isset.vehiclemodel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plate);
          this->__isset.plate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->platenumber);
          this->__isset.platenumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->technicalcondition);
          this->__isset.technicalcondition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->passengercount);
          this->__isset.passengercount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->childseat);
          this->__isset.childseat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->checkers);
          this->__isset.checkers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->stickers);
          this->__isset.stickers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lantern);
          this->__isset.lantern = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photo);
          this->__isset.photo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vin);
          this->__isset.vin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vehicle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Vehicle");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicletype", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->vehicletype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclecategory", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->vehiclecategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleclass", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->vehicleclass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclestatus", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->vehiclestatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclebrandid", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->vehiclebrandid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclemodel", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->vehiclemodel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->year);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plate", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->plate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platenumber", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->platenumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("technicalcondition", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->technicalcondition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengercount", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->passengercount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childseat", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->childseat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkers", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->checkers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickers", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->stickers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lantern", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->lantern);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("photo", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->photo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vin", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->vin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Vehicle &a, Vehicle &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.vehicletype, b.vehicletype);
  swap(a.vehiclecategory, b.vehiclecategory);
  swap(a.vehicleclass, b.vehicleclass);
  swap(a.vehiclestatus, b.vehiclestatus);
  swap(a.vehiclebrandid, b.vehiclebrandid);
  swap(a.vehiclemodel, b.vehiclemodel);
  swap(a.color, b.color);
  swap(a.year, b.year);
  swap(a.plate, b.plate);
  swap(a.platenumber, b.platenumber);
  swap(a.technicalcondition, b.technicalcondition);
  swap(a.passengercount, b.passengercount);
  swap(a.childseat, b.childseat);
  swap(a.checkers, b.checkers);
  swap(a.stickers, b.stickers);
  swap(a.lantern, b.lantern);
  swap(a.photo, b.photo);
  swap(a.vin, b.vin);
  swap(a.__isset, b.__isset);
}

const char* Document::ascii_fingerprint = "030F9860BF6DA7CBB4ED66E5DC14E7C5";
const uint8_t Document::binary_fingerprint[16] = {0x03,0x0F,0x98,0x60,0xBF,0x6D,0xA7,0xCB,0xB4,0xED,0x66,0xE5,0xDC,0x14,0xE7,0xC5};

uint32_t Document::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ser);
          this->__isset.ser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->issuer);
          this->__isset.issuer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->issued);
          this->__isset.issued = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validity);
          this->__isset.validity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->expirience);
          this->__isset.expirience = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Document::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Document");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ser", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("issuer", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->issuer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("issued", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->issued);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validity", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->validity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expirience", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->expirience);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Document &a, Document &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.ser, b.ser);
  swap(a.number, b.number);
  swap(a.issuer, b.issuer);
  swap(a.issued, b.issued);
  swap(a.validity, b.validity);
  swap(a.category, b.category);
  swap(a.expirience, b.expirience);
  swap(a.__isset, b.__isset);
}

const char* Manager::ascii_fingerprint = "B7D7482E144326613E7C934CED8C3FC2";
const uint8_t Manager::binary_fingerprint[16] = {0xB7,0xD7,0x48,0x2E,0x14,0x43,0x26,0x61,0x3E,0x7C,0x93,0x4C,0xED,0x8C,0x3F,0xC2};

uint32_t Manager::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size163;
            ::apache::thrift::protocol::TType _ktype164;
            ::apache::thrift::protocol::TType _vtype165;
            xfer += iprot->readMapBegin(_ktype164, _vtype165, _size163);
            uint32_t _i167;
            for (_i167 = 0; _i167 < _size163; ++_i167)
            {
              TaxiServiceRole::type _key168;
              int32_t ecast170;
              xfer += iprot->readI32(ecast170);
              _key168 = (TaxiServiceRole::type)ecast170;
              OrgServiceid& _val169 = this->svc[_key168];
              xfer += iprot->readI64(_val169);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast171;
          xfer += iprot->readI32(ecast171);
          this->status = (EmployeeStatus::type)ecast171;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->person.read(iprot);
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->license.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _ktype173;
            ::apache::thrift::protocol::TType _vtype174;
            xfer += iprot->readMapBegin(_ktype173, _vtype174, _size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              DocumentType::type _key177;
              int32_t ecast179;
              xfer += iprot->readI32(ecast179);
              _key177 = (DocumentType::type)ecast179;
              Documentid& _val178 = this->license[_key177];
              xfer += iprot->readI64(_val178);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.license = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isadmin);
          this->__isset.isadmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Manager::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Manager");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter180;
    for (_iter180 = this->svc.begin(); _iter180 != this->svc.end(); ++_iter180)
    {
      xfer += oprot->writeI32((int32_t)_iter180->first);
      xfer += oprot->writeI64(_iter180->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->person.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("license", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->license.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter181;
    for (_iter181 = this->license.begin(); _iter181 != this->license.end(); ++_iter181)
    {
      xfer += oprot->writeI32((int32_t)_iter181->first);
      xfer += oprot->writeI64(_iter181->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isadmin", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->isadmin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Manager &a, Manager &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.svc, b.svc);
  swap(a.status, b.status);
  swap(a.person, b.person);
  swap(a.license, b.license);
  swap(a.nickname, b.nickname);
  swap(a.online, b.online);
  swap(a.isadmin, b.isadmin);
  swap(a.__isset, b.__isset);
}

const char* Driver::ascii_fingerprint = "72B5CF832BE537B6085D76F835E22C64";
const uint8_t Driver::binary_fingerprint[16] = {0x72,0xB5,0xCF,0x83,0x2B,0xE5,0x37,0xB6,0x08,0x5D,0x76,0xF8,0x35,0xE2,0x2C,0x64};

uint32_t Driver::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size182;
            ::apache::thrift::protocol::TType _ktype183;
            ::apache::thrift::protocol::TType _vtype184;
            xfer += iprot->readMapBegin(_ktype183, _vtype184, _size182);
            uint32_t _i186;
            for (_i186 = 0; _i186 < _size182; ++_i186)
            {
              TaxiServiceRole::type _key187;
              int32_t ecast189;
              xfer += iprot->readI32(ecast189);
              _key187 = (TaxiServiceRole::type)ecast189;
              OrgServiceid& _val188 = this->svc[_key187];
              xfer += iprot->readI64(_val188);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geolocation.read(iprot);
          this->__isset.geolocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->updated);
          this->__isset.updated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast190;
          xfer += iprot->readI32(ecast190);
          this->status = (EmployeeStatus::type)ecast190;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->person.read(iprot);
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->license.clear();
            uint32_t _size191;
            ::apache::thrift::protocol::TType _ktype192;
            ::apache::thrift::protocol::TType _vtype193;
            xfer += iprot->readMapBegin(_ktype192, _vtype193, _size191);
            uint32_t _i195;
            for (_i195 = 0; _i195 < _size191; ++_i195)
            {
              DocumentType::type _key196;
              int32_t ecast198;
              xfer += iprot->readI32(ecast198);
              _key196 = (DocumentType::type)ecast198;
              Documentid& _val197 = this->license[_key196];
              xfer += iprot->readI64(_val197);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.license = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->callsign);
          this->__isset.callsign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast199;
          xfer += iprot->readI32(ecast199);
          this->cabclass = (CabClass::type)ecast199;
          this->__isset.cabclass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rating);
          this->__isset.rating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ismaster);
          this->__isset.ismaster = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vehicleids.clear();
            uint32_t _size200;
            ::apache::thrift::protocol::TType _etype203;
            xfer += iprot->readListBegin(_etype203, _size200);
            this->vehicleids.resize(_size200);
            uint32_t _i204;
            for (_i204 = 0; _i204 < _size200; ++_i204)
            {
              xfer += iprot->readI64(this->vehicleids[_i204]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vehicleids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Driver::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Driver");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter205;
    for (_iter205 = this->svc.begin(); _iter205 != this->svc.end(); ++_iter205)
    {
      xfer += oprot->writeI32((int32_t)_iter205->first);
      xfer += oprot->writeI64(_iter205->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geolocation", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->geolocation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("updated", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->updated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->person.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("license", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->license.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter206;
    for (_iter206 = this->license.begin(); _iter206 != this->license.end(); ++_iter206)
    {
      xfer += oprot->writeI32((int32_t)_iter206->first);
      xfer += oprot->writeI64(_iter206->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callsign", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->callsign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cabclass", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32((int32_t)this->cabclass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rating", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->rating);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ismaster", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->ismaster);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleids", ::apache::thrift::protocol::T_LIST, 16);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->vehicleids.size()));
    std::vector<Vehicleid> ::const_iterator _iter207;
    for (_iter207 = this->vehicleids.begin(); _iter207 != this->vehicleids.end(); ++_iter207)
    {
      xfer += oprot->writeI64((*_iter207));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Driver &a, Driver &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.svc, b.svc);
  swap(a.geolocation, b.geolocation);
  swap(a.updated, b.updated);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.status, b.status);
  swap(a.person, b.person);
  swap(a.license, b.license);
  swap(a.nickname, b.nickname);
  swap(a.callsign, b.callsign);
  swap(a.cabclass, b.cabclass);
  swap(a.rating, b.rating);
  swap(a.online, b.online);
  swap(a.ismaster, b.ismaster);
  swap(a.vehicleids, b.vehicleids);
  swap(a.__isset, b.__isset);
}

const char* DriverOnline::ascii_fingerprint = "4BE74BEBDA7C66F60B478AC4F511ACFD";
const uint8_t DriverOnline::binary_fingerprint[16] = {0x4B,0xE7,0x4B,0xEB,0xDA,0x7C,0x66,0xF6,0x0B,0x47,0x8A,0xC4,0xF5,0x11,0xAC,0xFD};

uint32_t DriverOnline::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->geolocation.read(iprot);
          this->__isset.geolocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DriverOnline::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DriverOnline");

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geolocation", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->geolocation.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DriverOnline &a, DriverOnline &b) {
  using ::std::swap;
  swap(a.driverid, b.driverid);
  swap(a.geolocation, b.geolocation);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.__isset, b.__isset);
}

const char* Dispatcher::ascii_fingerprint = "747CBE9A1F50E8316A0693AF697D6B3F";
const uint8_t Dispatcher::binary_fingerprint[16] = {0x74,0x7C,0xBE,0x9A,0x1F,0x50,0xE8,0x31,0x6A,0x06,0x93,0xAF,0x69,0x7D,0x6B,0x3F};

uint32_t Dispatcher::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size208;
            ::apache::thrift::protocol::TType _ktype209;
            ::apache::thrift::protocol::TType _vtype210;
            xfer += iprot->readMapBegin(_ktype209, _vtype210, _size208);
            uint32_t _i212;
            for (_i212 = 0; _i212 < _size208; ++_i212)
            {
              TaxiServiceRole::type _key213;
              int32_t ecast215;
              xfer += iprot->readI32(ecast215);
              _key213 = (TaxiServiceRole::type)ecast215;
              OrgServiceid& _val214 = this->svc[_key213];
              xfer += iprot->readI64(_val214);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast216;
          xfer += iprot->readI32(ecast216);
          this->status = (EmployeeStatus::type)ecast216;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->person.read(iprot);
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->license.clear();
            uint32_t _size217;
            ::apache::thrift::protocol::TType _ktype218;
            ::apache::thrift::protocol::TType _vtype219;
            xfer += iprot->readMapBegin(_ktype218, _vtype219, _size217);
            uint32_t _i221;
            for (_i221 = 0; _i221 < _size217; ++_i221)
            {
              DocumentType::type _key222;
              int32_t ecast224;
              xfer += iprot->readI32(ecast224);
              _key222 = (DocumentType::type)ecast224;
              Documentid& _val223 = this->license[_key222];
              xfer += iprot->readI64(_val223);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.license = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dispatcher::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Dispatcher");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter225;
    for (_iter225 = this->svc.begin(); _iter225 != this->svc.end(); ++_iter225)
    {
      xfer += oprot->writeI32((int32_t)_iter225->first);
      xfer += oprot->writeI64(_iter225->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->person.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("license", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->license.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter226;
    for (_iter226 = this->license.begin(); _iter226 != this->license.end(); ++_iter226)
    {
      xfer += oprot->writeI32((int32_t)_iter226->first);
      xfer += oprot->writeI64(_iter226->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dispatcher &a, Dispatcher &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.svc, b.svc);
  swap(a.status, b.status);
  swap(a.person, b.person);
  swap(a.license, b.license);
  swap(a.nickname, b.nickname);
  swap(a.online, b.online);
  swap(a.__isset, b.__isset);
}

const char* ServiceOrderStop::ascii_fingerprint = "391C5DBB859D6635C569D441D94DA0EB";
const uint8_t ServiceOrderStop::binary_fingerprint[16] = {0x39,0x1C,0x5D,0xBB,0x85,0x9D,0x66,0x35,0xC5,0x69,0xD4,0x41,0xD9,0x4D,0xA0,0xEB};

uint32_t ServiceOrderStop::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stopno);
          this->__isset.stopno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast227;
          xfer += iprot->readI32(ecast227);
          this->stoptype = (StopType::type)ecast227;
          this->__isset.stoptype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pickuppersons.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _etype231;
            xfer += iprot->readListBegin(_etype231, _size228);
            this->pickuppersons.resize(_size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              xfer += this->pickuppersons[_i232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pickuppersons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast233;
          xfer += iprot->readI32(ecast233);
          this->stage = (OrderStage::type)ecast233;
          this->__isset.stage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->assigned);
          this->__isset.assigned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->arrived);
          this->__isset.arrived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finished);
          this->__isset.finished = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceOrderStop::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceOrderStop");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopno", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->stopno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stoptype", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->stoptype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pickuppersons", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pickuppersons.size()));
    std::vector<Person> ::const_iterator _iter234;
    for (_iter234 = this->pickuppersons.begin(); _iter234 != this->pickuppersons.end(); ++_iter234)
    {
      xfer += (*_iter234).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stage", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->stage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assigned", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->assigned);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arrived", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->arrived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->finished);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceOrderStop &a, ServiceOrderStop &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.stopno, b.stopno);
  swap(a.stoptype, b.stoptype);
  swap(a.pickuppersons, b.pickuppersons);
  swap(a.payload, b.payload);
  swap(a.stage, b.stage);
  swap(a.created, b.created);
  swap(a.assigned, b.assigned);
  swap(a.started, b.started);
  swap(a.arrived, b.arrived);
  swap(a.finished, b.finished);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* ServiceOrder::ascii_fingerprint = "5CA42CDC3AF34B052A209496846E1365";
const uint8_t ServiceOrder::binary_fingerprint[16] = {0x5C,0xA4,0x2C,0xDC,0x3A,0xF3,0x4B,0x05,0x2A,0x20,0x94,0x96,0x84,0x6E,0x13,0x65};

uint32_t ServiceOrder::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast235;
          xfer += iprot->readI32(ecast235);
          this->ordertype = (OrderType::type)ecast235;
          this->__isset.ordertype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast236;
          xfer += iprot->readI32(ecast236);
          this->ordertimetype = (OrderTimeType::type)ecast236;
          this->__isset.ordertimetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->orderfeatures.clear();
            uint32_t _size237;
            ::apache::thrift::protocol::TType _etype240;
            xfer += iprot->readSetBegin(_etype240, _size237);
            uint32_t _i241;
            for (_i241 = 0; _i241 < _size237; ++_i241)
            {
              OrderFeature::type _elem242;
              int32_t ecast243;
              xfer += iprot->readI32(ecast243);
              _elem242 = (OrderFeature::type)ecast243;
              this->orderfeatures.insert(_elem242);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.orderfeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size244;
            ::apache::thrift::protocol::TType _ktype245;
            ::apache::thrift::protocol::TType _vtype246;
            xfer += iprot->readMapBegin(_ktype245, _vtype246, _size244);
            uint32_t _i248;
            for (_i248 = 0; _i248 < _size244; ++_i248)
            {
              TaxiServiceRole::type _key249;
              int32_t ecast251;
              xfer += iprot->readI32(ecast251);
              _key249 = (TaxiServiceRole::type)ecast251;
              OrgServiceid& _val250 = this->svc[_key249];
              xfer += iprot->readI64(_val250);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dispatcherid);
          this->__isset.dispatcherid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->passengerid);
          this->__isset.passengerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduleid);
          this->__isset.sheduleid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->passengers.clear();
            uint32_t _size252;
            ::apache::thrift::protocol::TType _etype255;
            xfer += iprot->readListBegin(_etype255, _size252);
            this->passengers.resize(_size252);
            uint32_t _i256;
            for (_i256 = 0; _i256 < _size252; ++_i256)
            {
              xfer += iprot->readI64(this->passengers[_i256]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.passengers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stops.clear();
            uint32_t _size257;
            ::apache::thrift::protocol::TType _etype260;
            xfer += iprot->readListBegin(_etype260, _size257);
            this->stops.resize(_size257);
            uint32_t _i261;
            for (_i261 = 0; _i261 < _size257; ++_i261)
            {
              xfer += iprot->readI64(this->stops[_i261]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast262;
          xfer += iprot->readI32(ecast262);
          this->stage = (OrderStage::type)ecast262;
          this->__isset.stage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->crew.clear();
            uint32_t _size263;
            ::apache::thrift::protocol::TType _ktype264;
            ::apache::thrift::protocol::TType _vtype265;
            xfer += iprot->readMapBegin(_ktype264, _vtype265, _size263);
            uint32_t _i267;
            for (_i267 = 0; _i267 < _size263; ++_i267)
            {
              CrewRole::type _key268;
              int32_t ecast270;
              xfer += iprot->readI32(ecast270);
              _key268 = (CrewRole::type)ecast270;
              Driverid& _val269 = this->crew[_key268];
              xfer += iprot->readI64(_val269);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.crew = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduletime);
          this->__isset.sheduletime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->assigned);
          this->__isset.assigned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->arrived);
          this->__isset.arrived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finished);
          this->__isset.finished = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->locstart.read(iprot);
          this->__isset.locstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->locfinish.read(iprot);
          this->__isset.locfinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preferreddriverid);
          this->__isset.preferreddriverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totaltimefiscal);
          this->__isset.totaltimefiscal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totaltimeactual);
          this->__isset.totaltimeactual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumfiscal);
          this->__isset.sumfiscal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumactual);
          this->__isset.sumactual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast271;
          xfer += iprot->readI32(ecast271);
          this->cabclass = (CabClass::type)ecast271;
          this->__isset.cabclass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast272;
          xfer += iprot->readI32(ecast272);
          this->paymentstate = (PaymentState::type)ecast272;
          this->__isset.paymentstate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast273;
          xfer += iprot->readI32(ecast273);
          this->claimstate = (ClaimState::type)ecast273;
          this->__isset.claimstate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasstops);
          this->__isset.hasstops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceOrder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceOrder");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordertype", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->ordertype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordertimetype", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->ordertimetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderfeatures", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->orderfeatures.size()));
    std::set<OrderFeature::type> ::const_iterator _iter274;
    for (_iter274 = this->orderfeatures.begin(); _iter274 != this->orderfeatures.end(); ++_iter274)
    {
      xfer += oprot->writeI32((int32_t)(*_iter274));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter275;
    for (_iter275 = this->svc.begin(); _iter275 != this->svc.end(); ++_iter275)
    {
      xfer += oprot->writeI32((int32_t)_iter275->first);
      xfer += oprot->writeI64(_iter275->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dispatcherid", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->dispatcherid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengerid", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->passengerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduleid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->sheduleid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengers", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->passengers.size()));
    std::vector<Passengerid> ::const_iterator _iter276;
    for (_iter276 = this->passengers.begin(); _iter276 != this->passengers.end(); ++_iter276)
    {
      xfer += oprot->writeI64((*_iter276));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stops", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->stops.size()));
    std::vector<ServiceOrderStopid> ::const_iterator _iter277;
    for (_iter277 = this->stops.begin(); _iter277 != this->stops.end(); ++_iter277)
    {
      xfer += oprot->writeI64((*_iter277));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stage", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32((int32_t)this->stage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crew", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->crew.size()));
    std::map<CrewRole::type, Driverid> ::const_iterator _iter278;
    for (_iter278 = this->crew.begin(); _iter278 != this->crew.end(); ++_iter278)
    {
      xfer += oprot->writeI32((int32_t)_iter278->first);
      xfer += oprot->writeI64(_iter278->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduletime", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->sheduletime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assigned", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->assigned);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arrived", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->arrived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished", ::apache::thrift::protocol::T_I64, 21);
  xfer += oprot->writeI64(this->finished);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locstart", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->locstart.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locfinish", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->locfinish.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferreddriverid", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->preferreddriverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totaltimefiscal", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->totaltimefiscal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totaltimeactual", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->totaltimeactual);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumfiscal", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->sumfiscal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumactual", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->sumactual);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cabclass", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32((int32_t)this->cabclass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paymentstate", ::apache::thrift::protocol::T_I32, 30);
  xfer += oprot->writeI32((int32_t)this->paymentstate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("claimstate", ::apache::thrift::protocol::T_I32, 31);
  xfer += oprot->writeI32((int32_t)this->claimstate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasstops", ::apache::thrift::protocol::T_BOOL, 32);
  xfer += oprot->writeBool(this->hasstops);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceOrder &a, ServiceOrder &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.tag, b.tag);
  swap(a.ordertype, b.ordertype);
  swap(a.ordertimetype, b.ordertimetype);
  swap(a.orderfeatures, b.orderfeatures);
  swap(a.svc, b.svc);
  swap(a.dispatcherid, b.dispatcherid);
  swap(a.passengerid, b.passengerid);
  swap(a.sheduleid, b.sheduleid);
  swap(a.passengers, b.passengers);
  swap(a.stops, b.stops);
  swap(a.payload, b.payload);
  swap(a.stage, b.stage);
  swap(a.crew, b.crew);
  swap(a.created, b.created);
  swap(a.sheduletime, b.sheduletime);
  swap(a.assigned, b.assigned);
  swap(a.started, b.started);
  swap(a.arrived, b.arrived);
  swap(a.finished, b.finished);
  swap(a.locstart, b.locstart);
  swap(a.locfinish, b.locfinish);
  swap(a.preferreddriverid, b.preferreddriverid);
  swap(a.totaltimefiscal, b.totaltimefiscal);
  swap(a.totaltimeactual, b.totaltimeactual);
  swap(a.sumfiscal, b.sumfiscal);
  swap(a.sumactual, b.sumactual);
  swap(a.cabclass, b.cabclass);
  swap(a.paymentstate, b.paymentstate);
  swap(a.claimstate, b.claimstate);
  swap(a.hasstops, b.hasstops);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* ServiceOrderDecline::ascii_fingerprint = "5BC9B99EA481D3519FBE8AA202B01F9E";
const uint8_t ServiceOrderDecline::binary_fingerprint[16] = {0x5B,0xC9,0xB9,0x9E,0xA4,0x81,0xD3,0x51,0x9F,0xBE,0x8A,0xA2,0x02,0xB0,0x1F,0x9E};

uint32_t ServiceOrderDecline::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->declinetime);
          this->__isset.declinetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast279;
          xfer += iprot->readI32(ecast279);
          this->cause = (DeclineOrderCause::type)ecast279;
          this->__isset.cause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceOrderDecline::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceOrderDecline");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("declinetime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->declinetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cause", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->cause);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceOrderDecline &a, ServiceOrderDecline &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.declinetime, b.declinetime);
  swap(a.driverid, b.driverid);
  swap(a.cause, b.cause);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* Claim::ascii_fingerprint = "06C27127ED88B5CC24A1B92200F50BC2";
const uint8_t Claim::binary_fingerprint[16] = {0x06,0xC2,0x71,0x27,0xED,0x88,0xB5,0xCC,0x24,0xA1,0xB9,0x22,0x00,0xF5,0x0B,0xC2};

uint32_t Claim::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast280;
          xfer += iprot->readI32(ecast280);
          this->personrole = (PersonRole::type)ecast280;
          this->__isset.personrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->claimtime);
          this->__isset.claimtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Claim::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Claim");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personrole", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->personrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("claimtime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->claimtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Claim &a, Claim &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.personrole, b.personrole);
  swap(a.driverid, b.driverid);
  swap(a.claimtime, b.claimtime);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* Track::ascii_fingerprint = "8F4A1B4B5D9589830265885F094FB12C";
const uint8_t Track::binary_fingerprint[16] = {0x8F,0x4A,0x1B,0x4B,0x5D,0x95,0x89,0x83,0x02,0x65,0x88,0x5F,0x09,0x4F,0xB1,0x2C};

uint32_t Track::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tracktime);
          this->__isset.tracktime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Track::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Track");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tracktime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->tracktime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Track &a, Track &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.driverid, b.driverid);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.tracktime, b.tracktime);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

const char* SheduleDays::ascii_fingerprint = "ECB523BA8415F2971A85590A45B62180";
const uint8_t SheduleDays::binary_fingerprint[16] = {0xEC,0xB5,0x23,0xBA,0x84,0x15,0xF2,0x97,0x1A,0x85,0x59,0x0A,0x45,0xB6,0x21,0x80};

uint32_t SheduleDays::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week0);
          this->__isset.week0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week1);
          this->__isset.week1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week2);
          this->__isset.week2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week3);
          this->__isset.week3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week4);
          this->__isset.week4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week5);
          this->__isset.week5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week6);
          this->__isset.week6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SheduleDays::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SheduleDays");

  xfer += oprot->writeFieldBegin("week0", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->week0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week1", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->week1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week2", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->week2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week3", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->week3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week4", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->week4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week5", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->week5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week6", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->week6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SheduleDays &a, SheduleDays &b) {
  using ::std::swap;
  swap(a.week0, b.week0);
  swap(a.week1, b.week1);
  swap(a.week2, b.week2);
  swap(a.week3, b.week3);
  swap(a.week4, b.week4);
  swap(a.week5, b.week5);
  swap(a.week6, b.week6);
  swap(a.__isset, b.__isset);
}

const char* Shedule::ascii_fingerprint = "45C62F424401BE32B1AFB0FFFBCB5FDB";
const uint8_t Shedule::binary_fingerprint[16] = {0x45,0xC6,0x2F,0x42,0x44,0x01,0xBE,0x32,0xB1,0xAF,0xB0,0xFF,0xFB,0xCB,0x5F,0xDB};

uint32_t Shedule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sheduledays.read(iprot);
          this->__isset.sheduledays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast281;
          xfer += iprot->readI32(ecast281);
          this->ordertype = (OrderType::type)ecast281;
          this->__isset.ordertype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->orderfeatures.clear();
            uint32_t _size282;
            ::apache::thrift::protocol::TType _etype285;
            xfer += iprot->readSetBegin(_etype285, _size282);
            uint32_t _i286;
            for (_i286 = 0; _i286 < _size282; ++_i286)
            {
              OrderFeature::type _elem287;
              int32_t ecast288;
              xfer += iprot->readI32(ecast288);
              _elem287 = (OrderFeature::type)ecast288;
              this->orderfeatures.insert(_elem287);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.orderfeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pointstart.read(iprot);
          this->__isset.pointstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pointfinish.read(iprot);
          this->__isset.pointfinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasMiddlePoints);
          this->__isset.hasMiddlePoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspassenger);
          this->__isset.haspassenger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->passengerid);
          this->__isset.passengerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->passengers.clear();
            uint32_t _size289;
            ::apache::thrift::protocol::TType _etype292;
            xfer += iprot->readListBegin(_etype292, _size289);
            this->passengers.resize(_size289);
            uint32_t _i293;
            for (_i293 = 0; _i293 < _size289; ++_i293)
            {
              xfer += iprot->readI64(this->passengers[_i293]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.passengers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestart);
          this->__isset.timestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timefinish);
          this->__isset.timefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduleoperatorid);
          this->__isset.sheduleoperatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preferreddriverid);
          this->__isset.preferreddriverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Shedule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Shedule");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduledays", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->sheduledays.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordertype", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32((int32_t)this->ordertype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderfeatures", ::apache::thrift::protocol::T_SET, 9);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->orderfeatures.size()));
    std::set<OrderFeature::type> ::const_iterator _iter294;
    for (_iter294 = this->orderfeatures.begin(); _iter294 != this->orderfeatures.end(); ++_iter294)
    {
      xfer += oprot->writeI32((int32_t)(*_iter294));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointstart", ::apache::thrift::protocol::T_STRUCT, 10);
  xfer += this->pointstart.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointfinish", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->pointfinish.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasMiddlePoints", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->hasMiddlePoints);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspassenger", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->haspassenger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengerid", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->passengerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengers", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->passengers.size()));
    std::vector<Passengerid> ::const_iterator _iter295;
    for (_iter295 = this->passengers.begin(); _iter295 != this->passengers.end(); ++_iter295)
    {
      xfer += oprot->writeI64((*_iter295));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestart", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->timestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timefinish", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->timefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduleoperatorid", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->sheduleoperatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferreddriverid", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->preferreddriverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Shedule &a, Shedule &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.active, b.active);
  swap(a.sheduledays, b.sheduledays);
  swap(a.customerid, b.customerid);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.tag, b.tag);
  swap(a.ordertype, b.ordertype);
  swap(a.orderfeatures, b.orderfeatures);
  swap(a.pointstart, b.pointstart);
  swap(a.pointfinish, b.pointfinish);
  swap(a.hasMiddlePoints, b.hasMiddlePoints);
  swap(a.haspassenger, b.haspassenger);
  swap(a.passengerid, b.passengerid);
  swap(a.passengers, b.passengers);
  swap(a.timestart, b.timestart);
  swap(a.timefinish, b.timefinish);
  swap(a.sheduleoperatorid, b.sheduleoperatorid);
  swap(a.preferreddriverid, b.preferreddriverid);
  swap(a.__isset, b.__isset);
}

const char* DriverBlackList::ascii_fingerprint = "66C8E6F97F0275919D86FEB536251B17";
const uint8_t DriverBlackList::binary_fingerprint[16] = {0x66,0xC8,0xE6,0xF9,0x7F,0x02,0x75,0x91,0x9D,0x86,0xFE,0xB5,0x36,0x25,0x1B,0x17};

uint32_t DriverBlackList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DriverBlackList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DriverBlackList");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DriverBlackList &a, DriverBlackList &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.created, b.created);
  swap(a.customerid, b.customerid);
  swap(a.driverid, b.driverid);
  swap(a.__isset, b.__isset);
}

const char* SheduleStop::ascii_fingerprint = "8244452B6E99B347584697D5F6072E49";
const uint8_t SheduleStop::binary_fingerprint[16] = {0x82,0x44,0x45,0x2B,0x6E,0x99,0xB3,0x47,0x58,0x46,0x97,0xD5,0xF6,0x07,0x2E,0x49};

uint32_t SheduleStop::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduleid);
          this->__isset.sheduleid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->position);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspassenger);
          this->__isset.haspassenger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->passengerid);
          this->__isset.passengerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SheduleStop::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SheduleStop");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduleid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sheduleid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->position);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspassenger", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->haspassenger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengerid", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->passengerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SheduleStop &a, SheduleStop &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.sheduleid, b.sheduleid);
  swap(a.point, b.point);
  swap(a.position, b.position);
  swap(a.haspassenger, b.haspassenger);
  swap(a.passengerid, b.passengerid);
  swap(a.__isset, b.__isset);
}

const char* TariffPlan::ascii_fingerprint = "CA6D95DB1B0AA22C1ECBC7C48D241638";
const uint8_t TariffPlan::binary_fingerprint[16] = {0xCA,0x6D,0x95,0xDB,0x1B,0x0A,0xA2,0x2C,0x1E,0xCB,0xC7,0xC4,0x8D,0x24,0x16,0x38};

uint32_t TariffPlan::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->orgserviceid);
          this->__isset.orgserviceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TariffPlan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TariffPlan");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgserviceid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->orgserviceid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TariffPlan &a, TariffPlan &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgserviceid, b.orgserviceid);
  swap(a.cityid, b.cityid);
  swap(a.name, b.name);
  swap(a.notes, b.notes);
  swap(a.active, b.active);
  swap(a.__isset, b.__isset);
}

const char* Rate::ascii_fingerprint = "B59FCAFA8796B9A33928E7CB12304B0B";
const uint8_t Rate::binary_fingerprint[16] = {0xB5,0x9F,0xCA,0xFA,0x87,0x96,0xB9,0xA3,0x39,0x28,0xE7,0xCB,0x12,0x30,0x4B,0x0B};

uint32_t Rate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tariffplanid);
          this->__isset.tariffplanid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datefinish);
          this->__isset.datefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isweekend);
          this->__isset.isweekend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isday);
          this->__isset.isday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hourstart);
          this->__isset.hourstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hourfinish);
          this->__isset.hourfinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->costmin);
          this->__isset.costmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->priceboarding);
          this->__isset.priceboarding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->priceminute);
          this->__isset.priceminute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pricedelay);
          this->__isset.pricedelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pricewait);
          this->__isset.pricewait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->speedmin);
          this->__isset.speedmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timedelayfree);
          this->__isset.timedelayfree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Rate");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tariffplanid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->tariffplanid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datefinish", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->datefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isweekend", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->isweekend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isday", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hourstart", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->hourstart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hourfinish", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->hourfinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("costmin", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->costmin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceboarding", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->priceboarding);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceminute", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->priceminute);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pricedelay", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->pricedelay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pricewait", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->pricewait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speedmin", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->speedmin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timedelayfree", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->timedelayfree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rate &a, Rate &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tariffplanid, b.tariffplanid);
  swap(a.name, b.name);
  swap(a.active, b.active);
  swap(a.datestart, b.datestart);
  swap(a.datefinish, b.datefinish);
  swap(a.isweekend, b.isweekend);
  swap(a.isday, b.isday);
  swap(a.hourstart, b.hourstart);
  swap(a.hourfinish, b.hourfinish);
  swap(a.costmin, b.costmin);
  swap(a.priceboarding, b.priceboarding);
  swap(a.priceminute, b.priceminute);
  swap(a.pricedelay, b.pricedelay);
  swap(a.pricewait, b.pricewait);
  swap(a.speedmin, b.speedmin);
  swap(a.timedelayfree, b.timedelayfree);
  swap(a.__isset, b.__isset);
}

const char* Notification::ascii_fingerprint = "6DCF553DD2AEB36FD2573F2FDE82F2A7";
const uint8_t Notification::binary_fingerprint[16] = {0x6D,0xCF,0x55,0x3D,0xD2,0xAE,0xB3,0x6F,0xD2,0x57,0x3F,0x2F,0xDE,0x82,0xF2,0xA7};

uint32_t Notification::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isactive);
          this->__isset.isactive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->msgtime);
          this->__isset.msgtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast296;
          xfer += iprot->readI32(ecast296);
          this->msgfrom = (PersonRole::type)ecast296;
          this->__isset.msgfrom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->todriver);
          this->__isset.todriver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tooperator);
          this->__isset.tooperator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->topassenger);
          this->__isset.topassenger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->todispatcher);
          this->__isset.todispatcher = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Notification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Notification");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isactive", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isactive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgtime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->msgtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgfrom", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->msgfrom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("todriver", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->todriver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tooperator", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->tooperator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topassenger", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->topassenger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("todispatcher", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->todispatcher);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Notification &a, Notification &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.isactive, b.isactive);
  swap(a.msgtime, b.msgtime);
  swap(a.msgfrom, b.msgfrom);
  swap(a.driverid, b.driverid);
  swap(a.todriver, b.todriver);
  swap(a.tooperator, b.tooperator);
  swap(a.topassenger, b.topassenger);
  swap(a.todispatcher, b.todispatcher);
  swap(a.note, b.note);
  swap(a.__isset, b.__isset);
}

const char* BillAct::ascii_fingerprint = "54D436AB741A5F55EFB974DB54DA24FE";
const uint8_t BillAct::binary_fingerprint[16] = {0x54,0xD4,0x36,0xAB,0x74,0x1A,0x5F,0x55,0xEF,0xB9,0x74,0xDB,0x54,0xDA,0x24,0xFE};

uint32_t BillAct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orgservice.clear();
            uint32_t _size297;
            ::apache::thrift::protocol::TType _ktype298;
            ::apache::thrift::protocol::TType _vtype299;
            xfer += iprot->readMapBegin(_ktype298, _vtype299, _size297);
            uint32_t _i301;
            for (_i301 = 0; _i301 < _size297; ++_i301)
            {
              TaxiServiceRole::type _key302;
              int32_t ecast304;
              xfer += iprot->readI32(ecast304);
              _key302 = (TaxiServiceRole::type)ecast304;
              OrgServiceid& _val303 = this->orgservice[_key302];
              xfer += iprot->readI64(_val303);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orgservice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->periodid);
          this->__isset.periodid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datefinish);
          this->__isset.datefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->total0);
          this->__isset.total0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->total1);
          this->__isset.total1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->total2);
          this->__isset.total2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->taxpercent);
          this->__isset.taxpercent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tax);
          this->__isset.tax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasdiscount);
          this->__isset.hasdiscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspayments);
          this->__isset.haspayments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->paid);
          this->__isset.paid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datepaid);
          this->__isset.datepaid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumbefore);
          this->__isset.sumbefore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumafter);
          this->__isset.sumafter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->billno);
          this->__isset.billno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actno);
          this->__isset.actno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BillAct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BillAct");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgservice", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->orgservice.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter305;
    for (_iter305 = this->orgservice.begin(); _iter305 != this->orgservice.end(); ++_iter305)
    {
      xfer += oprot->writeI32((int32_t)_iter305->first);
      xfer += oprot->writeI64(_iter305->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("periodid", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->periodid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datefinish", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->datefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total0", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->total0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total1", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->total1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total2", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->total2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taxpercent", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->taxpercent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tax", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->tax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasdiscount", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->hasdiscount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspayments", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->haspayments);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paid", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->paid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datepaid", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->datepaid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumbefore", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->sumbefore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumafter", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->sumafter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("billno", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->billno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actno", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->actno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BillAct &a, BillAct &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgservice, b.orgservice);
  swap(a.customerid, b.customerid);
  swap(a.periodid, b.periodid);
  swap(a.datestart, b.datestart);
  swap(a.datefinish, b.datefinish);
  swap(a.total0, b.total0);
  swap(a.total1, b.total1);
  swap(a.total2, b.total2);
  swap(a.taxpercent, b.taxpercent);
  swap(a.tax, b.tax);
  swap(a.hasdiscount, b.hasdiscount);
  swap(a.created, b.created);
  swap(a.haspayments, b.haspayments);
  swap(a.paid, b.paid);
  swap(a.datepaid, b.datepaid);
  swap(a.sumbefore, b.sumbefore);
  swap(a.sumafter, b.sumafter);
  swap(a.note, b.note);
  swap(a.billno, b.billno);
  swap(a.actno, b.actno);
  swap(a.__isset, b.__isset);
}

const char* Payment::ascii_fingerprint = "1F10CEFCE913A7C7AC1BF57FD21B890E";
const uint8_t Payment::binary_fingerprint[16] = {0x1F,0x10,0xCE,0xFC,0xE9,0x13,0xA7,0xC7,0xAC,0x1B,0xF5,0x7F,0xD2,0x1B,0x89,0x0E};

uint32_t Payment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->billactid);
          this->__isset.billactid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datereceived);
          this->__isset.datereceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->document.clear();
            uint32_t _size306;
            ::apache::thrift::protocol::TType _ktype307;
            ::apache::thrift::protocol::TType _vtype308;
            xfer += iprot->readMapBegin(_ktype307, _vtype308, _size306);
            uint32_t _i310;
            for (_i310 = 0; _i310 < _size306; ++_i310)
            {
              DocumentType::type _key311;
              int32_t ecast313;
              xfer += iprot->readI32(ecast313);
              _key311 = (DocumentType::type)ecast313;
              Documentid& _val312 = this->document[_key311];
              xfer += iprot->readI64(_val312);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.document = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Payment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Payment");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("billactid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->billactid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datereceived", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->datereceived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("document", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->document.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter314;
    for (_iter314 = this->document.begin(); _iter314 != this->document.end(); ++_iter314)
    {
      xfer += oprot->writeI32((int32_t)_iter314->first);
      xfer += oprot->writeI64(_iter314->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Payment &a, Payment &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.billactid, b.billactid);
  swap(a.datereceived, b.datereceived);
  swap(a.document, b.document);
  swap(a.__isset, b.__isset);
}

const char* AutoPayment::ascii_fingerprint = "CA9E086295400ABB4921368555BAB8D5";
const uint8_t AutoPayment::binary_fingerprint[16] = {0xCA,0x9E,0x08,0x62,0x95,0x40,0x0A,0xBB,0x49,0x21,0x36,0x85,0x55,0xBA,0xB8,0xD5};

uint32_t AutoPayment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->periodid);
          this->__isset.periodid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datefinish);
          this->__isset.datefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AutoPayment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AutoPayment");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("periodid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->periodid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datefinish", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->datefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AutoPayment &a, AutoPayment &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.periodid, b.periodid);
  swap(a.datestart, b.datestart);
  swap(a.datefinish, b.datefinish);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

const char* NotificationEvent::ascii_fingerprint = "A7C1E91A1633125B1E1BA9227CC71E38";
const uint8_t NotificationEvent::binary_fingerprint[16] = {0xA7,0xC1,0xE9,0x1A,0x16,0x33,0x12,0x5B,0x1E,0x1B,0xA9,0x22,0x7C,0xC7,0x1E,0x38};

uint32_t NotificationEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast315;
          xfer += iprot->readI32(ecast315);
          this->receiverrole = (PersonRole::type)ecast315;
          this->__isset.receiverrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast316;
          xfer += iprot->readI32(ecast316);
          this->emitterrole = (PersonRole::type)ecast316;
          this->__isset.emitterrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->emitter);
          this->__isset.emitter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast317;
          xfer += iprot->readI32(ecast317);
          this->serviceobject = (ServiceObject::type)ecast317;
          this->__isset.serviceobject = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast318;
          xfer += iprot->readI32(ecast318);
          this->serviceaction = (ServiceAction::type)ecast318;
          this->__isset.serviceaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->infuture);
          this->__isset.infuture = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceobjectid);
          this->__isset.serviceobjectid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->sent);
          this->__isset.sent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sentdate);
          this->__isset.sentdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->gcmsend);
          this->__isset.gcmsend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gcmsent);
          this->__isset.gcmsent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isgcmsentsuccess);
          this->__isset.isgcmsentsuccess = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->isgcmsentdate);
          this->__isset.isgcmsentdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gcmresponsecode);
          this->__isset.gcmresponsecode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->gcmresponse);
          this->__isset.gcmresponse = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotificationEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NotificationEvent");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiverrole", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->receiverrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emitterrole", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->emitterrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("emitter", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->emitter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceobject", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->serviceobject);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceaction", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->serviceaction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("infuture", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->infuture);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceobjectid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->serviceobjectid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sent", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->sent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentdate", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->sentdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gcmsend", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->gcmsend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gcmsent", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->gcmsent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isgcmsentsuccess", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->isgcmsentsuccess);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isgcmsentdate", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->isgcmsentdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gcmresponsecode", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->gcmresponsecode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gcmresponse", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->gcmresponse);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NotificationEvent &a, NotificationEvent &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.receiverrole, b.receiverrole);
  swap(a.phone, b.phone);
  swap(a.emitterrole, b.emitterrole);
  swap(a.emitter, b.emitter);
  swap(a.serviceobject, b.serviceobject);
  swap(a.serviceaction, b.serviceaction);
  swap(a.datestart, b.datestart);
  swap(a.infuture, b.infuture);
  swap(a.serviceobjectid, b.serviceobjectid);
  swap(a.sent, b.sent);
  swap(a.sentdate, b.sentdate);
  swap(a.notes, b.notes);
  swap(a.gcmsend, b.gcmsend);
  swap(a.gcmsent, b.gcmsent);
  swap(a.isgcmsentsuccess, b.isgcmsentsuccess);
  swap(a.isgcmsentdate, b.isgcmsentdate);
  swap(a.gcmresponsecode, b.gcmresponsecode);
  swap(a.gcmresponse, b.gcmresponse);
  swap(a.__isset, b.__isset);
}

const char* ServiceFailure::ascii_fingerprint = "D3BA2D33C1BA9DD4F2FDDA18F1640BC8";
const uint8_t ServiceFailure::binary_fingerprint[16] = {0xD3,0xBA,0x2D,0x33,0xC1,0xBA,0x9D,0xD4,0xF2,0xFD,0xDA,0x18,0xF1,0x64,0x0B,0xC8};

uint32_t ServiceFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast319;
          xfer += iprot->readI32(ecast319);
          this->errortype = (ErrorType::type)ecast319;
          this->__isset.errortype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorcode);
          this->__isset.errorcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceFailure");

  xfer += oprot->writeFieldBegin("errortype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errortype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorcode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->errorcode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceFailure &a, ServiceFailure &b) {
  using ::std::swap;
  swap(a.errortype, b.errortype);
  swap(a.errorcode, b.errorcode);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

} // namespace
