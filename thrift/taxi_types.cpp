/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "taxi_types.h"

#include <algorithm>

namespace taxi {

int _kMonthValues[] = {
  Month::JAN,
  Month::FEB,
  Month::MAR,
  Month::APR,
  Month::MAY,
  Month::JUN,
  Month::JUL,
  Month::AUG,
  Month::SEP,
  Month::OCT,
  Month::NOV,
  Month::DEC
};
const char* _kMonthNames[] = {
  "JAN",
  "FEB",
  "MAR",
  "APR",
  "MAY",
  "JUN",
  "JUL",
  "AUG",
  "SEP",
  "OCT",
  "NOV",
  "DEC"
};
const std::map<int, const char*> _Month_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kMonthValues, _kMonthNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgBuildingValues[] = {
  OrgBuilding::OFFICEMAIN,
  OrgBuilding::FACILITY
};
const char* _kOrgBuildingNames[] = {
  "OFFICEMAIN",
  "FACILITY"
};
const std::map<int, const char*> _OrgBuilding_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrgBuildingValues, _kOrgBuildingNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgServiceDeptValues[] = {
  OrgServiceDept::CUSTOMER,
  OrgServiceDept::DRIVER,
  OrgServiceDept::OTHER
};
const char* _kOrgServiceDeptNames[] = {
  "CUSTOMER",
  "DRIVER",
  "OTHER"
};
const std::map<int, const char*> _OrgServiceDept_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrgServiceDeptValues, _kOrgServiceDeptNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgRoleValues[] = {
  OrgRole::ORGGUEST,
  OrgRole::ORGSERVICE,
  OrgRole::ORGTAXI,
  OrgRole::ORGCUSTOMER,
  OrgRole::ORGBANK,
  OrgRole::ORGPROCESSOR
};
const char* _kOrgRoleNames[] = {
  "ORGGUEST",
  "ORGSERVICE",
  "ORGTAXI",
  "ORGCUSTOMER",
  "ORGBANK",
  "ORGPROCESSOR"
};
const std::map<int, const char*> _OrgRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kOrgRoleValues, _kOrgRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaxiServiceRoleValues[] = {
  TaxiServiceRole::TS_DISPATCH,
  TaxiServiceRole::TS_CARPOOL
};
const char* _kTaxiServiceRoleNames[] = {
  "TS_DISPATCH",
  "TS_CARPOOL"
};
const std::map<int, const char*> _TaxiServiceRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTaxiServiceRoleValues, _kTaxiServiceRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPersonRoleValues[] = {
  PersonRole::REQUEST,
  PersonRole::NOTAUTHORIZED,
  PersonRole::GUEST,
  PersonRole::PASSENGER,
  PersonRole::OPERATOR,
  PersonRole::DRIVER,
  PersonRole::DISPATCHER,
  PersonRole::MANAGER,
  PersonRole::CUSTOMER,
  PersonRole::ADMIN
};
const char* _kPersonRoleNames[] = {
  "REQUEST",
  "NOTAUTHORIZED",
  "GUEST",
  "PASSENGER",
  "OPERATOR",
  "DRIVER",
  "DISPATCHER",
  "MANAGER",
  "CUSTOMER",
  "ADMIN"
};
const std::map<int, const char*> _PersonRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kPersonRoleValues, _kPersonRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgPositionValues[] = {
  OrgPosition::SELFEMP,
  OrgPosition::EMP,
  OrgPosition::CHIEF,
  OrgPosition::ACCT,
  OrgPosition::MGR
};
const char* _kOrgPositionNames[] = {
  "SELFEMP",
  "EMP",
  "CHIEF",
  "ACCT",
  "MGR"
};
const std::map<int, const char*> _OrgPosition_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kOrgPositionValues, _kOrgPositionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderRoleValues[] = {
  OrderRole::ORDER_FOR,
  OrderRole::ORDER_BY
};
const char* _kOrderRoleNames[] = {
  "ORDER_FOR",
  "ORDER_BY"
};
const std::map<int, const char*> _OrderRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderRoleValues, _kOrderRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCrewRoleValues[] = {
  CrewRole::CREW_DRIVER,
  CrewRole::CREW_LOADER
};
const char* _kCrewRoleNames[] = {
  "CREW_DRIVER",
  "CREW_LOADER"
};
const std::map<int, const char*> _CrewRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCrewRoleValues, _kCrewRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgAddressTypeValues[] = {
  OrgAddressType::OA_REPORT,
  OrgAddressType::OA_LEGAL,
  OrgAddressType::OA_REAL
};
const char* _kOrgAddressTypeNames[] = {
  "OA_REPORT",
  "OA_LEGAL",
  "OA_REAL"
};
const std::map<int, const char*> _OrgAddressType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrgAddressTypeValues, _kOrgAddressTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeviceTypeValues[] = {
  DeviceType::UNKNOWN,
  DeviceType::ANDROID,
  DeviceType::IOS,
  DeviceType::JAVAME,
  DeviceType::MOBILEBROWSER,
  DeviceType::DESKTOPBROWSER,
  DeviceType::APPSERVICE
};
const char* _kDeviceTypeNames[] = {
  "UNKNOWN",
  "ANDROID",
  "IOS",
  "JAVAME",
  "MOBILEBROWSER",
  "DESKTOPBROWSER",
  "APPSERVICE"
};
const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kDeviceTypeValues, _kDeviceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kEmployeeStatusValues[] = {
  EmployeeStatus::ACTIVE,
  EmployeeStatus::INACTIVE,
  EmployeeStatus::DELETED
};
const char* _kEmployeeStatusNames[] = {
  "ACTIVE",
  "INACTIVE",
  "DELETED"
};
const std::map<int, const char*> _EmployeeStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kEmployeeStatusValues, _kEmployeeStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleStatusValues[] = {
  VehicleStatus::ACTIVE,
  VehicleStatus::INACTIVE
};
const char* _kVehicleStatusNames[] = {
  "ACTIVE",
  "INACTIVE"
};
const std::map<int, const char*> _VehicleStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kVehicleStatusValues, _kVehicleStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDocumentTypeValues[] = {
  DocumentType::PASSPORT,
  DocumentType::DRIVERLICENSE,
  DocumentType::ACT,
  DocumentType::BILL,
  DocumentType::RECEIPT,
  DocumentType::WAYBILL,
  DocumentType::ENTLICENSE,
  DocumentType::PAYMENTRECEIPT
};
const char* _kDocumentTypeNames[] = {
  "PASSPORT",
  "DRIVERLICENSE",
  "ACT",
  "BILL",
  "RECEIPT",
  "WAYBILL",
  "ENTLICENSE",
  "PAYMENTRECEIPT"
};
const std::map<int, const char*> _DocumentType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kDocumentTypeValues, _kDocumentTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCanOrderValues[] = {
  CanOrder::EVERYTHING,
  CanOrder::NOTHING,
  CanOrder::ONLYROUTE
};
const char* _kCanOrderNames[] = {
  "EVERYTHING",
  "NOTHING",
  "ONLYROUTE"
};
const std::map<int, const char*> _CanOrder_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCanOrderValues, _kCanOrderNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCabClassValues[] = {
  CabClass::ECONOMY,
  CabClass::COMFORT,
  CabClass::PREMIUM
};
const char* _kCabClassNames[] = {
  "ECONOMY",
  "COMFORT",
  "PREMIUM"
};
const std::map<int, const char*> _CabClass_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCabClassValues, _kCabClassNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderTimeTypeValues[] = {
  OrderTimeType::URGENT,
  OrderTimeType::SPECIFIEDTIME,
  OrderTimeType::EVERYDAY
};
const char* _kOrderTimeTypeNames[] = {
  "URGENT",
  "SPECIFIEDTIME",
  "EVERYDAY"
};
const std::map<int, const char*> _OrderTimeType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kOrderTimeTypeValues, _kOrderTimeTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderFeatureValues[] = {
  OrderFeature::CHILDSEAT,
  OrderFeature::LOADER
};
const char* _kOrderFeatureNames[] = {
  "CHILDSEAT",
  "LOADER"
};
const std::map<int, const char*> _OrderFeature_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderFeatureValues, _kOrderFeatureNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderStageValues[] = {
  OrderStage::ORDERACCEPT,
  OrderStage::ORDERDECLINED,
  OrderStage::ORDERASSIGN,
  OrderStage::ORDERASSIGNED,
  OrderStage::ORDERCONFIRMED,
  OrderStage::ORDERDRIVING,
  OrderStage::ORDERWAITING,
  OrderStage::ORDERTRANSPORTING,
  OrderStage::ORDERSTOP,
  OrderStage::ORDERCOMPLETE,
  OrderStage::ORDERCANCELLED,
  OrderStage::ORDERFAILED
};
const char* _kOrderStageNames[] = {
  "ORDERACCEPT",
  "ORDERDECLINED",
  "ORDERASSIGN",
  "ORDERASSIGNED",
  "ORDERCONFIRMED",
  "ORDERDRIVING",
  "ORDERWAITING",
  "ORDERTRANSPORTING",
  "ORDERSTOP",
  "ORDERCOMPLETE",
  "ORDERCANCELLED",
  "ORDERFAILED"
};
const std::map<int, const char*> _OrderStage_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kOrderStageValues, _kOrderStageNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPaymentStateValues[] = {
  PaymentState::READY,
  PaymentState::PAID,
  PaymentState::UNPAID
};
const char* _kPaymentStateNames[] = {
  "READY",
  "PAID",
  "UNPAID"
};
const std::map<int, const char*> _PaymentState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPaymentStateValues, _kPaymentStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kClaimStateValues[] = {
  ClaimState::CLAIMNO,
  ClaimState::CLAIM,
  ClaimState::CLAIMCLOSED
};
const char* _kClaimStateNames[] = {
  "CLAIMNO",
  "CLAIM",
  "CLAIMCLOSED"
};
const std::map<int, const char*> _ClaimState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kClaimStateValues, _kClaimStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTaxTypeValues[] = {
  TaxType::TAXORG,
  TaxType::TAXPERSON,
  TaxType::TAXFARMER,
  TaxType::TAXLAWYER,
  TaxType::TAXNOTARY
};
const char* _kTaxTypeNames[] = {
  "TAXORG",
  "TAXPERSON",
  "TAXFARMER",
  "TAXLAWYER",
  "TAXNOTARY"
};
const std::map<int, const char*> _TaxType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTaxTypeValues, _kTaxTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrgTypeValues[] = {
  OrgType::ORGGOV,
  OrgType::ORGCOMM,
  OrgType::ORGENTERPRISE,
  OrgType::ORGFARMER,
  OrgType::ORGOTHER
};
const char* _kOrgTypeNames[] = {
  "ORGGOV",
  "ORGCOMM",
  "ORGENTERPRISE",
  "ORGFARMER",
  "ORGOTHER"
};
const std::map<int, const char*> _OrgType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kOrgTypeValues, _kOrgTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderTypeValues[] = {
  OrderType::TAXI,
  OrderType::COURIER
};
const char* _kOrderTypeNames[] = {
  "TAXI",
  "COURIER"
};
const std::map<int, const char*> _OrderType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderTypeValues, _kOrderTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleTypeValues[] = {
  VehicleType::CAR,
  VehicleType::COURIER
};
const char* _kVehicleTypeNames[] = {
  "CAR",
  "COURIER"
};
const std::map<int, const char*> _VehicleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kVehicleTypeValues, _kVehicleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleClassValues[] = {
  VehicleClass::VEHICLE_SMALL1,
  VehicleClass::VEHICLE_SMALL2,
  VehicleClass::VEHICLE_MIDDLE1,
  VehicleClass::VEHICLE_MIDDLE2,
  VehicleClass::VEHICLE_MIDDLE3,
  VehicleClass::VEHICLE_SUPER,
  VehicleClass::VEHICLE_CROSS,
  VehicleClass::VEHICLE_VAN,
  VehicleClass::VEHICLE_COUPE
};
const char* _kVehicleClassNames[] = {
  "VEHICLE_SMALL1",
  "VEHICLE_SMALL2",
  "VEHICLE_MIDDLE1",
  "VEHICLE_MIDDLE2",
  "VEHICLE_MIDDLE3",
  "VEHICLE_SUPER",
  "VEHICLE_CROSS",
  "VEHICLE_VAN",
  "VEHICLE_COUPE"
};
const std::map<int, const char*> _VehicleClass_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kVehicleClassValues, _kVehicleClassNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kVehicleCategoryValues[] = {
  VehicleCategory::VEHICLE_CAR,
  VehicleCategory::VEHICLE_BIKE,
  VehicleCategory::VEHICLE_SPEC,
  VehicleCategory::VEHICLE_TRAILER,
  VehicleCategory::VEHICLE_TRUCK,
  VehicleCategory::VEHICLE_BUS
};
const char* _kVehicleCategoryNames[] = {
  "VEHICLE_CAR",
  "VEHICLE_BIKE",
  "VEHICLE_SPEC",
  "VEHICLE_TRAILER",
  "VEHICLE_TRUCK",
  "VEHICLE_BUS"
};
const std::map<int, const char*> _VehicleCategory_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kVehicleCategoryValues, _kVehicleCategoryNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStopTypeValues[] = {
  StopType::STOP_WAIT,
  StopType::STOP_PICKUP,
  StopType::STOP_THROW,
  StopType::STOP_LOAD,
  StopType::STOP_UNLOAD
};
const char* _kStopTypeNames[] = {
  "STOP_WAIT",
  "STOP_PICKUP",
  "STOP_THROW",
  "STOP_LOAD",
  "STOP_UNLOAD"
};
const std::map<int, const char*> _StopType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kStopTypeValues, _kStopTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeclineOrderCauseValues[] = {
  DeclineOrderCause::DECLINE_BY_DRIVER,
  DeclineOrderCause::DECLINE_BY_SERVICE,
  DeclineOrderCause::DECLINE_BY_PASSENGER
};
const char* _kDeclineOrderCauseNames[] = {
  "DECLINE_BY_DRIVER",
  "DECLINE_BY_SERVICE",
  "DECLINE_BY_PASSENGER"
};
const std::map<int, const char*> _DeclineOrderCause_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDeclineOrderCauseValues, _kDeclineOrderCauseNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kBankRoleValues[] = {
  BankRole::BANK_ACCOUNT
};
const char* _kBankRoleNames[] = {
  "BANK_ACCOUNT"
};
const std::map<int, const char*> _BankRole_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kBankRoleValues, _kBankRoleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kErrorTypeValues[] = {
  ErrorType::ERR_FATAL,
  ErrorType::ERR_BACKEND,
  ErrorType::ERR_NOT_FOUND,
  ErrorType::ERR_APP,
  ErrorType::ERR_TOKEN_EXPIRED,
  ErrorType::ERR_LOGIN
};
const char* _kErrorTypeNames[] = {
  "ERR_FATAL",
  "ERR_BACKEND",
  "ERR_NOT_FOUND",
  "ERR_APP",
  "ERR_TOKEN_EXPIRED",
  "ERR_LOGIN"
};
const std::map<int, const char*> _ErrorType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kErrorTypeValues, _kErrorTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDictTagValues[] = {
  DictTag::TAG_VEHICLE_COLOR,
  DictTag::TAG_VEHICLE_BRAND,
  DictTag::TAG_VEHICLE_MODEL
};
const char* _kDictTagNames[] = {
  "TAG_VEHICLE_COLOR",
  "TAG_VEHICLE_BRAND",
  "TAG_VEHICLE_MODEL"
};
const std::map<int, const char*> _DictTag_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDictTagValues, _kDictTagNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* RowRange::ascii_fingerprint = "AFAFBCDB9822F9D1AA4E44188E720B47";
const uint8_t RowRange::binary_fingerprint[16] = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

uint32_t RowRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->len);
          this->__isset.len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RowRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RowRange");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("len", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RowRange &a, RowRange &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.len, b.len);
  swap(a.__isset, b.__isset);
}

const char* DateRange::ascii_fingerprint = "F33135321253DAEB67B0E79E416CA831";
const uint8_t DateRange::binary_fingerprint[16] = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

uint32_t DateRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finish);
          this->__isset.finish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DateRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DateRange");

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->finish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DateRange &a, DateRange &b) {
  using ::std::swap;
  swap(a.start, b.start);
  swap(a.finish, b.finish);
  swap(a.__isset, b.__isset);
}

const char* City::ascii_fingerprint = "FBA07522786D76D54E312388051DF258";
const uint8_t City::binary_fingerprint[16] = {0xFB,0xA0,0x75,0x22,0x78,0x6D,0x76,0xD5,0x4E,0x31,0x23,0x88,0x05,0x1D,0xF2,0x58};

uint32_t City::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->areaid);
          this->__isset.areaid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t City::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("City");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("areaid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->areaid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(City &a, City &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.areaid, b.areaid);
  swap(a.tag, b.tag);
  swap(a.name, b.name);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* DictEntry::ascii_fingerprint = "CF5B3C32719FCC1D55CA4013F1B9D877";
const uint8_t DictEntry::binary_fingerprint[16] = {0xCF,0x5B,0x3C,0x32,0x71,0x9F,0xCC,0x1D,0x55,0xCA,0x40,0x13,0xF1,0xB9,0xD8,0x77};

uint32_t DictEntry::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parent);
          this->__isset.parent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->tag = (DictTag::type)ecast0;
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idx);
          this->__isset.idx = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strvalue);
          this->__isset.strvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->intvalue);
          this->__isset.intvalue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DictEntry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DictEntry");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parent", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->parent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idx", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->idx);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("strvalue", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->strvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("intvalue", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->intvalue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DictEntry &a, DictEntry &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.parent, b.parent);
  swap(a.tag, b.tag);
  swap(a.idx, b.idx);
  swap(a.strvalue, b.strvalue);
  swap(a.intvalue, b.intvalue);
  swap(a.__isset, b.__isset);
}

const char* PassengerLimit::ascii_fingerprint = "BE3A22B351B833B7BB1F7D4167460373";
const uint8_t PassengerLimit::binary_fingerprint[16] = {0xBE,0x3A,0x22,0xB3,0x51,0xB8,0x33,0xB7,0xBB,0x1F,0x7D,0x41,0x67,0x46,0x03,0x73};

uint32_t PassengerLimit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tripcount);
          this->__isset.tripcount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minutescount);
          this->__isset.minutescount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->moneycount);
          this->__isset.moneycount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PassengerLimit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PassengerLimit");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tripcount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tripcount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minutescount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minutescount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moneycount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->moneycount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PassengerLimit &a, PassengerLimit &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tripcount, b.tripcount);
  swap(a.minutescount, b.minutescount);
  swap(a.moneycount, b.moneycount);
  swap(a.__isset, b.__isset);
}

const char* Payload::ascii_fingerprint = "458493A9F4060F6499357D68C4F331E2";
const uint8_t Payload::binary_fingerprint[16] = {0x45,0x84,0x93,0xA9,0xF4,0x06,0x0F,0x64,0x99,0x35,0x7D,0x68,0xC4,0xF3,0x31,0xE2};

uint32_t Payload::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->passengercount);
          this->__isset.passengercount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggagecount);
          this->__isset.baggagecount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggageweight);
          this->__isset.baggageweight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggagewidth);
          this->__isset.baggagewidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->baggageheight);
          this->__isset.baggageheight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->papercount);
          this->__isset.papercount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stopcount);
          this->__isset.stopcount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Payload::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Payload");

  xfer += oprot->writeFieldBegin("passengercount", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->passengercount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggagecount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->baggagecount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggageweight", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->baggageweight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggagewidth", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->baggagewidth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baggageheight", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->baggageheight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("papercount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->papercount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopcount", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->stopcount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Payload &a, Payload &b) {
  using ::std::swap;
  swap(a.passengercount, b.passengercount);
  swap(a.baggagecount, b.baggagecount);
  swap(a.baggageweight, b.baggageweight);
  swap(a.baggagewidth, b.baggagewidth);
  swap(a.baggageheight, b.baggageheight);
  swap(a.papercount, b.papercount);
  swap(a.stopcount, b.stopcount);
  swap(a.__isset, b.__isset);
}

const char* PassengerUsage::ascii_fingerprint = "502EEF414E009AF05EE5F2C58C515C77";
const uint8_t PassengerUsage::binary_fingerprint[16] = {0x50,0x2E,0xEF,0x41,0x4E,0x00,0x9A,0xF0,0x5E,0xE5,0xF2,0xC5,0x8C,0x51,0x5C,0x77};

uint32_t PassengerUsage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tripcount);
          this->__isset.tripcount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minutescount);
          this->__isset.minutescount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->moneycount);
          this->__isset.moneycount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PassengerUsage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PassengerUsage");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tripcount", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tripcount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minutescount", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->minutescount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("moneycount", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->moneycount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PassengerUsage &a, PassengerUsage &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tripcount, b.tripcount);
  swap(a.minutescount, b.minutescount);
  swap(a.moneycount, b.moneycount);
  swap(a.payload, b.payload);
  swap(a.__isset, b.__isset);
}

const char* UserDevice::ascii_fingerprint = "E57809942F99C6298227A26403A3F69D";
const uint8_t UserDevice::binary_fingerprint[16] = {0xE5,0x78,0x09,0x94,0x2F,0x99,0xC6,0x29,0x82,0x27,0xA2,0x64,0x03,0xA3,0xF6,0x9D};

uint32_t UserDevice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->devicetype = (DeviceType::type)ecast1;
          this->__isset.devicetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isactive);
          this->__isset.isactive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->model);
          this->__isset.model = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imei);
          this->__isset.imei = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->line1);
          this->__isset.line1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->line2);
          this->__isset.line2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasGSMorCDMA);
          this->__isset.hasGSMorCDMA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasGPS);
          this->__isset.hasGPS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isGPS);
          this->__isset.isGPS = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserDevice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserDevice");

  xfer += oprot->writeFieldBegin("devicetype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->devicetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isactive", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isactive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("model", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->model);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imei", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->imei);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line1", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->line1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line2", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->line2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasGSMorCDMA", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->hasGSMorCDMA);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasGPS", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->hasGPS);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isGPS", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->isGPS);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserDevice &a, UserDevice &b) {
  using ::std::swap;
  swap(a.devicetype, b.devicetype);
  swap(a.isactive, b.isactive);
  swap(a.model, b.model);
  swap(a.imei, b.imei);
  swap(a.line1, b.line1);
  swap(a.line2, b.line2);
  swap(a.hasGSMorCDMA, b.hasGSMorCDMA);
  swap(a.hasGPS, b.hasGPS);
  swap(a.isGPS, b.isGPS);
  swap(a.__isset, b.__isset);
}

const char* Credentials::ascii_fingerprint = "7DC7E75D6971522CCFD03BAA0AA5AE12";
const uint8_t Credentials::binary_fingerprint[16] = {0x7D,0xC7,0xE7,0x5D,0x69,0x71,0x52,0x2C,0xCF,0xD0,0x3B,0xAA,0x0A,0xA5,0xAE,0x12};

uint32_t Credentials::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->personrole = (PersonRole::type)ecast2;
          this->__isset.personrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->islogged);
          this->__isset.islogged = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timelogon);
          this->__isset.timelogon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Credentials::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Credentials");

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personrole", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->personrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("islogged", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->islogged);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timelogon", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->timelogon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Credentials &a, Credentials &b) {
  using ::std::swap;
  swap(a.phone, b.phone);
  swap(a.personrole, b.personrole);
  swap(a.token, b.token);
  swap(a.password, b.password);
  swap(a.islogged, b.islogged);
  swap(a.timelogon, b.timelogon);
  swap(a.__isset, b.__isset);
}

const char* Person::ascii_fingerprint = "182B40AD2588C53124FB85962CE56EC0";
const uint8_t Person::binary_fingerprint[16] = {0x18,0x2B,0x40,0xAD,0x25,0x88,0xC5,0x31,0x24,0xFB,0x85,0x96,0x2C,0xE5,0x6E,0xC0};

uint32_t Person::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->credentials.read(iprot);
          this->__isset.credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->userdevice.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readListBegin(_etype6, _size3);
            this->userdevice.resize(_size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              xfer += this->userdevice[_i7].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.userdevice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstname);
          this->__isset.firstname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastname);
          this->__isset.lastname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->middlename);
          this->__isset.middlename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->prefix);
          this->__isset.prefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->birthdate);
          this->__isset.birthdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deparment);
          this->__isset.deparment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->position);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone1);
          this->__isset.phone1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone2);
          this->__isset.phone2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fax);
          this->__isset.fax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photo);
          this->__isset.photo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Person::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Person");

  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->credentials.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userdevice", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->userdevice.size()));
    std::vector<UserDevice> ::const_iterator _iter8;
    for (_iter8 = this->userdevice.begin(); _iter8 != this->userdevice.end(); ++_iter8)
    {
      xfer += (*_iter8).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("firstname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->firstname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastname", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->lastname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("middlename", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->middlename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prefix", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->prefix);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("birthdate", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->birthdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deparment", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->deparment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->position);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone1", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->phone1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone2", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->phone2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fax", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->fax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("photo", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->photo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Person &a, Person &b) {
  using ::std::swap;
  swap(a.credentials, b.credentials);
  swap(a.userdevice, b.userdevice);
  swap(a.tag, b.tag);
  swap(a.firstname, b.firstname);
  swap(a.lastname, b.lastname);
  swap(a.middlename, b.middlename);
  swap(a.prefix, b.prefix);
  swap(a.birthdate, b.birthdate);
  swap(a.deparment, b.deparment);
  swap(a.position, b.position);
  swap(a.note, b.note);
  swap(a.phone1, b.phone1);
  swap(a.phone2, b.phone2);
  swap(a.fax, b.fax);
  swap(a.email, b.email);
  swap(a.photo, b.photo);
  swap(a.__isset, b.__isset);
}

const char* Bank::ascii_fingerprint = "BC9C141275D96A1BDFC4A1F500B2DCBE";
const uint8_t Bank::binary_fingerprint[16] = {0xBC,0x9C,0x14,0x12,0x75,0xD9,0x6A,0x1B,0xDF,0xC4,0xA1,0xF5,0x00,0xB2,0xDC,0xBE};

uint32_t Bank::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bik);
          this->__isset.bik = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Bank::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Bank");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bik", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->bik);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Bank &a, Bank &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.bik, b.bik);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

const char* GeoLocation::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t GeoLocation::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t GeoLocation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GeoLocation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GeoLocation");

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GeoLocation &a, GeoLocation &b) {
  using ::std::swap;
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.__isset, b.__isset);
}

const char* Location::ascii_fingerprint = "6F34E66C4D0511BF6D9C27F7722E3B11";
const uint8_t Location::binary_fingerprint[16] = {0x6F,0x34,0xE6,0x6C,0x4D,0x05,0x11,0xBF,0x6D,0x9C,0x27,0xF7,0x72,0x2E,0x3B,0x11};

uint32_t Location::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Location::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Location");

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Location &a, Location &b) {
  using ::std::swap;
  swap(a.location, b.location);
  swap(a.name, b.name);
  swap(a.city, b.city);
  swap(a.address, b.address);
  swap(a.__isset, b.__isset);
}

const char* Org::ascii_fingerprint = "3688BFA06FEE4FA0B3047841F968ADAC";
const uint8_t Org::binary_fingerprint[16] = {0x36,0x88,0xBF,0xA0,0x6F,0xEE,0x4F,0xA0,0xB3,0x04,0x78,0x41,0xF9,0x68,0xAD,0xAC};

uint32_t Org::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->orgrole = (OrgRole::type)ecast9;
          this->__isset.orgrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->orgtype = (OrgType::type)ecast10;
          this->__isset.orgtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start);
          this->__isset.start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullname);
          this->__isset.fullname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortname);
          this->__isset.shortname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inn);
          this->__isset.inn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->kpp);
          this->__isset.kpp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ogrn);
          this->__isset.ogrn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orgaddress.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _ktype12;
            ::apache::thrift::protocol::TType _vtype13;
            xfer += iprot->readMapBegin(_ktype12, _vtype13, _size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              OrgAddressType::type _key16;
              int32_t ecast18;
              xfer += iprot->readI32(ecast18);
              _key16 = (OrgAddressType::type)ecast18;
              STR& _val17 = this->orgaddress[_key16];
              xfer += iprot->readString(_val17);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orgaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->employee.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _ktype20;
            ::apache::thrift::protocol::TType _vtype21;
            xfer += iprot->readMapBegin(_ktype20, _vtype21, _size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              OrgPosition::type _key24;
              int32_t ecast26;
              xfer += iprot->readI32(ecast26);
              _key24 = (OrgPosition::type)ecast26;
              Person& _val25 = this->employee[_key24];
              xfer += _val25.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.employee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bank.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _ktype28;
            ::apache::thrift::protocol::TType _vtype29;
            xfer += iprot->readMapBegin(_ktype28, _vtype29, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              BankRole::type _key32;
              int32_t ecast34;
              xfer += iprot->readI32(ecast34);
              _key32 = (BankRole::type)ecast34;
              Bankid& _val33 = this->bank[_key32];
              xfer += iprot->readI64(_val33);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.bank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currentaccount);
          this->__isset.currentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->correspondentaccount);
          this->__isset.correspondentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orglocation.clear();
            uint32_t _size35;
            ::apache::thrift::protocol::TType _ktype36;
            ::apache::thrift::protocol::TType _vtype37;
            xfer += iprot->readMapBegin(_ktype36, _vtype37, _size35);
            uint32_t _i39;
            for (_i39 = 0; _i39 < _size35; ++_i39)
            {
              OrgBuilding::type _key40;
              int32_t ecast42;
              xfer += iprot->readI32(ecast42);
              _key40 = (OrgBuilding::type)ecast42;
              Location& _val41 = this->orglocation[_key40];
              xfer += _val41.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orglocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Org::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Org");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgrole", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->orgrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgtype", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->orgtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->start);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullname", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->fullname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortname", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->shortname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inn", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->inn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kpp", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->kpp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ogrn", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->ogrn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgaddress", ::apache::thrift::protocol::T_MAP, 12);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orgaddress.size()));
    std::map<OrgAddressType::type, STR> ::const_iterator _iter43;
    for (_iter43 = this->orgaddress.begin(); _iter43 != this->orgaddress.end(); ++_iter43)
    {
      xfer += oprot->writeI32((int32_t)_iter43->first);
      xfer += oprot->writeString(_iter43->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("employee", ::apache::thrift::protocol::T_MAP, 15);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->employee.size()));
    std::map<OrgPosition::type, Person> ::const_iterator _iter44;
    for (_iter44 = this->employee.begin(); _iter44 != this->employee.end(); ++_iter44)
    {
      xfer += oprot->writeI32((int32_t)_iter44->first);
      xfer += _iter44->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bank", ::apache::thrift::protocol::T_MAP, 16);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->bank.size()));
    std::map<BankRole::type, Bankid> ::const_iterator _iter45;
    for (_iter45 = this->bank.begin(); _iter45 != this->bank.end(); ++_iter45)
    {
      xfer += oprot->writeI32((int32_t)_iter45->first);
      xfer += oprot->writeI64(_iter45->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentaccount", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->currentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("correspondentaccount", ::apache::thrift::protocol::T_STRING, 28);
  xfer += oprot->writeString(this->correspondentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orglocation", ::apache::thrift::protocol::T_MAP, 29);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orglocation.size()));
    std::map<OrgBuilding::type, Location> ::const_iterator _iter46;
    for (_iter46 = this->orglocation.begin(); _iter46 != this->orglocation.end(); ++_iter46)
    {
      xfer += oprot->writeI32((int32_t)_iter46->first);
      xfer += _iter46->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 30);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Org &a, Org &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgrole, b.orgrole);
  swap(a.orgtype, b.orgtype);
  swap(a.start, b.start);
  swap(a.tag, b.tag);
  swap(a.name, b.name);
  swap(a.fullname, b.fullname);
  swap(a.shortname, b.shortname);
  swap(a.inn, b.inn);
  swap(a.kpp, b.kpp);
  swap(a.ogrn, b.ogrn);
  swap(a.orgaddress, b.orgaddress);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.employee, b.employee);
  swap(a.bank, b.bank);
  swap(a.currentaccount, b.currentaccount);
  swap(a.correspondentaccount, b.correspondentaccount);
  swap(a.orglocation, b.orglocation);
  swap(a.description, b.description);
  swap(a.note, b.note);
  swap(a.__isset, b.__isset);
}

const char* Dept::ascii_fingerprint = "555535F27CF83F0266B523A223240534";
const uint8_t Dept::binary_fingerprint[16] = {0x55,0x55,0x35,0xF2,0x7C,0xF8,0x3F,0x02,0x66,0xB5,0x23,0xA2,0x23,0x24,0x05,0x34};

uint32_t Dept::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->orgid);
          this->__isset.orgid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fullname);
          this->__isset.fullname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->shortname);
          this->__isset.shortname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orgaddress.clear();
            uint32_t _size47;
            ::apache::thrift::protocol::TType _ktype48;
            ::apache::thrift::protocol::TType _vtype49;
            xfer += iprot->readMapBegin(_ktype48, _vtype49, _size47);
            uint32_t _i51;
            for (_i51 = 0; _i51 < _size47; ++_i51)
            {
              OrgAddressType::type _key52;
              int32_t ecast54;
              xfer += iprot->readI32(ecast54);
              _key52 = (OrgAddressType::type)ecast54;
              STR& _val53 = this->orgaddress[_key52];
              xfer += iprot->readString(_val53);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orgaddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->email);
          this->__isset.email = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->employee.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _ktype56;
            ::apache::thrift::protocol::TType _vtype57;
            xfer += iprot->readMapBegin(_ktype56, _vtype57, _size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              OrgPosition::type _key60;
              int32_t ecast62;
              xfer += iprot->readI32(ecast62);
              _key60 = (OrgPosition::type)ecast62;
              Person& _val61 = this->employee[_key60];
              xfer += _val61.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.employee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->bank.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _ktype64;
            ::apache::thrift::protocol::TType _vtype65;
            xfer += iprot->readMapBegin(_ktype64, _vtype65, _size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              BankRole::type _key68;
              int32_t ecast70;
              xfer += iprot->readI32(ecast70);
              _key68 = (BankRole::type)ecast70;
              Bankid& _val69 = this->bank[_key68];
              xfer += iprot->readI64(_val69);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.bank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currentaccount);
          this->__isset.currentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->correspondentaccount);
          this->__isset.correspondentaccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orglocation.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _ktype72;
            ::apache::thrift::protocol::TType _vtype73;
            xfer += iprot->readMapBegin(_ktype72, _vtype73, _size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              OrgBuilding::type _key76;
              int32_t ecast78;
              xfer += iprot->readI32(ecast78);
              _key76 = (OrgBuilding::type)ecast78;
              Location& _val77 = this->orglocation[_key76];
              xfer += _val77.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orglocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dept::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Dept");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->orgid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fullname", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fullname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("shortname", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->shortname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgaddress", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->orgaddress.size()));
    std::map<OrgAddressType::type, STR> ::const_iterator _iter79;
    for (_iter79 = this->orgaddress.begin(); _iter79 != this->orgaddress.end(); ++_iter79)
    {
      xfer += oprot->writeI32((int32_t)_iter79->first);
      xfer += oprot->writeString(_iter79->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("email", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->email);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("employee", ::apache::thrift::protocol::T_MAP, 9);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->employee.size()));
    std::map<OrgPosition::type, Person> ::const_iterator _iter80;
    for (_iter80 = this->employee.begin(); _iter80 != this->employee.end(); ++_iter80)
    {
      xfer += oprot->writeI32((int32_t)_iter80->first);
      xfer += _iter80->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bank", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->bank.size()));
    std::map<BankRole::type, Bankid> ::const_iterator _iter81;
    for (_iter81 = this->bank.begin(); _iter81 != this->bank.end(); ++_iter81)
    {
      xfer += oprot->writeI32((int32_t)_iter81->first);
      xfer += oprot->writeI64(_iter81->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentaccount", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->currentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("correspondentaccount", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->correspondentaccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orglocation", ::apache::thrift::protocol::T_MAP, 13);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orglocation.size()));
    std::map<OrgBuilding::type, Location> ::const_iterator _iter82;
    for (_iter82 = this->orglocation.begin(); _iter82 != this->orglocation.end(); ++_iter82)
    {
      xfer += oprot->writeI32((int32_t)_iter82->first);
      xfer += _iter82->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dept &a, Dept &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgid, b.orgid);
  swap(a.name, b.name);
  swap(a.fullname, b.fullname);
  swap(a.shortname, b.shortname);
  swap(a.orgaddress, b.orgaddress);
  swap(a.phone, b.phone);
  swap(a.email, b.email);
  swap(a.employee, b.employee);
  swap(a.bank, b.bank);
  swap(a.currentaccount, b.currentaccount);
  swap(a.correspondentaccount, b.correspondentaccount);
  swap(a.orglocation, b.orglocation);
  swap(a.description, b.description);
  swap(a.note, b.note);
  swap(a.__isset, b.__isset);
}

const char* OrgService::ascii_fingerprint = "5662A507D84993840D9801F5EBFA74EC";
const uint8_t OrgService::binary_fingerprint[16] = {0x56,0x62,0xA5,0x07,0xD8,0x49,0x93,0x84,0x0D,0x98,0x01,0xF5,0xEB,0xFA,0x74,0xEC};

uint32_t OrgService::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->organization.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _ktype84;
            ::apache::thrift::protocol::TType _vtype85;
            xfer += iprot->readMapBegin(_ktype84, _vtype85, _size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              OrgServiceDept::type _key88;
              int32_t ecast90;
              xfer += iprot->readI32(ecast90);
              _key88 = (OrgServiceDept::type)ecast90;
              Orgid& _val89 = this->organization[_key88];
              xfer += iprot->readI64(_val89);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orglocation.clear();
            uint32_t _size91;
            ::apache::thrift::protocol::TType _ktype92;
            ::apache::thrift::protocol::TType _vtype93;
            xfer += iprot->readMapBegin(_ktype92, _vtype93, _size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              OrgBuilding::type _key96;
              int32_t ecast98;
              xfer += iprot->readI32(ecast98);
              _key96 = (OrgBuilding::type)ecast98;
              Location& _val97 = this->orglocation[_key96];
              xfer += _val97.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orglocation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrgService::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OrgService");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->organization.size()));
    std::map<OrgServiceDept::type, Orgid> ::const_iterator _iter99;
    for (_iter99 = this->organization.begin(); _iter99 != this->organization.end(); ++_iter99)
    {
      xfer += oprot->writeI32((int32_t)_iter99->first);
      xfer += oprot->writeI64(_iter99->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orglocation", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orglocation.size()));
    std::map<OrgBuilding::type, Location> ::const_iterator _iter100;
    for (_iter100 = this->orglocation.begin(); _iter100 != this->orglocation.end(); ++_iter100)
    {
      xfer += oprot->writeI32((int32_t)_iter100->first);
      xfer += _iter100->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrgService &a, OrgService &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.organization, b.organization);
  swap(a.name, b.name);
  swap(a.orglocation, b.orglocation);
  swap(a.__isset, b.__isset);
}

const char* Customer::ascii_fingerprint = "0F04251EA5A5615E43031B38F4D98E04";
const uint8_t Customer::binary_fingerprint[16] = {0x0F,0x04,0x25,0x1E,0xA5,0xA5,0x61,0x5E,0x43,0x03,0x1B,0x38,0xF4,0xD9,0x8E,0x04};

uint32_t Customer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->organization.clear();
            uint32_t _size101;
            ::apache::thrift::protocol::TType _ktype102;
            ::apache::thrift::protocol::TType _vtype103;
            xfer += iprot->readMapBegin(_ktype102, _vtype103, _size101);
            uint32_t _i105;
            for (_i105 = 0; _i105 < _size101; ++_i105)
            {
              OrgServiceDept::type _key106;
              int32_t ecast108;
              xfer += iprot->readI32(ecast108);
              _key106 = (OrgServiceDept::type)ecast108;
              Orgid& _val107 = this->organization[_key106];
              xfer += iprot->readI64(_val107);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.organization = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast109;
          xfer += iprot->readI32(ecast109);
          this->taxtype = (TaxType::type)ecast109;
          this->__isset.taxtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspreferreddriver);
          this->__isset.haspreferreddriver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preferreddriverid);
          this->__isset.preferreddriverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hascredit);
          this->__isset.hascredit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hascreditlimit);
          this->__isset.hascreditlimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->creditlimit);
          this->__isset.creditlimit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Customer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Customer");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organization", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->organization.size()));
    std::map<OrgServiceDept::type, Orgid> ::const_iterator _iter110;
    for (_iter110 = this->organization.begin(); _iter110 != this->organization.end(); ++_iter110)
    {
      xfer += oprot->writeI32((int32_t)_iter110->first);
      xfer += oprot->writeI64(_iter110->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taxtype", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->taxtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspreferreddriver", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->haspreferreddriver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferreddriverid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->preferreddriverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hascredit", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->hascredit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hascreditlimit", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->hascreditlimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creditlimit", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->creditlimit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Customer &a, Customer &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.nickname, b.nickname);
  swap(a.tag, b.tag);
  swap(a.organization, b.organization);
  swap(a.taxtype, b.taxtype);
  swap(a.active, b.active);
  swap(a.enabled, b.enabled);
  swap(a.haspreferreddriver, b.haspreferreddriver);
  swap(a.preferreddriverid, b.preferreddriverid);
  swap(a.hascredit, b.hascredit);
  swap(a.hascreditlimit, b.hascreditlimit);
  swap(a.creditlimit, b.creditlimit);
  swap(a.__isset, b.__isset);
}

const char* CustomerStatistic::ascii_fingerprint = "6A3FF2FF06BF66D6AB8BB7501E6465D2";
const uint8_t CustomerStatistic::binary_fingerprint[16] = {0x6A,0x3F,0xF2,0xFF,0x06,0xBF,0x66,0xD6,0xAB,0x8B,0xB7,0x50,0x1E,0x64,0x65,0xD2};

uint32_t CustomerStatistic::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->currentbalance);
          this->__isset.currentbalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->usagemonth.clear();
            uint32_t _size111;
            ::apache::thrift::protocol::TType _ktype112;
            ::apache::thrift::protocol::TType _vtype113;
            xfer += iprot->readMapBegin(_ktype112, _vtype113, _size111);
            uint32_t _i115;
            for (_i115 = 0; _i115 < _size111; ++_i115)
            {
              Month::type _key116;
              int32_t ecast118;
              xfer += iprot->readI32(ecast118);
              _key116 = (Month::type)ecast118;
              PassengerUsage& _val117 = this->usagemonth[_key116];
              xfer += _val117.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.usagemonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->usageyear.clear();
            uint32_t _size119;
            ::apache::thrift::protocol::TType _ktype120;
            ::apache::thrift::protocol::TType _vtype121;
            xfer += iprot->readMapBegin(_ktype120, _vtype121, _size119);
            uint32_t _i123;
            for (_i123 = 0; _i123 < _size119; ++_i123)
            {
              NUMBER32 _key124;
              xfer += iprot->readI32(_key124);
              PassengerUsage& _val125 = this->usageyear[_key124];
              xfer += _val125.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.usageyear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CustomerStatistic::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CustomerStatistic");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("currentbalance", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->currentbalance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usagemonth", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->usagemonth.size()));
    std::map<Month::type, PassengerUsage> ::const_iterator _iter126;
    for (_iter126 = this->usagemonth.begin(); _iter126 != this->usagemonth.end(); ++_iter126)
    {
      xfer += oprot->writeI32((int32_t)_iter126->first);
      xfer += _iter126->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usageyear", ::apache::thrift::protocol::T_MAP, 8);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->usageyear.size()));
    std::map<NUMBER32, PassengerUsage> ::const_iterator _iter127;
    for (_iter127 = this->usageyear.begin(); _iter127 != this->usageyear.end(); ++_iter127)
    {
      xfer += oprot->writeI32(_iter127->first);
      xfer += _iter127->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CustomerStatistic &a, CustomerStatistic &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.customerid, b.customerid);
  swap(a.tag, b.tag);
  swap(a.enabled, b.enabled);
  swap(a.currentbalance, b.currentbalance);
  swap(a.usagemonth, b.usagemonth);
  swap(a.usageyear, b.usageyear);
  swap(a.__isset, b.__isset);
}

const char* Passenger::ascii_fingerprint = "F5060DDC8C4B35453E4BECF4CE35D3D2";
const uint8_t Passenger::binary_fingerprint[16] = {0xF5,0x06,0x0D,0xDC,0x8C,0x4B,0x35,0x45,0x3E,0x4B,0xEC,0xF4,0xCE,0x35,0xD3,0xD2};

uint32_t Passenger::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isoperator);
          this->__isset.isoperator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isvip);
          this->__isset.isvip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast128;
          xfer += iprot->readI32(ecast128);
          this->status = (EmployeeStatus::type)ecast128;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->personid);
          this->__isset.personid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast129;
          xfer += iprot->readI32(ecast129);
          this->canorder = (CanOrder::type)ecast129;
          this->__isset.canorder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->passengerlimitmonth.clear();
            uint32_t _size130;
            ::apache::thrift::protocol::TType _ktype131;
            ::apache::thrift::protocol::TType _vtype132;
            xfer += iprot->readMapBegin(_ktype131, _vtype132, _size130);
            uint32_t _i134;
            for (_i134 = 0; _i134 < _size130; ++_i134)
            {
              Month::type _key135;
              int32_t ecast137;
              xfer += iprot->readI32(ecast137);
              _key135 = (Month::type)ecast137;
              PassengerLimit& _val136 = this->passengerlimitmonth[_key135];
              xfer += _val136.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.passengerlimitmonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->passengerusagemonth.clear();
            uint32_t _size138;
            ::apache::thrift::protocol::TType _ktype139;
            ::apache::thrift::protocol::TType _vtype140;
            xfer += iprot->readMapBegin(_ktype139, _vtype140, _size138);
            uint32_t _i142;
            for (_i142 = 0; _i142 < _size138; ++_i142)
            {
              Month::type _key143;
              int32_t ecast145;
              xfer += iprot->readI32(ecast145);
              _key143 = (Month::type)ecast145;
              PassengerUsage& _val144 = this->passengerusagemonth[_key143];
              xfer += _val144.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.passengerusagemonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Passenger::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Passenger");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isoperator", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->isoperator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isvip", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->isvip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personid", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->personid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("canorder", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->canorder);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengerlimitmonth", ::apache::thrift::protocol::T_MAP, 10);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->passengerlimitmonth.size()));
    std::map<Month::type, PassengerLimit> ::const_iterator _iter146;
    for (_iter146 = this->passengerlimitmonth.begin(); _iter146 != this->passengerlimitmonth.end(); ++_iter146)
    {
      xfer += oprot->writeI32((int32_t)_iter146->first);
      xfer += _iter146->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengerusagemonth", ::apache::thrift::protocol::T_MAP, 11);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->passengerusagemonth.size()));
    std::map<Month::type, PassengerUsage> ::const_iterator _iter147;
    for (_iter147 = this->passengerusagemonth.begin(); _iter147 != this->passengerusagemonth.end(); ++_iter147)
    {
      xfer += oprot->writeI32((int32_t)_iter147->first);
      xfer += _iter147->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Passenger &a, Passenger &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.customerid, b.customerid);
  swap(a.tag, b.tag);
  swap(a.isoperator, b.isoperator);
  swap(a.isvip, b.isvip);
  swap(a.status, b.status);
  swap(a.personid, b.personid);
  swap(a.canorder, b.canorder);
  swap(a.passengerlimitmonth, b.passengerlimitmonth);
  swap(a.passengerusagemonth, b.passengerusagemonth);
  swap(a.__isset, b.__isset);
}

const char* Vehicle::ascii_fingerprint = "529D5AB19CB951DE81DB3B0A4DE5AD9E";
const uint8_t Vehicle::binary_fingerprint[16] = {0x52,0x9D,0x5A,0xB1,0x9C,0xB9,0x51,0xDE,0x81,0xDB,0x3B,0x0A,0x4D,0xE5,0xAD,0x9E};

uint32_t Vehicle::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast148;
          xfer += iprot->readI32(ecast148);
          this->vehicletype = (VehicleType::type)ecast148;
          this->__isset.vehicletype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast149;
          xfer += iprot->readI32(ecast149);
          this->vehiclecategory = (VehicleCategory::type)ecast149;
          this->__isset.vehiclecategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast150;
          xfer += iprot->readI32(ecast150);
          this->vehicleclass = (VehicleClass::type)ecast150;
          this->__isset.vehicleclass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast151;
          xfer += iprot->readI32(ecast151);
          this->vehiclestatus = (VehicleStatus::type)ecast151;
          this->__isset.vehiclestatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vehiclebrandid);
          this->__isset.vehiclebrandid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vehiclemodel);
          this->__isset.vehiclemodel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plate);
          this->__isset.plate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->platenumber);
          this->__isset.platenumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->technicalcondition);
          this->__isset.technicalcondition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->passengercount);
          this->__isset.passengercount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->childseat);
          this->__isset.childseat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->checkers);
          this->__isset.checkers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->stickers);
          this->__isset.stickers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->lantern);
          this->__isset.lantern = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->photo);
          this->__isset.photo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vin);
          this->__isset.vin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vehicle::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Vehicle");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicletype", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->vehicletype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclecategory", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->vehiclecategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleclass", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->vehicleclass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclestatus", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->vehiclestatus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclebrandid", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->vehiclebrandid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehiclemodel", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->vehiclemodel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->year);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plate", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->plate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("platenumber", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->platenumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("technicalcondition", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->technicalcondition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengercount", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->passengercount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("childseat", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->childseat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("checkers", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->checkers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stickers", ::apache::thrift::protocol::T_BOOL, 16);
  xfer += oprot->writeBool(this->stickers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lantern", ::apache::thrift::protocol::T_BOOL, 17);
  xfer += oprot->writeBool(this->lantern);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("photo", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->photo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vin", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->vin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Vehicle &a, Vehicle &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.vehicletype, b.vehicletype);
  swap(a.vehiclecategory, b.vehiclecategory);
  swap(a.vehicleclass, b.vehicleclass);
  swap(a.vehiclestatus, b.vehiclestatus);
  swap(a.vehiclebrandid, b.vehiclebrandid);
  swap(a.vehiclemodel, b.vehiclemodel);
  swap(a.color, b.color);
  swap(a.year, b.year);
  swap(a.plate, b.plate);
  swap(a.platenumber, b.platenumber);
  swap(a.technicalcondition, b.technicalcondition);
  swap(a.passengercount, b.passengercount);
  swap(a.childseat, b.childseat);
  swap(a.checkers, b.checkers);
  swap(a.stickers, b.stickers);
  swap(a.lantern, b.lantern);
  swap(a.photo, b.photo);
  swap(a.vin, b.vin);
  swap(a.__isset, b.__isset);
}

const char* Document::ascii_fingerprint = "030F9860BF6DA7CBB4ED66E5DC14E7C5";
const uint8_t Document::binary_fingerprint[16] = {0x03,0x0F,0x98,0x60,0xBF,0x6D,0xA7,0xCB,0xB4,0xED,0x66,0xE5,0xDC,0x14,0xE7,0xC5};

uint32_t Document::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ser);
          this->__isset.ser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->issuer);
          this->__isset.issuer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->issued);
          this->__isset.issued = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->validity);
          this->__isset.validity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->category);
          this->__isset.category = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->expirience);
          this->__isset.expirience = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Document::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Document");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ser", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("issuer", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->issuer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("issued", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->issued);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("validity", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->validity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("category", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->category);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expirience", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->expirience);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Document &a, Document &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.ser, b.ser);
  swap(a.number, b.number);
  swap(a.issuer, b.issuer);
  swap(a.issued, b.issued);
  swap(a.validity, b.validity);
  swap(a.category, b.category);
  swap(a.expirience, b.expirience);
  swap(a.__isset, b.__isset);
}

const char* Driver::ascii_fingerprint = "6E1EC05F6E1E998BA50467B83CFC005D";
const uint8_t Driver::binary_fingerprint[16] = {0x6E,0x1E,0xC0,0x5F,0x6E,0x1E,0x99,0x8B,0xA5,0x04,0x67,0xB8,0x3C,0xFC,0x00,0x5D};

uint32_t Driver::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size152;
            ::apache::thrift::protocol::TType _ktype153;
            ::apache::thrift::protocol::TType _vtype154;
            xfer += iprot->readMapBegin(_ktype153, _vtype154, _size152);
            uint32_t _i156;
            for (_i156 = 0; _i156 < _size152; ++_i156)
            {
              TaxiServiceRole::type _key157;
              int32_t ecast159;
              xfer += iprot->readI32(ecast159);
              _key157 = (TaxiServiceRole::type)ecast159;
              OrgServiceid& _val158 = this->svc[_key157];
              xfer += iprot->readI64(_val158);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast160;
          xfer += iprot->readI32(ecast160);
          this->status = (EmployeeStatus::type)ecast160;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->person.clear();
            uint32_t _size161;
            ::apache::thrift::protocol::TType _ktype162;
            ::apache::thrift::protocol::TType _vtype163;
            xfer += iprot->readMapBegin(_ktype162, _vtype163, _size161);
            uint32_t _i165;
            for (_i165 = 0; _i165 < _size161; ++_i165)
            {
              OrgPosition::type _key166;
              int32_t ecast168;
              xfer += iprot->readI32(ecast168);
              _key166 = (OrgPosition::type)ecast168;
              Person& _val167 = this->person[_key166];
              xfer += _val167.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->license.clear();
            uint32_t _size169;
            ::apache::thrift::protocol::TType _ktype170;
            ::apache::thrift::protocol::TType _vtype171;
            xfer += iprot->readMapBegin(_ktype170, _vtype171, _size169);
            uint32_t _i173;
            for (_i173 = 0; _i173 < _size169; ++_i173)
            {
              DocumentType::type _key174;
              int32_t ecast176;
              xfer += iprot->readI32(ecast176);
              _key174 = (DocumentType::type)ecast176;
              Documentid& _val175 = this->license[_key174];
              xfer += iprot->readI64(_val175);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.license = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->callsign);
          this->__isset.callsign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast177;
          xfer += iprot->readI32(ecast177);
          this->cabclass = (CabClass::type)ecast177;
          this->__isset.cabclass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rating);
          this->__isset.rating = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vehicleids.clear();
            uint32_t _size178;
            ::apache::thrift::protocol::TType _etype181;
            xfer += iprot->readListBegin(_etype181, _size178);
            this->vehicleids.resize(_size178);
            uint32_t _i182;
            for (_i182 = 0; _i182 < _size178; ++_i182)
            {
              xfer += iprot->readI64(this->vehicleids[_i182]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vehicleids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Driver::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Driver");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter183;
    for (_iter183 = this->svc.begin(); _iter183 != this->svc.end(); ++_iter183)
    {
      xfer += oprot->writeI32((int32_t)_iter183->first);
      xfer += oprot->writeI64(_iter183->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->person.size()));
    std::map<OrgPosition::type, Person> ::const_iterator _iter184;
    for (_iter184 = this->person.begin(); _iter184 != this->person.end(); ++_iter184)
    {
      xfer += oprot->writeI32((int32_t)_iter184->first);
      xfer += _iter184->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("license", ::apache::thrift::protocol::T_MAP, 6);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->license.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter185;
    for (_iter185 = this->license.begin(); _iter185 != this->license.end(); ++_iter185)
    {
      xfer += oprot->writeI32((int32_t)_iter185->first);
      xfer += oprot->writeI64(_iter185->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("callsign", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->callsign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cabclass", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->cabclass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rating", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->rating);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleids", ::apache::thrift::protocol::T_LIST, 12);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->vehicleids.size()));
    std::vector<Vehicleid> ::const_iterator _iter186;
    for (_iter186 = this->vehicleids.begin(); _iter186 != this->vehicleids.end(); ++_iter186)
    {
      xfer += oprot->writeI64((*_iter186));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Driver &a, Driver &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.svc, b.svc);
  swap(a.status, b.status);
  swap(a.person, b.person);
  swap(a.license, b.license);
  swap(a.nickname, b.nickname);
  swap(a.callsign, b.callsign);
  swap(a.cabclass, b.cabclass);
  swap(a.rating, b.rating);
  swap(a.online, b.online);
  swap(a.vehicleids, b.vehicleids);
  swap(a.__isset, b.__isset);
}

const char* Dispatcher::ascii_fingerprint = "947B626909480D53FC5C011022FC7A28";
const uint8_t Dispatcher::binary_fingerprint[16] = {0x94,0x7B,0x62,0x69,0x09,0x48,0x0D,0x53,0xFC,0x5C,0x01,0x10,0x22,0xFC,0x7A,0x28};

uint32_t Dispatcher::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size187;
            ::apache::thrift::protocol::TType _ktype188;
            ::apache::thrift::protocol::TType _vtype189;
            xfer += iprot->readMapBegin(_ktype188, _vtype189, _size187);
            uint32_t _i191;
            for (_i191 = 0; _i191 < _size187; ++_i191)
            {
              TaxiServiceRole::type _key192;
              int32_t ecast194;
              xfer += iprot->readI32(ecast194);
              _key192 = (TaxiServiceRole::type)ecast194;
              OrgServiceid& _val193 = this->svc[_key192];
              xfer += iprot->readI64(_val193);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast195;
          xfer += iprot->readI32(ecast195);
          this->status = (EmployeeStatus::type)ecast195;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->person.clear();
            uint32_t _size196;
            ::apache::thrift::protocol::TType _ktype197;
            ::apache::thrift::protocol::TType _vtype198;
            xfer += iprot->readMapBegin(_ktype197, _vtype198, _size196);
            uint32_t _i200;
            for (_i200 = 0; _i200 < _size196; ++_i200)
            {
              OrgPosition::type _key201;
              int32_t ecast203;
              xfer += iprot->readI32(ecast203);
              _key201 = (OrgPosition::type)ecast203;
              Person& _val202 = this->person[_key201];
              xfer += _val202.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.person = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->license.clear();
            uint32_t _size204;
            ::apache::thrift::protocol::TType _ktype205;
            ::apache::thrift::protocol::TType _vtype206;
            xfer += iprot->readMapBegin(_ktype205, _vtype206, _size204);
            uint32_t _i208;
            for (_i208 = 0; _i208 < _size204; ++_i208)
            {
              DocumentType::type _key209;
              int32_t ecast211;
              xfer += iprot->readI32(ecast211);
              _key209 = (DocumentType::type)ecast211;
              Documentid& _val210 = this->license[_key209];
              xfer += iprot->readI64(_val210);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.license = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dispatcher::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Dispatcher");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter212;
    for (_iter212 = this->svc.begin(); _iter212 != this->svc.end(); ++_iter212)
    {
      xfer += oprot->writeI32((int32_t)_iter212->first);
      xfer += oprot->writeI64(_iter212->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("person", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->person.size()));
    std::map<OrgPosition::type, Person> ::const_iterator _iter213;
    for (_iter213 = this->person.begin(); _iter213 != this->person.end(); ++_iter213)
    {
      xfer += oprot->writeI32((int32_t)_iter213->first);
      xfer += _iter213->second.write(oprot);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("license", ::apache::thrift::protocol::T_MAP, 5);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->license.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter214;
    for (_iter214 = this->license.begin(); _iter214 != this->license.end(); ++_iter214)
    {
      xfer += oprot->writeI32((int32_t)_iter214->first);
      xfer += oprot->writeI64(_iter214->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->nickname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dispatcher &a, Dispatcher &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.svc, b.svc);
  swap(a.status, b.status);
  swap(a.person, b.person);
  swap(a.license, b.license);
  swap(a.nickname, b.nickname);
  swap(a.online, b.online);
  swap(a.__isset, b.__isset);
}

const char* ServiceOrderStop::ascii_fingerprint = "47AFD758DB04CDF012751839C995DA42";
const uint8_t ServiceOrderStop::binary_fingerprint[16] = {0x47,0xAF,0xD7,0x58,0xDB,0x04,0xCD,0xF0,0x12,0x75,0x18,0x39,0xC9,0x95,0xDA,0x42};

uint32_t ServiceOrderStop::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stopno);
          this->__isset.stopno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast215;
          xfer += iprot->readI32(ecast215);
          this->stoptype = (StopType::type)ecast215;
          this->__isset.stoptype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pickuppersons.clear();
            uint32_t _size216;
            ::apache::thrift::protocol::TType _etype219;
            xfer += iprot->readListBegin(_etype219, _size216);
            this->pickuppersons.resize(_size216);
            uint32_t _i220;
            for (_i220 = 0; _i220 < _size216; ++_i220)
            {
              xfer += this->pickuppersons[_i220].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pickuppersons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast221;
          xfer += iprot->readI32(ecast221);
          this->stage = (OrderStage::type)ecast221;
          this->__isset.stage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->assigned);
          this->__isset.assigned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->arrived);
          this->__isset.arrived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finished);
          this->__isset.finished = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceOrderStop::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceOrderStop");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stopno", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->stopno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stoptype", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->stoptype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pickuppersons", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pickuppersons.size()));
    std::vector<Person> ::const_iterator _iter222;
    for (_iter222 = this->pickuppersons.begin(); _iter222 != this->pickuppersons.end(); ++_iter222)
    {
      xfer += (*_iter222).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stage", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32((int32_t)this->stage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assigned", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->assigned);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arrived", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->arrived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->finished);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceOrderStop &a, ServiceOrderStop &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.stopno, b.stopno);
  swap(a.stoptype, b.stoptype);
  swap(a.pickuppersons, b.pickuppersons);
  swap(a.payload, b.payload);
  swap(a.stage, b.stage);
  swap(a.created, b.created);
  swap(a.assigned, b.assigned);
  swap(a.started, b.started);
  swap(a.arrived, b.arrived);
  swap(a.finished, b.finished);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* ServiceOrder::ascii_fingerprint = "3FBEA8EED8AD0B3CB9C7C4AD58A39D04";
const uint8_t ServiceOrder::binary_fingerprint[16] = {0x3F,0xBE,0xA8,0xEE,0xD8,0xAD,0x0B,0x3C,0xB9,0xC7,0xC4,0xAD,0x58,0xA3,0x9D,0x04};

uint32_t ServiceOrder::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast223;
          xfer += iprot->readI32(ecast223);
          this->ordertype = (OrderType::type)ecast223;
          this->__isset.ordertype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast224;
          xfer += iprot->readI32(ecast224);
          this->ordertimetype = (OrderTimeType::type)ecast224;
          this->__isset.ordertimetype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->orderfeatures.clear();
            uint32_t _size225;
            ::apache::thrift::protocol::TType _etype228;
            xfer += iprot->readSetBegin(_etype228, _size225);
            uint32_t _i229;
            for (_i229 = 0; _i229 < _size225; ++_i229)
            {
              OrderFeature::type _elem230;
              int32_t ecast231;
              xfer += iprot->readI32(ecast231);
              _elem230 = (OrderFeature::type)ecast231;
              this->orderfeatures.insert(_elem230);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.orderfeatures = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->svc.clear();
            uint32_t _size232;
            ::apache::thrift::protocol::TType _ktype233;
            ::apache::thrift::protocol::TType _vtype234;
            xfer += iprot->readMapBegin(_ktype233, _vtype234, _size232);
            uint32_t _i236;
            for (_i236 = 0; _i236 < _size232; ++_i236)
            {
              TaxiServiceRole::type _key237;
              int32_t ecast239;
              xfer += iprot->readI32(ecast239);
              _key237 = (TaxiServiceRole::type)ecast239;
              OrgServiceid& _val238 = this->svc[_key237];
              xfer += iprot->readI64(_val238);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.svc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dispatcherid);
          this->__isset.dispatcherid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->initator);
          this->__isset.initator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->passengers.clear();
            uint32_t _size240;
            ::apache::thrift::protocol::TType _etype243;
            xfer += iprot->readListBegin(_etype243, _size240);
            this->passengers.resize(_size240);
            uint32_t _i244;
            for (_i244 = 0; _i244 < _size240; ++_i244)
            {
              xfer += iprot->readI64(this->passengers[_i244]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.passengers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stops.clear();
            uint32_t _size245;
            ::apache::thrift::protocol::TType _etype248;
            xfer += iprot->readListBegin(_etype248, _size245);
            this->stops.resize(_size245);
            uint32_t _i249;
            for (_i249 = 0; _i249 < _size245; ++_i249)
            {
              xfer += iprot->readI64(this->stops[_i249]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->payload.read(iprot);
          this->__isset.payload = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast250;
          xfer += iprot->readI32(ecast250);
          this->stage = (OrderStage::type)ecast250;
          this->__isset.stage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->crew.clear();
            uint32_t _size251;
            ::apache::thrift::protocol::TType _ktype252;
            ::apache::thrift::protocol::TType _vtype253;
            xfer += iprot->readMapBegin(_ktype252, _vtype253, _size251);
            uint32_t _i255;
            for (_i255 = 0; _i255 < _size251; ++_i255)
            {
              CrewRole::type _key256;
              int32_t ecast258;
              xfer += iprot->readI32(ecast258);
              _key256 = (CrewRole::type)ecast258;
              Driverid& _val257 = this->crew[_key256];
              xfer += iprot->readI64(_val257);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.crew = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduletime);
          this->__isset.sheduletime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->assigned);
          this->__isset.assigned = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->started);
          this->__isset.started = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->arrived);
          this->__isset.arrived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->finished);
          this->__isset.finished = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->locstart.read(iprot);
          this->__isset.locstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->locfinish.read(iprot);
          this->__isset.locfinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totaltimefiscal);
          this->__isset.totaltimefiscal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totaltimeactual);
          this->__isset.totaltimeactual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumfiscal);
          this->__isset.sumfiscal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumactual);
          this->__isset.sumactual = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast259;
          xfer += iprot->readI32(ecast259);
          this->cabclass = (CabClass::type)ecast259;
          this->__isset.cabclass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast260;
          xfer += iprot->readI32(ecast260);
          this->paymentstate = (PaymentState::type)ecast260;
          this->__isset.paymentstate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast261;
          xfer += iprot->readI32(ecast261);
          this->claimstate = (ClaimState::type)ecast261;
          this->__isset.claimstate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasstops);
          this->__isset.hasstops = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceOrder::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceOrder");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordertype", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->ordertype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordertimetype", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->ordertimetype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderfeatures", ::apache::thrift::protocol::T_SET, 6);
  {
    xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->orderfeatures.size()));
    std::set<OrderFeature::type> ::const_iterator _iter262;
    for (_iter262 = this->orderfeatures.begin(); _iter262 != this->orderfeatures.end(); ++_iter262)
    {
      xfer += oprot->writeI32((int32_t)(*_iter262));
    }
    xfer += oprot->writeSetEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("svc", ::apache::thrift::protocol::T_MAP, 7);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->svc.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter263;
    for (_iter263 = this->svc.begin(); _iter263 != this->svc.end(); ++_iter263)
    {
      xfer += oprot->writeI32((int32_t)_iter263->first);
      xfer += oprot->writeI64(_iter263->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dispatcherid", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->dispatcherid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("initator", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->initator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengers", ::apache::thrift::protocol::T_LIST, 10);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->passengers.size()));
    std::vector<Passengerid> ::const_iterator _iter264;
    for (_iter264 = this->passengers.begin(); _iter264 != this->passengers.end(); ++_iter264)
    {
      xfer += oprot->writeI64((*_iter264));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stops", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->stops.size()));
    std::vector<ServiceOrderStopid> ::const_iterator _iter265;
    for (_iter265 = this->stops.begin(); _iter265 != this->stops.end(); ++_iter265)
    {
      xfer += oprot->writeI64((*_iter265));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("payload", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->payload.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stage", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32((int32_t)this->stage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crew", ::apache::thrift::protocol::T_MAP, 14);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->crew.size()));
    std::map<CrewRole::type, Driverid> ::const_iterator _iter266;
    for (_iter266 = this->crew.begin(); _iter266 != this->crew.end(); ++_iter266)
    {
      xfer += oprot->writeI32((int32_t)_iter266->first);
      xfer += oprot->writeI64(_iter266->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduletime", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->sheduletime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("assigned", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->assigned);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("started", ::apache::thrift::protocol::T_I64, 18);
  xfer += oprot->writeI64(this->started);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arrived", ::apache::thrift::protocol::T_I64, 19);
  xfer += oprot->writeI64(this->arrived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finished", ::apache::thrift::protocol::T_I64, 20);
  xfer += oprot->writeI64(this->finished);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locstart", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->locstart.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("locfinish", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->locfinish.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totaltimefiscal", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->totaltimefiscal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totaltimeactual", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->totaltimeactual);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumfiscal", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->sumfiscal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumactual", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->sumactual);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cabclass", ::apache::thrift::protocol::T_I32, 27);
  xfer += oprot->writeI32((int32_t)this->cabclass);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paymentstate", ::apache::thrift::protocol::T_I32, 28);
  xfer += oprot->writeI32((int32_t)this->paymentstate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("claimstate", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32((int32_t)this->claimstate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasstops", ::apache::thrift::protocol::T_BOOL, 30);
  xfer += oprot->writeBool(this->hasstops);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 31);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceOrder &a, ServiceOrder &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.cityid, b.cityid);
  swap(a.tag, b.tag);
  swap(a.ordertype, b.ordertype);
  swap(a.ordertimetype, b.ordertimetype);
  swap(a.orderfeatures, b.orderfeatures);
  swap(a.svc, b.svc);
  swap(a.dispatcherid, b.dispatcherid);
  swap(a.initator, b.initator);
  swap(a.passengers, b.passengers);
  swap(a.stops, b.stops);
  swap(a.payload, b.payload);
  swap(a.stage, b.stage);
  swap(a.crew, b.crew);
  swap(a.created, b.created);
  swap(a.sheduletime, b.sheduletime);
  swap(a.assigned, b.assigned);
  swap(a.started, b.started);
  swap(a.arrived, b.arrived);
  swap(a.finished, b.finished);
  swap(a.locstart, b.locstart);
  swap(a.locfinish, b.locfinish);
  swap(a.totaltimefiscal, b.totaltimefiscal);
  swap(a.totaltimeactual, b.totaltimeactual);
  swap(a.sumfiscal, b.sumfiscal);
  swap(a.sumactual, b.sumactual);
  swap(a.cabclass, b.cabclass);
  swap(a.paymentstate, b.paymentstate);
  swap(a.claimstate, b.claimstate);
  swap(a.hasstops, b.hasstops);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* ServiceOrderDecline::ascii_fingerprint = "5BC9B99EA481D3519FBE8AA202B01F9E";
const uint8_t ServiceOrderDecline::binary_fingerprint[16] = {0x5B,0xC9,0xB9,0x9E,0xA4,0x81,0xD3,0x51,0x9F,0xBE,0x8A,0xA2,0x02,0xB0,0x1F,0x9E};

uint32_t ServiceOrderDecline::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->declinetime);
          this->__isset.declinetime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast267;
          xfer += iprot->readI32(ecast267);
          this->cause = (DeclineOrderCause::type)ecast267;
          this->__isset.cause = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceOrderDecline::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceOrderDecline");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("declinetime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->declinetime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cause", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->cause);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceOrderDecline &a, ServiceOrderDecline &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.declinetime, b.declinetime);
  swap(a.driverid, b.driverid);
  swap(a.cause, b.cause);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* Claim::ascii_fingerprint = "06C27127ED88B5CC24A1B92200F50BC2";
const uint8_t Claim::binary_fingerprint[16] = {0x06,0xC2,0x71,0x27,0xED,0x88,0xB5,0xCC,0x24,0xA1,0xB9,0x22,0x00,0xF5,0x0B,0xC2};

uint32_t Claim::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast268;
          xfer += iprot->readI32(ecast268);
          this->personrole = (PersonRole::type)ecast268;
          this->__isset.personrole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->claimtime);
          this->__isset.claimtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Claim::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Claim");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("personrole", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->personrole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("claimtime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->claimtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->notes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Claim &a, Claim &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.personrole, b.personrole);
  swap(a.driverid, b.driverid);
  swap(a.claimtime, b.claimtime);
  swap(a.notes, b.notes);
  swap(a.__isset, b.__isset);
}

const char* Track::ascii_fingerprint = "8F4A1B4B5D9589830265885F094FB12C";
const uint8_t Track::binary_fingerprint[16] = {0x8F,0x4A,0x1B,0x4B,0x5D,0x95,0x89,0x83,0x02,0x65,0x88,0x5F,0x09,0x4F,0xB1,0x2C};

uint32_t Track::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->serviceorderid);
          this->__isset.serviceorderid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tracktime);
          this->__isset.tracktime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->location.read(iprot);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Track::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Track");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serviceorderid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->serviceorderid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tracktime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->tracktime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->location.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Track &a, Track &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.driverid, b.driverid);
  swap(a.serviceorderid, b.serviceorderid);
  swap(a.tracktime, b.tracktime);
  swap(a.location, b.location);
  swap(a.__isset, b.__isset);
}

const char* SheduleDays::ascii_fingerprint = "ECB523BA8415F2971A85590A45B62180";
const uint8_t SheduleDays::binary_fingerprint[16] = {0xEC,0xB5,0x23,0xBA,0x84,0x15,0xF2,0x97,0x1A,0x85,0x59,0x0A,0x45,0xB6,0x21,0x80};

uint32_t SheduleDays::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week0);
          this->__isset.week0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week1);
          this->__isset.week1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week2);
          this->__isset.week2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week3);
          this->__isset.week3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week4);
          this->__isset.week4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week5);
          this->__isset.week5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->week6);
          this->__isset.week6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SheduleDays::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SheduleDays");

  xfer += oprot->writeFieldBegin("week0", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->week0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week1", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->week1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week2", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->week2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week3", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->week3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week4", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->week4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week5", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->week5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("week6", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->week6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SheduleDays &a, SheduleDays &b) {
  using ::std::swap;
  swap(a.week0, b.week0);
  swap(a.week1, b.week1);
  swap(a.week2, b.week2);
  swap(a.week3, b.week3);
  swap(a.week4, b.week4);
  swap(a.week5, b.week5);
  swap(a.week6, b.week6);
  swap(a.__isset, b.__isset);
}

const char* Shedule::ascii_fingerprint = "44E51A62670F629C431106A0CD7ACF7F";
const uint8_t Shedule::binary_fingerprint[16] = {0x44,0xE5,0x1A,0x62,0x67,0x0F,0x62,0x9C,0x43,0x11,0x06,0xA0,0xCD,0x7A,0xCF,0x7F};

uint32_t Shedule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sheduledays.read(iprot);
          this->__isset.sheduledays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pointstart.read(iprot);
          this->__isset.pointstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pointfinish.read(iprot);
          this->__isset.pointfinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasMiddlePoints);
          this->__isset.hasMiddlePoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspassenger);
          this->__isset.haspassenger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->passengers.clear();
            uint32_t _size269;
            ::apache::thrift::protocol::TType _etype272;
            xfer += iprot->readListBegin(_etype272, _size269);
            this->passengers.resize(_size269);
            uint32_t _i273;
            for (_i273 = 0; _i273 < _size269; ++_i273)
            {
              xfer += iprot->readI64(this->passengers[_i273]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.passengers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestart);
          this->__isset.timestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timefinish);
          this->__isset.timefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduleoperatorid);
          this->__isset.sheduleoperatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->preferreddriverid);
          this->__isset.preferreddriverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Shedule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Shedule");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduledays", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->sheduledays.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointstart", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->pointstart.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pointfinish", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->pointfinish.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasMiddlePoints", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->hasMiddlePoints);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspassenger", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->haspassenger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengers", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->passengers.size()));
    std::vector<Passengerid> ::const_iterator _iter274;
    for (_iter274 = this->passengers.begin(); _iter274 != this->passengers.end(); ++_iter274)
    {
      xfer += oprot->writeI64((*_iter274));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestart", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->timestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timefinish", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->timefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduleoperatorid", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->sheduleoperatorid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("preferreddriverid", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->preferreddriverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Shedule &a, Shedule &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.active, b.active);
  swap(a.sheduledays, b.sheduledays);
  swap(a.customerid, b.customerid);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.pointstart, b.pointstart);
  swap(a.pointfinish, b.pointfinish);
  swap(a.hasMiddlePoints, b.hasMiddlePoints);
  swap(a.haspassenger, b.haspassenger);
  swap(a.passengers, b.passengers);
  swap(a.timestart, b.timestart);
  swap(a.timefinish, b.timefinish);
  swap(a.sheduleoperatorid, b.sheduleoperatorid);
  swap(a.preferreddriverid, b.preferreddriverid);
  swap(a.__isset, b.__isset);
}

const char* DriverBlackList::ascii_fingerprint = "66C8E6F97F0275919D86FEB536251B17";
const uint8_t DriverBlackList::binary_fingerprint[16] = {0x66,0xC8,0xE6,0xF9,0x7F,0x02,0x75,0x91,0x9D,0x86,0xFE,0xB5,0x36,0x25,0x1B,0x17};

uint32_t DriverBlackList::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DriverBlackList::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DriverBlackList");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DriverBlackList &a, DriverBlackList &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.created, b.created);
  swap(a.customerid, b.customerid);
  swap(a.driverid, b.driverid);
  swap(a.__isset, b.__isset);
}

const char* SheduleStop::ascii_fingerprint = "A106DE6B93B408305F36CDB31C047018";
const uint8_t SheduleStop::binary_fingerprint[16] = {0xA1,0x06,0xDE,0x6B,0x93,0xB4,0x08,0x30,0x5F,0x36,0xCD,0xB3,0x1C,0x04,0x70,0x18};

uint32_t SheduleStop::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sheduleid);
          this->__isset.sheduleid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->point.read(iprot);
          this->__isset.point = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->position);
          this->__isset.position = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspassenger);
          this->__isset.haspassenger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->passengerid);
          this->__isset.passengerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SheduleStop::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SheduleStop");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sheduleid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->sheduleid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("point", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->point.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("position", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->position);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspassenger", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->haspassenger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passengerid", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->passengerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SheduleStop &a, SheduleStop &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.sheduleid, b.sheduleid);
  swap(a.point, b.point);
  swap(a.position, b.position);
  swap(a.haspassenger, b.haspassenger);
  swap(a.passengerid, b.passengerid);
  swap(a.__isset, b.__isset);
}

const char* Rate::ascii_fingerprint = "E062C8E7E485184A7AA8681BD13DB48D";
const uint8_t Rate::binary_fingerprint[16] = {0xE0,0x62,0xC8,0xE7,0xE4,0x85,0x18,0x4A,0x7A,0xA8,0x68,0x1B,0xD1,0x3D,0xB4,0x8D};

uint32_t Rate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->orgserviceid);
          this->__isset.orgserviceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->cityid);
          this->__isset.cityid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datefinish);
          this->__isset.datefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isweekend);
          this->__isset.isweekend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isday);
          this->__isset.isday = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hourstart);
          this->__isset.hourstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hourfinish);
          this->__isset.hourfinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->costmin);
          this->__isset.costmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->priceboarding);
          this->__isset.priceboarding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->priceminute);
          this->__isset.priceminute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pricedelay);
          this->__isset.pricedelay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pricewait);
          this->__isset.pricewait = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->speedmin);
          this->__isset.speedmin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timedelayfree);
          this->__isset.timedelayfree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Rate");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgserviceid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->orgserviceid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->cityid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datefinish", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->datefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isweekend", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->isweekend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isday", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->isday);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hourstart", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->hourstart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hourfinish", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->hourfinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("costmin", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->costmin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceboarding", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->priceboarding);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("priceminute", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->priceminute);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pricedelay", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->pricedelay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pricewait", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->pricewait);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("speedmin", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->speedmin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timedelayfree", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->timedelayfree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rate &a, Rate &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgserviceid, b.orgserviceid);
  swap(a.cityid, b.cityid);
  swap(a.name, b.name);
  swap(a.active, b.active);
  swap(a.datestart, b.datestart);
  swap(a.datefinish, b.datefinish);
  swap(a.isweekend, b.isweekend);
  swap(a.isday, b.isday);
  swap(a.hourstart, b.hourstart);
  swap(a.hourfinish, b.hourfinish);
  swap(a.costmin, b.costmin);
  swap(a.priceboarding, b.priceboarding);
  swap(a.priceminute, b.priceminute);
  swap(a.pricedelay, b.pricedelay);
  swap(a.pricewait, b.pricewait);
  swap(a.speedmin, b.speedmin);
  swap(a.timedelayfree, b.timedelayfree);
  swap(a.__isset, b.__isset);
}

const char* Notification::ascii_fingerprint = "6DCF553DD2AEB36FD2573F2FDE82F2A7";
const uint8_t Notification::binary_fingerprint[16] = {0x6D,0xCF,0x55,0x3D,0xD2,0xAE,0xB3,0x6F,0xD2,0x57,0x3F,0x2F,0xDE,0x82,0xF2,0xA7};

uint32_t Notification::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isactive);
          this->__isset.isactive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->msgtime);
          this->__isset.msgtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast275;
          xfer += iprot->readI32(ecast275);
          this->msgfrom = (PersonRole::type)ecast275;
          this->__isset.msgfrom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->driverid);
          this->__isset.driverid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->todriver);
          this->__isset.todriver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->tooperator);
          this->__isset.tooperator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->topassenger);
          this->__isset.topassenger = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->todispatcher);
          this->__isset.todispatcher = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Notification::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Notification");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isactive", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isactive);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgtime", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->msgtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgfrom", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->msgfrom);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverid", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->driverid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("todriver", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->todriver);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tooperator", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->tooperator);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topassenger", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->topassenger);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("todispatcher", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->todispatcher);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Notification &a, Notification &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.isactive, b.isactive);
  swap(a.msgtime, b.msgtime);
  swap(a.msgfrom, b.msgfrom);
  swap(a.driverid, b.driverid);
  swap(a.todriver, b.todriver);
  swap(a.tooperator, b.tooperator);
  swap(a.topassenger, b.topassenger);
  swap(a.todispatcher, b.todispatcher);
  swap(a.note, b.note);
  swap(a.__isset, b.__isset);
}

const char* BillAct::ascii_fingerprint = "54D436AB741A5F55EFB974DB54DA24FE";
const uint8_t BillAct::binary_fingerprint[16] = {0x54,0xD4,0x36,0xAB,0x74,0x1A,0x5F,0x55,0xEF,0xB9,0x74,0xDB,0x54,0xDA,0x24,0xFE};

uint32_t BillAct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->orgservice.clear();
            uint32_t _size276;
            ::apache::thrift::protocol::TType _ktype277;
            ::apache::thrift::protocol::TType _vtype278;
            xfer += iprot->readMapBegin(_ktype277, _vtype278, _size276);
            uint32_t _i280;
            for (_i280 = 0; _i280 < _size276; ++_i280)
            {
              TaxiServiceRole::type _key281;
              int32_t ecast283;
              xfer += iprot->readI32(ecast283);
              _key281 = (TaxiServiceRole::type)ecast283;
              OrgServiceid& _val282 = this->orgservice[_key281];
              xfer += iprot->readI64(_val282);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.orgservice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->customerid);
          this->__isset.customerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->periodid);
          this->__isset.periodid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datefinish);
          this->__isset.datefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->total0);
          this->__isset.total0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->total1);
          this->__isset.total1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->total2);
          this->__isset.total2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->taxpercent);
          this->__isset.taxpercent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tax);
          this->__isset.tax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasdiscount);
          this->__isset.hasdiscount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->haspayments);
          this->__isset.haspayments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->paid);
          this->__isset.paid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datepaid);
          this->__isset.datepaid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumbefore);
          this->__isset.sumbefore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sumafter);
          this->__isset.sumafter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->billno);
          this->__isset.billno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->actno);
          this->__isset.actno = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BillAct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BillAct");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orgservice", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->orgservice.size()));
    std::map<TaxiServiceRole::type, OrgServiceid> ::const_iterator _iter284;
    for (_iter284 = this->orgservice.begin(); _iter284 != this->orgservice.end(); ++_iter284)
    {
      xfer += oprot->writeI32((int32_t)_iter284->first);
      xfer += oprot->writeI64(_iter284->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->customerid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("periodid", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->periodid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datefinish", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->datefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total0", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->total0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total1", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->total1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total2", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->total2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taxpercent", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->taxpercent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tax", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->tax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasdiscount", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->hasdiscount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->created);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("haspayments", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->haspayments);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("paid", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->paid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datepaid", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->datepaid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumbefore", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->sumbefore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumafter", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->sumafter);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("billno", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->billno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actno", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->actno);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BillAct &a, BillAct &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.orgservice, b.orgservice);
  swap(a.customerid, b.customerid);
  swap(a.periodid, b.periodid);
  swap(a.datestart, b.datestart);
  swap(a.datefinish, b.datefinish);
  swap(a.total0, b.total0);
  swap(a.total1, b.total1);
  swap(a.total2, b.total2);
  swap(a.taxpercent, b.taxpercent);
  swap(a.tax, b.tax);
  swap(a.hasdiscount, b.hasdiscount);
  swap(a.created, b.created);
  swap(a.haspayments, b.haspayments);
  swap(a.paid, b.paid);
  swap(a.datepaid, b.datepaid);
  swap(a.sumbefore, b.sumbefore);
  swap(a.sumafter, b.sumafter);
  swap(a.note, b.note);
  swap(a.billno, b.billno);
  swap(a.actno, b.actno);
  swap(a.__isset, b.__isset);
}

const char* Payment::ascii_fingerprint = "1F10CEFCE913A7C7AC1BF57FD21B890E";
const uint8_t Payment::binary_fingerprint[16] = {0x1F,0x10,0xCE,0xFC,0xE9,0x13,0xA7,0xC7,0xAC,0x1B,0xF5,0x7F,0xD2,0x1B,0x89,0x0E};

uint32_t Payment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->billactid);
          this->__isset.billactid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datereceived);
          this->__isset.datereceived = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->document.clear();
            uint32_t _size285;
            ::apache::thrift::protocol::TType _ktype286;
            ::apache::thrift::protocol::TType _vtype287;
            xfer += iprot->readMapBegin(_ktype286, _vtype287, _size285);
            uint32_t _i289;
            for (_i289 = 0; _i289 < _size285; ++_i289)
            {
              DocumentType::type _key290;
              int32_t ecast292;
              xfer += iprot->readI32(ecast292);
              _key290 = (DocumentType::type)ecast292;
              Documentid& _val291 = this->document[_key290];
              xfer += iprot->readI64(_val291);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.document = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Payment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Payment");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("billactid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->billactid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datereceived", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->datereceived);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("document", ::apache::thrift::protocol::T_MAP, 4);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->document.size()));
    std::map<DocumentType::type, Documentid> ::const_iterator _iter293;
    for (_iter293 = this->document.begin(); _iter293 != this->document.end(); ++_iter293)
    {
      xfer += oprot->writeI32((int32_t)_iter293->first);
      xfer += oprot->writeI64(_iter293->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Payment &a, Payment &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.billactid, b.billactid);
  swap(a.datereceived, b.datereceived);
  swap(a.document, b.document);
  swap(a.__isset, b.__isset);
}

const char* AutoPayment::ascii_fingerprint = "CA9E086295400ABB4921368555BAB8D5";
const uint8_t AutoPayment::binary_fingerprint[16] = {0xCA,0x9E,0x08,0x62,0x95,0x40,0x0A,0xBB,0x49,0x21,0x36,0x85,0x55,0xBA,0xB8,0xD5};

uint32_t AutoPayment::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->periodid);
          this->__isset.periodid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datestart);
          this->__isset.datestart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->datefinish);
          this->__isset.datefinish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AutoPayment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AutoPayment");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("periodid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->periodid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datestart", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->datestart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datefinish", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->datefinish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AutoPayment &a, AutoPayment &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.periodid, b.periodid);
  swap(a.datestart, b.datestart);
  swap(a.datefinish, b.datefinish);
  swap(a.state, b.state);
  swap(a.__isset, b.__isset);
}

const char* ServiceFailure::ascii_fingerprint = "D3BA2D33C1BA9DD4F2FDDA18F1640BC8";
const uint8_t ServiceFailure::binary_fingerprint[16] = {0xD3,0xBA,0x2D,0x33,0xC1,0xBA,0x9D,0xD4,0xF2,0xFD,0xDA,0x18,0xF1,0x64,0x0B,0xC8};

uint32_t ServiceFailure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast294;
          xfer += iprot->readI32(ecast294);
          this->errortype = (ErrorType::type)ecast294;
          this->__isset.errortype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorcode);
          this->__isset.errorcode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceFailure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceFailure");

  xfer += oprot->writeFieldBegin("errortype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errortype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorcode", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->errorcode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceFailure &a, ServiceFailure &b) {
  using ::std::swap;
  swap(a.errortype, b.errortype);
  swap(a.errorcode, b.errorcode);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

} // namespace
